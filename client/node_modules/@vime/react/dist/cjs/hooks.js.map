{"version":3,"file":"hooks.js","sourceRoot":"","sources":["../../src/hooks.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+BAIe;AACf,mCAMoB;AAEpB,IAAM,IAAI,GAAG,cAAO,CAAC,CAAC;AAEtB;;GAEG;AACI,IAAM,SAAS,GAAG,UAAC,GAAwC;IAC1D,IAAA,KAAsB,gBAAQ,CAA6B,IAAI,CAAC,EAA/D,MAAM,QAAA,EAAE,SAAS,QAA8C,CAAC;IAEvE,uBAAe,CAAC;QACd,SAAe,IAAI;;;;;;4BACjB,KAAA,SAAS,CAAA;iCAAE,GAAG,CAAC,OAAO,EAAX,wBAAW;4BAAI,qBAAM,iBAAU,CAAC,GAAG,CAAC,OAAO,CAAC,EAAA;;4BAA9B,KAAA,CAAC,SAA6B,CAAC,CAAA;;;4BAAG,KAAA,IAAI,CAAA;;;4BAA/D,kBAAU,IAAsD,EAAC,CAAC;;;;;SACnE;QAED,IAAI,EAAE,CAAC;IACT,CAAC,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;IAElB,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC;AAZW,QAAA,SAAS,aAYpB;AAOF;;;;;;;GAOG;AACI,IAAM,gBAAgB,GAAG,UAC9B,GAAwC,EACxC,IAAO,EACP,YAA4B;IAEtB,IAAA,KAAoB,gBAAQ,CAAC,YAAY,CAAC,EAAzC,KAAK,QAAA,EAAE,QAAQ,QAA0B,CAAC;IAEjD,IAAM,QAAQ,GAAG,mBAAW,CAC1B,CAAC,GAAG,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,uBAAgB,CAAC,GAAG,CAAC,OAAO,CAAC,EAC7D,CAAC,GAAG,CAAC,OAAO,CAAC,CACd,CAAC;IAEF,IAAM,MAAM,GAAG,mBAAW;IACxB,wDAAwD;IACxD,UAAC,KAAqB,IAAO,QAAQ,CAAC,IAAW,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,EAC5D,CAAC,QAAQ,EAAE,IAAI,CAAC,CACjB,CAAC;IAEF,uBAAe,CAAC;QACd,IAAI,GAAG,CAAC,OAAO,KAAK,IAAI;YAAE,OAAO,SAAS,CAAC;QAE3C,IAAI,OAAmB,CAAC;QAExB,SAAe,OAAO;;;;gCACV,qBAAM,uBAAU,CACxB,GAAG,CAAC,OAAQ,EACZ,CAAC,IAAI,CAAC,EACN,UAAC,CAAC,EAAE,QAAQ,IAAO,QAAQ,CAAC,QAAe,CAAC,CAAC,CAAC,CAAC,CAChD,EAAA;;4BAJD,OAAO,GAAG,SAIT,CAAC;;;;;SACH;QAED,OAAO,EAAE,CAAC;QACV,OAAO,cAAQ,OAAO,aAAP,OAAO,uBAAP,OAAO,GAAK,CAAC,CAAC,CAAC;IAChC,CAAC,EAAE,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;IAExB,OAAO,CAAC,KAAK,EAAG,MAAc,CAAC,CAAC;AAClC,CAAC,CAAC;AApCW,QAAA,gBAAgB,oBAoC3B","sourcesContent":["import {\n  useCallback,\n  useLayoutEffect,\n  useState,\n} from 'react';\nimport {\n  PlayerProps,\n  createDispatcher,\n  usePlayerContext as useContext,\n  findPlayer,\n  WritableProps,\n} from '@vime/core';\n\nconst noop = () => {};\n\n/**\n * Returns the closest ancestor player to the given `ref`.\n */\nexport const usePlayer = (ref: React.RefObject<HTMLElement | null>) => {\n  const [player, setPlayer] = useState<HTMLVmPlayerElement | null>(null);\n\n  useLayoutEffect(() => {\n    async function find() {\n      setPlayer((ref.current ? (await findPlayer(ref.current)) : null));\n    }\n\n    find();\n  }, [ref.current]);\n\n  return player;\n};\n\nexport type PropBinding<P extends keyof PlayerProps> = [\n  value: PlayerProps[P],\n  setValue: P extends keyof WritableProps ? ((value: PlayerProps[P]) => void) : undefined,\n];\n\n/**\n * Binds the given `prop` to the closest ancestor player of the given `ref`. When the property\n * changes on the player, this hook will trigger a re-render with the new value.\n *\n * @param ref The ref to start searching from.\n * @param prop The property to bind to.\n * @param defaultValue The initial value of the property until the the player context is bound.\n */\nexport const usePlayerContext = <P extends keyof PlayerProps>(\n  ref: React.RefObject<HTMLElement | null>,\n  prop: P,\n  defaultValue: PlayerProps[P],\n): PropBinding<P> => {\n  const [value, setValue] = useState(defaultValue);\n\n  const dispatch = useCallback(\n    (ref.current === null) ? noop : createDispatcher(ref.current),\n    [ref.current],\n  );\n\n  const setter = useCallback(\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    (value: PlayerProps[P]) => { dispatch(prop as any, value); },\n    [dispatch, prop],\n  );\n\n  useLayoutEffect(() => {\n    if (ref.current === null) return undefined;\n\n    let cleanup: () => void;\n\n    async function connect() {\n      cleanup = await useContext(\n        ref.current!,\n        [prop],\n        (_, newValue) => { setValue(newValue as any); },\n      );\n    }\n\n    connect();\n    return () => { cleanup?.(); };\n  }, [ref.current, prop]);\n\n  return [value, (setter as any)];\n};\n"]}