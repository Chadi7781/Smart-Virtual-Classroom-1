import { PlayerProps, WritableProps } from '@vime/core';
/**
 * Returns the closest ancestor player to the given `ref`.
 */
export declare const usePlayer: (ref: React.RefObject<HTMLElement | null>) => HTMLVmPlayerElement | null;
export declare type PropBinding<P extends keyof PlayerProps> = [
    value: PlayerProps[P],
    setValue: P extends keyof WritableProps ? ((value: PlayerProps[P]) => void) : undefined
];
/**
 * Binds the given `prop` to the closest ancestor player of the given `ref`. When the property
 * changes on the player, this hook will trigger a re-render with the new value.
 *
 * @param ref The ref to start searching from.
 * @param prop The property to bind to.
 * @param defaultValue The initial value of the property until the the player context is bound.
 */
export declare const usePlayerContext: <P extends "theme" | "icons" | "paused" | "playing" | "duration" | "mediaTitle" | "currentSrc" | "currentPoster" | "currentTime" | "autoplay" | "ready" | "playbackReady" | "loop" | "muted" | "buffered" | "playbackRate" | "playbackRates" | "playbackQuality" | "playbackQualities" | "seeking" | "debug" | "playbackStarted" | "playbackEnded" | "buffering" | "controls" | "isControlsActive" | "volume" | "isFullscreenActive" | "aspectRatio" | "viewType" | "isAudioView" | "isVideoView" | "mediaType" | "isAudio" | "isVideo" | "isMobile" | "isTouch" | "isSettingsActive" | "currentProvider" | "isLive" | "isPiPActive" | "autopause" | "playsinline" | "textTracks" | "currentTextTrack" | "isTextTrackVisible" | "shouldRenderNativeTextTracks" | "audioTracks" | "currentAudioTrack" | "language" | "languages" | "translations" | "i18n" | "logger">(ref: React.RefObject<HTMLElement | null>, prop: P, defaultValue: PlayerProps[P]) => PropBinding<P>;
