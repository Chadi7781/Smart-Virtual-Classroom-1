'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-9e4d61ac.js');
require('./PlayerProps-4bbfc16a.js');
const withComponentRegistry = require('./withComponentRegistry-50d191fe.js');
const ViewType = require('./ViewType-435b01ff.js');
require('./Provider-0e71f5a4.js');
const ProviderConnect = require('./ProviderConnect-3c00ee3c.js');

const Video = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    /**
     * @internal Whether an external SDK will attach itself to the media player and control it.
     */
    this.willAttach = false;
    /**
     * @internal Whether an external SDK will manage the text tracks.
     */
    this.hasCustomTextManager = false;
    /** @inheritdoc */
    this.preload = 'metadata';
    withComponentRegistry.withComponentRegistry(this);
    ProviderConnect.withProviderConnect(this);
  }
  onProviderConnect(event) {
    if (this.willAttach)
      event.stopImmediatePropagation();
  }
  onProviderDisconnect(event) {
    if (this.willAttach)
      event.stopImmediatePropagation();
  }
  /** @internal */
  async getAdapter() {
    return this.fileProvider?.getAdapter();
  }
  render() {
    return (
    // @ts-ignore
    index.h("vm-file", { noConnect: true, willAttach: this.willAttach, crossOrigin: this.crossOrigin, poster: this.poster, preload: this.preload, controlsList: this.controlsList, autoPiP: this.autoPiP, disablePiP: this.disablePiP, disableRemotePlayback: this.disableRemotePlayback, hasCustomTextManager: this.hasCustomTextManager, mediaTitle: this.mediaTitle, viewType: ViewType.ViewType.Video, ref: (el) => {
        this.fileProvider = el;
      } }, index.h("slot", null)));
  }
};

exports.vm_video = Video;
