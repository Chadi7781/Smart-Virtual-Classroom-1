import { r as registerInstance, h } from './index-d8f97135.js';
import './PlayerProps-2c57fcea.js';
import { w as withComponentRegistry } from './withComponentRegistry-892f231d.js';
import { V as ViewType } from './ViewType-6da43616.js';
import './Provider-2e7e8366.js';
import { w as withProviderConnect } from './ProviderConnect-e344bf51.js';

const Video = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /**
     * @internal Whether an external SDK will attach itself to the media player and control it.
     */
    this.willAttach = false;
    /**
     * @internal Whether an external SDK will manage the text tracks.
     */
    this.hasCustomTextManager = false;
    /** @inheritdoc */
    this.preload = 'metadata';
    withComponentRegistry(this);
    withProviderConnect(this);
  }
  onProviderConnect(event) {
    if (this.willAttach)
      event.stopImmediatePropagation();
  }
  onProviderDisconnect(event) {
    if (this.willAttach)
      event.stopImmediatePropagation();
  }
  /** @internal */
  async getAdapter() {
    return this.fileProvider?.getAdapter();
  }
  render() {
    return (
    // @ts-ignore
    h("vm-file", { noConnect: true, willAttach: this.willAttach, crossOrigin: this.crossOrigin, poster: this.poster, preload: this.preload, controlsList: this.controlsList, autoPiP: this.autoPiP, disablePiP: this.disablePiP, disableRemotePlayback: this.disableRemotePlayback, hasCustomTextManager: this.hasCustomTextManager, mediaTitle: this.mediaTitle, viewType: ViewType.Video, ref: (el) => {
        this.fileProvider = el;
      } }, h("slot", null)));
  }
};

export { Video as vm_video };
