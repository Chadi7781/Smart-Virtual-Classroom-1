import { r as registerInstance, h } from './index-d8f97135.js';
import './PlayerProps-2c57fcea.js';
import { w as withComponentRegistry, e as isString } from './withComponentRegistry-892f231d.js';
import { V as ViewType } from './ViewType-6da43616.js';
import './Provider-2e7e8366.js';
import { a as audioRegex } from './utils-7dc44688.js';
import { w as withProviderConnect } from './ProviderConnect-e344bf51.js';

const Audio = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /**
     * @internal Whether an external SDK will attach itself to the media player and control it.
     */
    this.willAttach = false;
    /** @inheritdoc */
    this.preload = 'metadata';
    withComponentRegistry(this);
    if (!this.willAttach)
      withProviderConnect(this);
  }
  /** @internal */
  async getAdapter() {
    const adapter = (await this.fileProvider?.getAdapter()) ?? {};
    adapter.canPlay = async (type) => isString(type) && audioRegex.test(type);
    return adapter;
  }
  render() {
    return (
    // @ts-ignore
    h("vm-file", { noConnect: true, willAttach: this.willAttach, crossOrigin: this.crossOrigin, preload: this.preload, disableRemotePlayback: this.disableRemotePlayback, mediaTitle: this.mediaTitle, viewType: ViewType.Audio, ref: (el) => {
        this.fileProvider = el;
      } }, h("slot", null)));
  }
};

export { Audio as vm_audio };
