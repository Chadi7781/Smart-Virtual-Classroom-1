{"ast":null,"code":"var _jsxFileName = \"C:\\\\Smart-Virtual-Classroom\\\\client\\\\src\\\\Components\\\\Task\\\\FormTask.js\",\n    _s = $RefreshSig$();\n\nimport moment from 'moment';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport SemanticDatepicker from 'react-semantic-ui-datepickers';\nimport { Button, Form, Message } from 'semantic-ui-react';\nimport { getTaskByTeacher, taskSlice, updateTask } from '../../redux/slices/Task';\nimport FileUploadEdit from '../../utlis/FileUploadEdit';\nimport * as Yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function FormTask(props) {\n  _s();\n\n  const [Images, setImages] = useState([]);\n  const [enableUpload, setEnableUpload] = useState(false);\n\n  const updateImages = newImages => {\n    if (newImages === null) {\n      props.task.listQuestion.forEach(element => {\n        setImages(element);\n      });\n    } else {\n      setImages(newImages);\n    }\n  };\n\n  const [taskEdit, setTaskEdit] = useState(props.task);\n  const dispatch = useDispatch();\n\n  const handleUpdate = e => {\n    e.preventDefault(); //  setTaskEdit(taskEdit.listQuestion = Images)\n\n    setEnableUpload(true);\n    console.log(Images);\n    console.log(taskEdit.listQuestion);\n    dispatch(updateTask(taskEdit)).then(() => {\n      dispatch(getTaskByTeacher({\n        \"idUser\": taskEdit.creator,\n        \"idClass\": taskEdit.cour\n      }));\n    });\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      Title: qes.Title,\n      Body: qes.Body,\n      Writerq: {\n        _id: \"\" + documentData._id\n      },\n      Filee: []\n    },\n    validationSchema: yupSchema,\n    onSubmit: async values => {\n      try {\n        if (Images.length !== 0) {\n          values.Filee = Images;\n          alert(\"images : here : \" + values.Filee);\n        } else {\n          values.Filee = qes.Filee;\n        }\n\n        const res = await AddquestionsApi.putQuestions(values, qes._id); //  dispatch(fetchQuestions(currentClass._id));\n\n        socket.emit(\"send_question\", \"message\");\n      } catch (error) {\n        alert(error);\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: handleUpdate,\n      children: [/*#__PURE__*/_jsxDEV(Form.Input, {\n        label: \"Titre\",\n        type: \"text\",\n        name: \"Titre\",\n        maxLength: \"40\",\n        required: true,\n        value: taskEdit.title,\n        onChange: e => setTaskEdit({ ...taskEdit,\n          title: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.TextArea, {\n        label: \"Description\",\n        type: \"TextArea\",\n        name: \"Description\",\n        maxLength: \"5000\",\n        required: true,\n        value: taskEdit.description,\n        onChange: e => setTaskEdit({ ...taskEdit,\n          description: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SemanticDatepicker, {\n        onChange: (e, data) => setTaskEdit({ ...taskEdit,\n          endDate: data.value\n        }),\n        format: \"YYYY-MM-DD\",\n        value: taskEdit.endDate | Date // value={taskEdit.endDate.format(\"YYYY-MM-DD\")}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 12\n      }, this), /*#__PURE__*/_jsxDEV(FileUploadEdit, {\n        refreshFunction: updateImages,\n        listfile: props.task.listQuestion,\n        Enbale: enableUpload\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 22\n      }, this), /*#__PURE__*/_jsxDEV(Message, {\n        success: true,\n        color: \"green\",\n        header: \"Nice one! \\uD83D\\uDCD2 \\uD83D\\uDCD5 \\uD83D\\uDCDA \\uD83D\\uDCD6\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Message, {\n        warning: true,\n        color: \"yellow\",\n        header: \"Woah! \\uD83D\\uDE31 \\uD83D\\uDE28\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        color: \"green\",\n        floated: \"right\",\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 14\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n}\n\n_s(FormTask, \"ODA2EyJ+MdeqNd47XvRdfDyhkw8=\", false, function () {\n  return [useDispatch, useFormik];\n});\n\n_c = FormTask;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormTask\");","map":{"version":3,"sources":["C:/Smart-Virtual-Classroom/client/src/Components/Task/FormTask.js"],"names":["moment","React","useEffect","useState","useDispatch","useSelector","SemanticDatepicker","Button","Form","Message","getTaskByTeacher","taskSlice","updateTask","FileUploadEdit","Yup","useFormik","FormTask","props","Images","setImages","enableUpload","setEnableUpload","updateImages","newImages","task","listQuestion","forEach","element","taskEdit","setTaskEdit","dispatch","handleUpdate","e","preventDefault","console","log","then","creator","cour","formik","initialValues","Title","qes","Body","Writerq","_id","documentData","Filee","validationSchema","yupSchema","onSubmit","values","length","alert","res","AddquestionsApi","putQuestions","socket","emit","error","title","target","value","description","data","endDate","Date"],"mappings":"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","sourcesContent":["import moment from 'moment';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport SemanticDatepicker from 'react-semantic-ui-datepickers';\r\nimport { Button, Form, Message } from 'semantic-ui-react';\r\nimport { getTaskByTeacher, taskSlice, updateTask } from '../../redux/slices/Task';\r\nimport FileUploadEdit from '../../utlis/FileUploadEdit';\r\nimport * as Yup from \"yup\";\r\nimport { useFormik } from \"formik\";\r\nexport default function FormTask(props) {\r\n\r\n  const [Images, setImages] = useState([]);\r\n  const [enableUpload, setEnableUpload] = useState(false);\r\n\r\n  const updateImages = (newImages) => {\r\n    if (newImages === null) {\r\n      props.task.listQuestion.forEach((element) => {\r\n        setImages(element);\r\n      });\r\n    } else {\r\n     \r\n     \r\n      setImages(newImages);\r\n    }\r\n  };\r\n    const [taskEdit , setTaskEdit] = useState(props.task);\r\n    \r\n\r\n    const  dispatch = useDispatch();\r\n   \r\n    const handleUpdate = (e) =>{\r\n        e.preventDefault();\r\n      //  setTaskEdit(taskEdit.listQuestion = Images)\r\n        setEnableUpload(true)\r\n       console.log(Images);\r\n        console.log(taskEdit.listQuestion);\r\n        dispatch(updateTask(taskEdit)).then(()=>{\r\n            dispatch(getTaskByTeacher({\"idUser\":taskEdit.creator,\"idClass\":taskEdit.cour}))\r\n        });\r\n    }\r\n    const formik = useFormik({\r\n      initialValues: {\r\n        Title: qes.Title,\r\n        Body: qes.Body,\r\n        Writerq: { _id: \"\"+documentData._id },\r\n        Filee: [],\r\n      },\r\n      validationSchema: yupSchema,\r\n  \r\n      onSubmit: async (values) => {\r\n        try {\r\n          \r\n          if(Images.length !==0 )\r\n         { values.Filee = Images;\r\n          alert(\"images : here : \"+values.Filee);\r\n        }\r\n        else{\r\n          values.Filee = qes.Filee;\r\n        }\r\n          const res = await AddquestionsApi.putQuestions(values, qes._id);\r\n        //  dispatch(fetchQuestions(currentClass._id));\r\n          socket.emit(\"send_question\", \"message\");\r\n        } catch (error) {\r\n          alert(error);\r\n        }\r\n      },\r\n    });\r\n    return (\r\n        <div>\r\n             <Form  onSubmit={handleUpdate}>\r\n        <Form.Input\r\n          label=\"Titre\"\r\n          type=\"text\"\r\n        \r\n          name=\"Titre\"\r\n          maxLength=\"40\"\r\n          \r\n          required\r\n          value={taskEdit.title}\r\n          onChange={(e) =>\r\n            setTaskEdit({ ...taskEdit, title: e.target.value })\r\n          }\r\n        />\r\n        <Form.TextArea\r\n          label=\"Description\"\r\n          type=\"TextArea\"\r\n       \r\n          name=\"Description\"\r\n          maxLength=\"5000\"\r\n          required\r\n          value={taskEdit.description}\r\n          onChange={(e) =>\r\n            setTaskEdit({ ...taskEdit, description: e.target.value })\r\n          }\r\n        />\r\n           <SemanticDatepicker\r\n                    onChange={(e, data) =>\r\n                        setTaskEdit({ ...taskEdit, endDate: data.value })\r\n                    }\r\n                    format={\"YYYY-MM-DD\"}\r\n                    value={taskEdit.endDate|Date}\r\n                   // value={taskEdit.endDate.format(\"YYYY-MM-DD\")}\r\n                  />\r\n                     <FileUploadEdit\r\n          refreshFunction={updateImages}\r\n            listfile={props.task.listQuestion}  \r\n            Enbale={enableUpload}\r\n          />\r\n        <Message\r\n          success\r\n          color=\"green\"\r\n          header=\"Nice one! 📒 📕 📚 📖\"\r\n            \r\n        />\r\n        <Message\r\n          warning\r\n          color=\"yellow\"\r\n          header=\"Woah! 😱 😨\"\r\n        \r\n        />\r\n        <Button color=\"green\" floated=\"right\">\r\n          Save\r\n        </Button>\r\n        <br /> {/* Yikes! Deal with Semantic UI React! */}\r\n      </Form>\r\n        </div>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}