{"ast":null,"code":"var _jsxFileName = \"C:\\\\Smart-Virtual-Classroom\\\\client\\\\src\\\\Components\\\\question\\\\AddPost.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Button, Form, Input, TextArea, Segment } from \"semantic-ui-react\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport * as Yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport { AddquestionsApi } from \"../../api/api\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { addQuestion } from \"../../redux/slices/questionslice\";\nimport FileUpload from \"../../utlis/FileUpload\";\nimport TagsInput from \"react-tagsinput\";\nimport \"react-tagsinput/react-tagsinput.css\";\nimport { useHistory } from \"react-router\";\nimport io from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ENDPOINT = \"https://closer-server.herokuapp.com/\";\n\nfunction AddPost() {\n  _s();\n\n  const history = useHistory();\n  const documentData = JSON.parse(localStorage.getItem(\"user\"));\n  const currentClass = JSON.parse(localStorage.getItem(\"idClass\"));\n  const [open, setOpen] = React.useState(false);\n  const [error] = useState({\n    visible: false,\n    message: \"\"\n  });\n  const dispatch = useDispatch();\n  const [Images, setImages] = useState([]);\n\n  const updateImages = newImages => {\n    setImages(newImages);\n  }; //inpput tags\n\n\n  const [tags, setTags] = useState([]);\n\n  const handleChange = tag => {\n    setTags(tag);\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      Title: \"\",\n      Body: \"\",\n      Writerq: {\n        _id: \"\"\n      },\n      Filee: [],\n      Hashtags: [],\n      Class: {\n        _id: \"\"\n      }\n    },\n    validationSchema: yupSchema,\n    onSubmit: async values => {\n      try {\n        // alert(\"images\"+Images)\n        values.Filee = Images;\n        values.Writerq._id = documentData._id;\n        values.Hashtags = tags;\n        values.Class = currentClass._id;\n        setEnableUpload(true);\n        const res = await AddquestionsApi.postQuestions(values);\n        dispatch(addQuestion(res));\n        const socket = io(ENDPOINT);\n        socket.emit(\"send_question\", \"message\");\n        setTags([]);\n        values.Title = \"\";\n        values.Body = \"\";\n        console.log(res);\n        history.push(\"/FAQ/\" + res._id);\n      } catch (error) {\n        alert(error);\n      }\n    }\n  });\n  const [enableUpload, setEnableUpload] = useState(false);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Segment, {\n      raised: true,\n      color: \"red\",\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: formik.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Form.Field, {\n          control: TextArea,\n          placeholder: \"whats your question?\",\n          label: \"Content\",\n          name: \"Body\",\n          onChange: formik.handleChange,\n          error: formik.errors.Body\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TagsInput, {\n          value: tags,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            float: \"right\",\n            marginRight: \"5%\"\n          },\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            style: {\n              maxHeight: \"40px\"\n            },\n            type: \"submit\",\n            content: \"Reply\",\n            icon: \"edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginLeft: \"5%\"\n            },\n            children: /*#__PURE__*/_jsxDEV(FileUpload, {\n              refreshFunction: updateImages,\n              listfile: null,\n              Enbale: enableUpload\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AddPost, \"7IHHK0bF1ZoVHb0Re6Bfgyzkfdw=\", false, function () {\n  return [useHistory, useDispatch, useFormik];\n});\n\n_c = AddPost;\nconst yupSchema = Yup.object({\n  Body: Yup.string().required(\"Champs requis!\")\n});\nexport default AddPost;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddPost\");","map":{"version":3,"sources":["C:/Smart-Virtual-Classroom/client/src/Components/question/AddPost.js"],"names":["React","Button","Form","Input","TextArea","Segment","Yup","useFormik","AddquestionsApi","useState","useDispatch","addQuestion","FileUpload","TagsInput","useHistory","io","ENDPOINT","AddPost","history","documentData","JSON","parse","localStorage","getItem","currentClass","open","setOpen","error","visible","message","dispatch","Images","setImages","updateImages","newImages","tags","setTags","handleChange","tag","formik","initialValues","Title","Body","Writerq","_id","Filee","Hashtags","Class","validationSchema","yupSchema","onSubmit","values","setEnableUpload","res","postQuestions","socket","emit","console","log","push","alert","enableUpload","handleSubmit","errors","float","marginRight","maxHeight","display","marginLeft","object","string","required"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Button, Form, Input, TextArea, Segment } from \"semantic-ui-react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport * as Yup from \"yup\";\r\nimport { useFormik } from \"formik\";\r\nimport { AddquestionsApi } from \"../../api/api\";\r\nimport { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addQuestion } from \"../../redux/slices/questionslice\";\r\nimport FileUpload from \"../../utlis/FileUpload\";\r\nimport TagsInput from \"react-tagsinput\";\r\nimport \"react-tagsinput/react-tagsinput.css\";\r\nimport { useHistory } from \"react-router\";\r\nimport io from \"socket.io-client\";\r\nconst ENDPOINT = \"https://closer-server.herokuapp.com/\";\r\nfunction AddPost() {\r\n  const history = useHistory();\r\n\r\n  const documentData = JSON.parse(localStorage.getItem(\"user\"));\r\n  const currentClass = JSON.parse(localStorage.getItem(\"idClass\"));\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n  const [error] = useState({ visible: false, message: \"\" });\r\n  const dispatch = useDispatch();\r\n  const [Images, setImages] = useState([]);\r\n  const updateImages = (newImages) => {\r\n\r\n    setImages(newImages);\r\n    \r\n   \r\n  };\r\n  //inpput tags\r\n  const [tags, setTags] = useState([]);\r\n  const handleChange = (tag) => {\r\n    setTags(tag);\r\n  };\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      Title: \"\",\r\n      Body: \"\",\r\n      Writerq: { _id: \"\" },\r\n      Filee: [],\r\n      Hashtags: [],\r\n      Class: { _id: \"\" },\r\n    },\r\n    validationSchema: yupSchema,\r\n\r\n    onSubmit: async (values) => {\r\n      try {\r\n        \r\n       // alert(\"images\"+Images)\r\n      \r\n        values.Filee = Images;\r\n        values.Writerq._id = documentData._id;\r\n        values.Hashtags = tags;\r\n        values.Class = currentClass._id;\r\n        setEnableUpload(true);\r\n        const res = await AddquestionsApi.postQuestions(values);\r\n        dispatch(addQuestion(res));\r\n        const socket = io(ENDPOINT);\r\n        socket.emit(\"send_question\", \"message\");\r\n        setTags([]);\r\n        values.Title = \"\";\r\n        values.Body = \"\";\r\n        console.log(res)\r\n      history.push(\"/FAQ/\"+res._id);\r\n      } catch (error) {\r\n        alert(error);\r\n      }\r\n    },\r\n  });\r\n  const [enableUpload, setEnableUpload] = useState(false);\r\n\r\n  return (\r\n    <div>\r\n      <Segment raised color=\"red\">\r\n      <Form onSubmit={formik.handleSubmit}>\r\n          \r\n          <Form.Field\r\n            control={TextArea}\r\n            placeholder=\"whats your question?\"\r\n            label=\"Content\"\r\n            name=\"Body\"\r\n            onChange={formik.handleChange}\r\n            error={formik.errors.Body}\r\n          />\r\n          <TagsInput value={tags} onChange={handleChange} />\r\n\r\n          <div style={{ float: \"right\", marginRight: \"5%\" }}>\r\n                  <Button\r\n                    style={{ maxHeight: \"40px\" }}\r\n                    type=\"submit\"\r\n                    content=\"Reply\"\r\n                    icon=\"edit\"\r\n                  />\r\n                </div>\r\n                <div style={{ display: \"flex\" }}>\r\n                  <div style={{ marginLeft: \"5%\" }}>\r\n                    <FileUpload\r\n                      refreshFunction={updateImages}\r\n                      listfile={null}\r\n                      Enbale={enableUpload}\r\n                    />\r\n                  </div>\r\n                </div>\r\n        </Form>\r\n      </Segment>\r\n    </div>\r\n  );\r\n}\r\nconst yupSchema = Yup.object({\r\n  Body: Yup.string().required(\"Champs requis!\"),\r\n});\r\nexport default AddPost;\r\n"]},"metadata":{},"sourceType":"module"}