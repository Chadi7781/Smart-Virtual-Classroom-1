{"ast":null,"code":"var _jsxFileName = \"C:\\\\Smart-Virtual-Classroom\\\\client\\\\src\\\\Components\\\\Task\\\\ModalAssignTask.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { assignTaskAfterSave } from '../../../../server/controllers/Task';\nimport { isAuth } from '../../helpers/auth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ModalAssignTask(props) {\n  _s();\n\n  const [modalOpen, SetModalOpen] = useState(false);\n  const currentClass = JSON.parse(localStorage.getItem(\"idClass\"));\n  const dispatch = useDispatch();\n  const taskDetail = {\n    \"idUser\": isAuth()._id,\n    \"idClass\": currentClass._id\n  };\n\n  const handleOpen = e => SetModalOpen(true);\n\n  const handleClose = e => SetModalOpen(false);\n\n  const handleSubmit = e => {\n    dispatch(assignTaskAfterSave(props.task)).then(() => {\n      dispatch(getTaskByTeacher(taskDetail));\n      handleClose();\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Modal, {\n      trigger: /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n        onClick: handleOpen,\n        icon: \"delete\",\n        text: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 5\n      }, this),\n      open: modalOpen,\n      onClose: handleClose,\n      dimmer: \"inverted\",\n      size: \"tiny\",\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        children: props.headerTitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Content, {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Are you sure you want to delete\", \" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: props.task.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 7\n          }, this), \"?\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Actions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleSubmit,\n          taskid: props.task._id,\n          color: \"red\",\n          children: \"Yes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleClose,\n          color: \"black\",\n          children: \"No\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n_s(ModalAssignTask, \"HaWjl4e0TRnfgRUF6UOWdAPGSKc=\", false, function () {\n  return [useDispatch];\n});\n\n_c = ModalAssignTask;\n\nvar _c;\n\n$RefreshReg$(_c, \"ModalAssignTask\");","map":{"version":3,"sources":["C:/Smart-Virtual-Classroom/client/src/Components/Task/ModalAssignTask.js"],"names":["React","useState","useDispatch","assignTaskAfterSave","isAuth","ModalAssignTask","props","modalOpen","SetModalOpen","currentClass","JSON","parse","localStorage","getItem","dispatch","taskDetail","_id","handleOpen","e","handleClose","handleSubmit","task","then","getTaskByTeacher","headerTitle","title"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,mBAAT,QAAoC,qCAApC;AACA,SAASC,MAAT,QAAuB,oBAAvB;;;AAEA,eAAe,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAAA;;AAE3C,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAMQ,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAX,CAArB;AACF,QAAMC,QAAQ,GAAGZ,WAAW,EAA5B;AACA,QAAMa,UAAU,GAAC;AACf,cAASX,MAAM,GAAGY,GADH;AAEf,eAAYP,YAAY,CAACO;AAFV,GAAjB;;AAME,QAAMC,UAAU,GAAIC,CAAD,IAAOV,YAAY,CAAC,IAAD,CAAtC;;AACA,QAAMW,WAAW,GAAID,CAAD,IAAOV,YAAY,CAAC,KAAD,CAAvC;;AAEA,QAAMY,YAAY,GAAIF,CAAD,IAAO;AAE1BJ,IAAAA,QAAQ,CAACX,mBAAmB,CAACG,KAAK,CAACe,IAAP,CAApB,CAAR,CAA0CC,IAA1C,CAA+C,MAAI;AAC/CR,MAAAA,QAAQ,CAACS,gBAAgB,CAACR,UAAD,CAAjB,CAAR;AACAI,MAAAA,WAAW;AACd,KAHD;AAQD,GAVD;;AAWA,sBACI;AAAA,2BACA,QAAC,KAAD;AACN,MAAA,OAAO,eACL,QAAC,QAAD,CAAU,IAAV;AAAe,QAAA,OAAO,EAAEF,UAAxB;AAAoC,QAAA,IAAI,EAAC,QAAzC;AAAkD,QAAA,IAAI,EAAC;AAAvD;AAAA;AAAA;AAAA;AAAA,cAFI;AAIN,MAAA,IAAI,EAAEV,SAJA;AAKN,MAAA,OAAO,EAAEY,WALH;AAMN,MAAA,MAAM,EAAC,UAND;AAON,MAAA,IAAI,EAAC,MAPC;AAAA,8BASN,QAAC,KAAD,CAAO,MAAP;AAAA,kBAAeb,KAAK,CAACkB;AAArB;AAAA;AAAA;AAAA;AAAA,cATM,eAUN,QAAC,KAAD,CAAO,OAAP;AAAA,+BACE;AAAA,wDACkC,GADlC,eAEE;AAAA,sBAASlB,KAAK,CAACe,IAAN,CAAWI;AAApB;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAVM,eAgBN,QAAC,KAAD,CAAO,OAAP;AAAA,gCACE,QAAC,MAAD;AACE,UAAA,OAAO,EAAEL,YADX;AAEE,UAAA,MAAM,EAAEd,KAAK,CAACe,IAAN,CAAWL,GAFrB;AAGE,UAAA,KAAK,EAAC,KAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAQE,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAEG,WAAjB;AAA8B,UAAA,KAAK,EAAC,OAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBARF;AAAA;AAAA;AAAA;AAAA;AAAA,cAhBM;AAAA;AAAA;AAAA;AAAA;AAAA;AADA,mBADJ;AAiCH;;GA1DuBd,e;UAILH,W;;;KAJKG,e","sourcesContent":["import React, { useState } from 'react'\r\nimport { useDispatch } from 'react-redux';\r\nimport { assignTaskAfterSave } from '../../../../server/controllers/Task';\r\nimport { isAuth } from '../../helpers/auth';\r\n\r\nexport default function ModalAssignTask(props) {\r\n\r\n    const [modalOpen, SetModalOpen] = useState(false);\r\n    const currentClass = JSON.parse(localStorage.getItem(\"idClass\"));\r\n  const dispatch = useDispatch();\r\n  const taskDetail={\r\n    \"idUser\":isAuth()._id,\r\n    \"idClass\" : currentClass._id,\r\n    \r\n  }\r\n  \r\n    const handleOpen = (e) => SetModalOpen(true);\r\n    const handleClose = (e) => SetModalOpen(false);\r\n  \r\n    const handleSubmit = (e) => {\r\n\r\n      dispatch(assignTaskAfterSave(props.task)).then(()=>{\r\n          dispatch(getTaskByTeacher(taskDetail));\r\n          handleClose();\r\n      });\r\n     \r\n      \r\n  \r\n    \r\n    };\r\n    return (\r\n        <>\r\n        <Modal\r\n  trigger={\r\n    <Dropdown.Item onClick={handleOpen} icon=\"delete\" text=\"Delete\" />\r\n  }\r\n  open={modalOpen}\r\n  onClose={handleClose}\r\n  dimmer=\"inverted\"\r\n  size=\"tiny\"\r\n>\r\n  <Modal.Header>{props.headerTitle}</Modal.Header>\r\n  <Modal.Content>\r\n    <p>\r\n      Are you sure you want to delete{\" \"}\r\n      <strong>{props.task.title}</strong>?\r\n    </p>\r\n  </Modal.Content>\r\n  <Modal.Actions>\r\n    <Button\r\n      onClick={handleSubmit}\r\n      taskid={props.task._id}\r\n      color=\"red\"\r\n    >\r\n      Yes\r\n    </Button>\r\n    <Button onClick={handleClose} color=\"black\">\r\n      No\r\n    </Button>\r\n  </Modal.Actions>\r\n</Modal>\r\n</>\r\n    )\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}