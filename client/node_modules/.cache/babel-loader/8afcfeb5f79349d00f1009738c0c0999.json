{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _javascriptTimeAgo = require('javascript-time-ago');\n\nvar _javascriptTimeAgo2 = _interopRequireDefault(_javascriptTimeAgo);\n\nvar _verboseDateFormatter = require('./helpers/verboseDateFormatter');\n\nvar _verboseDateFormatter2 = _interopRequireDefault(_verboseDateFormatter);\n\nvar _date = require('./helpers/date');\n\nvar _Updater = require('./Updater');\n\nvar _Updater2 = _interopRequireDefault(_Updater);\n\nvar _PropTypes = require('./PropTypes');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction ReactTimeAgo(_ref) {\n  var date = _ref.date,\n      future = _ref.future,\n      timeStyle = _ref.timeStyle,\n      round = _ref.round,\n      minTimeLeft = _ref.minTimeLeft,\n      tooltip = _ref.tooltip,\n      Component = _ref.component,\n      container = _ref.container,\n      wrapperComponent = _ref.wrapperComponent,\n      wrapperProps = _ref.wrapperProps,\n      locale = _ref.locale,\n      locales = _ref.locales,\n      formatVerboseDate = _ref.formatVerboseDate,\n      verboseDateFormat = _ref.verboseDateFormat,\n      updateInterval = _ref.updateInterval,\n      tick = _ref.tick,\n      rest = _objectWithoutProperties(_ref, ['date', 'future', 'timeStyle', 'round', 'minTimeLeft', 'tooltip', 'component', 'container', 'wrapperComponent', 'wrapperProps', 'locale', 'locales', 'formatVerboseDate', 'verboseDateFormat', 'updateInterval', 'tick']); // Get the list of preferred locales.\n\n\n  var preferredLocales = (0, _react.useMemo)(function () {\n    // Convert `locale` to `locales`.\n    if (locale) {\n      locales = [locale];\n    } // Add `javascript-time-ago` default locale.\n\n\n    return locales.concat(_javascriptTimeAgo2.default.getDefaultLocale());\n  }, [locale, locales]); // Create `javascript-time-ago` formatter instance.\n\n  var timeAgo = (0, _react.useMemo)(function () {\n    return new _javascriptTimeAgo2.default(preferredLocales);\n  }, [preferredLocales]); // The date or timestamp that was passed.\n  // Convert timestamp to `Date`.\n\n  date = (0, _react.useMemo)(function () {\n    return (0, _date.getDate)(date);\n  }, [date]); // Formats the `date`.\n\n  var formatDate = (0, _react.useCallback)(function () {\n    var now = Date.now();\n    var stopUpdates = void 0;\n\n    if (future) {\n      if (now >= date.getTime()) {\n        now = date.getTime();\n        stopUpdates = true;\n      }\n    }\n\n    if (minTimeLeft !== undefined) {\n      var maxNow = date.getTime() - minTimeLeft * 1000;\n\n      if (now > maxNow) {\n        now = maxNow;\n        stopUpdates = true;\n      }\n    }\n\n    var _timeAgo$format = timeAgo.format(date, timeStyle, {\n      getTimeToNextUpdate: true,\n      now: now,\n      future: future,\n      round: round\n    }),\n        _timeAgo$format2 = _slicedToArray(_timeAgo$format, 2),\n        formattedDate = _timeAgo$format2[0],\n        timeToNextUpdate = _timeAgo$format2[1];\n\n    if (stopUpdates) {\n      timeToNextUpdate = INFINITY;\n    } else {\n      // Legacy compatibility: there used to be an `updateInterval` property.\n      // That was before `getTimeToNextUpdate` feature was introduced in `javascript-time-ago`.\n      // A default interval of one minute is introduced because\n      // `getTimeToNextUpdate` feature may theoretically return `undefined`.\n      timeToNextUpdate = updateInterval || timeToNextUpdate || 60 * 1000; // A minute by default.\n    }\n\n    return [formattedDate, now + timeToNextUpdate];\n  }, [date, future, timeStyle, updateInterval, round, minTimeLeft, timeAgo]);\n  var formatDateRef = (0, _react.useRef)();\n  formatDateRef.current = formatDate;\n\n  var _useMemo = (0, _react.useMemo)(formatDate, []),\n      _useMemo2 = _slicedToArray(_useMemo, 2),\n      _formattedDate = _useMemo2[0],\n      _nextUpdateTime = _useMemo2[1];\n\n  var _useState = (0, _react.useState)(_formattedDate),\n      _useState2 = _slicedToArray(_useState, 2),\n      formattedDate = _useState2[0],\n      setFormattedDate = _useState2[1]; // The component sets the \"verbose date\" tooltip after the component \n  // has mounted rather than on the first render. \n  // The reason is that otherwise React would complain that \n  // server-side-rendered markup doesn't match client-side-rendered one.\n\n\n  var _useState3 = (0, _react.useState)(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      shouldSetTooltipText = _useState4[0],\n      setShouldSetTooltipText = _useState4[1];\n\n  var updater = (0, _react.useRef)();\n  (0, _react.useEffect)(function () {\n    if (tick) {\n      updater.current = _Updater2.default.add({\n        getNextValue: function getNextValue() {\n          return formatDateRef.current();\n        },\n        setValue: setFormattedDate,\n        nextUpdateTime: _nextUpdateTime\n      });\n      return function () {\n        return updater.current.stop();\n      };\n    }\n  }, [tick]);\n  (0, _react.useEffect)(function () {\n    if (updater.current) {\n      updater.current.forceUpdate();\n    } else {\n      var _formatDate = formatDate(),\n          _formatDate2 = _slicedToArray(_formatDate, 1),\n          _formattedDate2 = _formatDate2[0];\n\n      setFormattedDate(_formattedDate2);\n    }\n  }, [formatDate]);\n  (0, _react.useEffect)(function () {\n    setShouldSetTooltipText(true);\n  }, []); // Create verbose date formatter for the tooltip text.\n  // (only on client side, because tooltips aren't rendered \n  //  until triggered by user interaction)\n\n  var verboseDateFormatter = (0, _react.useMemo)(function () {\n    if (typeof window !== 'undefined') {\n      return (0, _verboseDateFormatter2.default)(preferredLocales, verboseDateFormat);\n    }\n  }, [preferredLocales, verboseDateFormat]); // Format verbose date for the tooltip.\n  // (only on client side, because tooltips aren't rendered \n  //  until triggered by user interaction)\n\n  var verboseDate = (0, _react.useMemo)(function () {\n    if (typeof window !== 'undefined') {\n      if (formatVerboseDate) {\n        return formatVerboseDate(date);\n      }\n\n      return verboseDateFormatter(date);\n    }\n  }, [date, formatVerboseDate, verboseDateFormatter]);\n\n  var result = _react2.default.createElement(Component, _extends({\n    date: date,\n    verboseDate: shouldSetTooltipText ? verboseDate : undefined,\n    tooltip: tooltip\n  }, rest), formattedDate);\n\n  var WrapperComponent = wrapperComponent || container;\n\n  if (WrapperComponent) {\n    return _react2.default.createElement(WrapperComponent, _extends({}, wrapperProps, {\n      verboseDate: shouldSetTooltipText ? verboseDate : undefined\n    }), result);\n  }\n\n  return result;\n}\n\nReactTimeAgo.propTypes = {\n  // The `date` or `timestamp`.\n  // E.g. `new Date()` or `1355972400000`.\n  date: _propTypes2.default.oneOfType([_propTypes2.default.instanceOf(Date), _propTypes2.default.number]).isRequired,\n  // Preferred locale.\n  // Is 'en' by default.\n  // E.g. 'ru-RU'.\n  locale: _propTypes2.default.string,\n  // Alternatively to `locale`, one could pass `locales`:\n  // A list of preferred locales (ordered).\n  // Will choose the first supported locale from the list.\n  // E.g. `['ru-RU', 'en-GB']`.\n  locales: _propTypes2.default.arrayOf(_propTypes2.default.string),\n  // If set to `true`, then will stop at \"zero point\"\n  // when going from future dates to past dates.\n  // In other words, even if the `date` has passed,\n  // it will still render as if `date` is `now`.\n  future: _propTypes2.default.bool,\n  // Date/time formatting style.\n  // See `javascript-time-ago` docs on \"Styles\" for more info.\n  // E.g. 'round', 'round-minute', 'twitter', 'twitter-first-minute'.\n  timeStyle: _PropTypes.style,\n  // `round` parameter of `javascript-time-ago`.\n  // See `javascript-time-ago` docs on \"Rounding\" for more info.\n  // Examples: \"round\", \"floor\".\n  round: _propTypes2.default.string,\n  // If specified, the time won't \"tick\" past this threshold (in seconds).\n  // For example, if `minTimeLeft` is `60 * 60`\n  // then the time won't \"tick\" past \"in 1 hour\".\n  minTimeLeft: _propTypes2.default.number,\n  // A React component to render the relative time label.\n  // Receives properties:\n  // * date: Date â The date.\n  // * verboseDate: string? â Formatted verbose date. Is always present on client, is always `undefined` on server (because tooltips aren't shown on server).\n  // * tooltip: boolean â The `tooltip` property of `<ReactTimeAgo/>` component.\n  // * children: string â The relative time label.\n  // * All \"unknown\" properties that have been passed to `<ReactTimeAgo/>` are passed through to this component.\n  component: _propTypes2.default.elementType.isRequired,\n  // Whether to use HTML `tooltip` attribute to show a verbose date tooltip.\n  // Is `true` by default.\n  // Can be set to `false` to disable the native HTML `tooltip`.\n  tooltip: _propTypes2.default.bool.isRequired,\n  // Verbose date formatter.\n  // By default it's `(date) => new Intl.DateTimeFormat(locale, {â¦}).format(date)`.\n  formatVerboseDate: _propTypes2.default.func,\n  // `Intl.DateTimeFormat` format for formatting verbose date.\n  // See `Intl.DateTimeFormat` docs for more info.\n  verboseDateFormat: _propTypes2.default.object,\n  // (deprecated)\n  // How often the component refreshes itself.\n  // Instead, consider using `getNextTimeToUpdate()` feature\n  // of `javascript-time-ago` styles.\n  updateInterval: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.arrayOf(_propTypes2.default.shape({\n    threshold: _propTypes2.default.number,\n    interval: _propTypes2.default.number.isRequired\n  }))]),\n  // (deprecated).\n  // Set to `false` to disable automatic refresh of the component.\n  // Is `true` by default.\n  // I guess no one actually turns that off.\n  tick: _propTypes2.default.bool,\n  // (advanced)\n  // A React Component to wrap the resulting `<time/>` React Element.\n  // Receives `verboseDate` and `children` properties.\n  // Also receives `wrapperProps`, if they're passed.\n  // `verboseDate` can be used for displaying verbose date label\n  // in an \"on mouse over\" (or \"on touch\") tooltip.\n  // See the \"Tooltip\" readme section for more info.\n  // Another example could be having `wrapperComponent`\n  // being rerendered every time the component refreshes itself.\n  wrapperComponent: _propTypes2.default.func,\n  // Custom `props` passed to `wrapperComponent`.\n  wrapperProps: _propTypes2.default.object\n};\nReactTimeAgo.defaultProps = {\n  // No preferred locales.\n  locales: [],\n  // Use a `<time/>` tag by default.\n  component: Time,\n  // Use HTML `tooltip` attribute to show a verbose date tooltip.\n  tooltip: true,\n  // `Intl.DateTimeFormat` for verbose date.\n  // Example: \"Thursday, December 20, 2012, 7:00:00 AM GMT+4\"\n  verboseDateFormat: {\n    weekday: 'long',\n    day: 'numeric',\n    month: 'long',\n    year: 'numeric',\n    hour: 'numeric',\n    minute: '2-digit',\n    second: '2-digit' // timeZoneName: 'short'\n\n  },\n  // Automatically refreshes itself.\n  tick: true // The component schedules a next refresh every time it renders.\n  // There's no need to rerender this component unless its props change.\n\n};\nReactTimeAgo = _react2.default.memo(ReactTimeAgo);\nexports.default = ReactTimeAgo; // `setTimeout()` has a bug where it fires immediately\n// when the interval is longer than about `24.85` days.\n// https://stackoverflow.com/questions/3468607/why-does-settimeout-break-for-large-millisecond-delay-values\n\nvar SET_TIMEOUT_MAX_SAFE_INTERVAL = 2147483647;\n\nfunction getSafeTimeoutInterval(interval) {\n  return Math.min(interval, SET_TIMEOUT_MAX_SAFE_INTERVAL);\n} // A thousand years is practically a metaphor for \"infinity\".\n\n\nvar YEAR = 365 * 24 * 60 * 60 * 1000;\nvar INFINITY = 1000 * YEAR;\n\nfunction Time(_ref2) {\n  var date = _ref2.date,\n      verboseDate = _ref2.verboseDate,\n      tooltip = _ref2.tooltip,\n      children = _ref2.children,\n      rest = _objectWithoutProperties(_ref2, ['date', 'verboseDate', 'tooltip', 'children']);\n\n  var isoString = (0, _react.useMemo)(function () {\n    return date.toISOString();\n  }, [date]);\n  return _react2.default.createElement('time', _extends({}, rest, {\n    dateTime: isoString,\n    title: tooltip ? verboseDate : undefined\n  }), children);\n}\n\nTime.propTypes = {\n  date: _propTypes2.default.instanceOf(Date).isRequired,\n  verboseDate: _propTypes2.default.string,\n  tooltip: _propTypes2.default.bool.isRequired,\n  children: _propTypes2.default.string.isRequired\n};","map":{"version":3,"sources":["../source/ReactTimeAgo.js"],"names":["date","future","timeStyle","round","minTimeLeft","tooltip","component","Component","container","wrapperComponent","wrapperProps","locale","locales","formatVerboseDate","verboseDateFormat","updateInterval","tick","rest","preferredLocales","timeAgo","formatDate","now","Date","stopUpdates","maxNow","formattedDate","timeToNextUpdate","getTimeToNextUpdate","formatDateRef","_formattedDate","_nextUpdateTime","setFormattedDate","shouldSetTooltipText","setShouldSetTooltipText","updater","getNextValue","setValue","nextUpdateTime","verboseDateFormatter","verboseDate","result","WrapperComponent","ReactTimeAgo","threshold","interval","isRequired","object","weekday","day","month","year","hour","minute","second","SET_TIMEOUT_MAX_SAFE_INTERVAL","Math","YEAR","INFINITY","children","isoString","Time"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef, useCallback, useMemo } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport TimeAgo from 'javascript-time-ago'\r\n\r\nimport createVerboseDateFormatter from './helpers/verboseDateFormatter'\r\nimport { getDate } from './helpers/date'\r\nimport Updater from './Updater'\r\n\r\nimport { style as styleType } from './PropTypes'\r\n\r\nfunction ReactTimeAgo({\r\n\tdate,\r\n\tfuture,\r\n\ttimeStyle,\r\n\tround,\r\n\tminTimeLeft,\r\n\ttooltip,\r\n\tcomponent: Component,\r\n\t// `container` property name is deprecated, \r\n\t// use `wrapperComponent` property name instead.\r\n\tcontainer,\r\n\twrapperComponent,\r\n\twrapperProps,\r\n\tlocale,\r\n\tlocales,\r\n\tformatVerboseDate,\r\n\tverboseDateFormat,\r\n\tupdateInterval,\r\n\ttick,\r\n\t...rest\r\n}) {\r\n\t// Get the list of preferred locales.\r\n\tconst preferredLocales = useMemo(() => {\r\n\t\t// Convert `locale` to `locales`.\r\n\t\tif (locale) {\r\n\t\t\tlocales = [locale]\r\n\t\t}\r\n\t\t// Add `javascript-time-ago` default locale.\r\n\t\treturn locales.concat(TimeAgo.getDefaultLocale())\r\n\t}, [\r\n\t\tlocale,\r\n\t\tlocales\r\n\t])\r\n\r\n\t// Create `javascript-time-ago` formatter instance.\r\n\tconst timeAgo = useMemo(() => new TimeAgo(preferredLocales), [preferredLocales])\r\n\r\n\t// The date or timestamp that was passed.\r\n\t// Convert timestamp to `Date`.\r\n\tdate = useMemo(() => getDate(date), [date])\r\n\r\n\t// Formats the `date`.\r\n\tconst formatDate = useCallback(() => {\r\n\t\tlet now = Date.now()\r\n\t\tlet stopUpdates\r\n\t\tif (future) {\r\n\t\t\tif (now >= date.getTime()) {\r\n\t\t\t\tnow = date.getTime()\r\n\t\t\t\tstopUpdates = true\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (minTimeLeft !== undefined) {\r\n\t\t\tconst maxNow = date.getTime() - minTimeLeft * 1000\r\n\t\t\tif (now > maxNow) {\r\n\t\t\t\tnow = maxNow\r\n\t\t\t\tstopUpdates = true\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet [formattedDate, timeToNextUpdate] = timeAgo.format(date, timeStyle, {\r\n\t\t\tgetTimeToNextUpdate: true,\r\n\t\t\tnow,\r\n\t\t\tfuture,\r\n\t\t\tround\r\n\t\t})\r\n\t\tif (stopUpdates) {\r\n\t\t\ttimeToNextUpdate = INFINITY\r\n\t\t} else {\r\n\t\t\t// Legacy compatibility: there used to be an `updateInterval` property.\r\n\t\t\t// That was before `getTimeToNextUpdate` feature was introduced in `javascript-time-ago`.\r\n\t\t\t// A default interval of one minute is introduced because\r\n\t\t\t// `getTimeToNextUpdate` feature may theoretically return `undefined`.\r\n\t\t\ttimeToNextUpdate = updateInterval || timeToNextUpdate || 60 * 1000 // A minute by default.\r\n\t\t}\r\n\t\treturn [formattedDate, now + timeToNextUpdate]\r\n\t}, [\r\n\t\tdate,\r\n\t\tfuture,\r\n\t\ttimeStyle,\r\n\t\tupdateInterval,\r\n\t\tround,\r\n\t\tminTimeLeft,\r\n\t\ttimeAgo\r\n\t])\r\n\r\n\tconst formatDateRef = useRef()\r\n\tformatDateRef.current = formatDate\r\n\r\n\tconst [_formattedDate, _nextUpdateTime] = useMemo(formatDate, [])\r\n\tconst [formattedDate, setFormattedDate] = useState(_formattedDate)\r\n\r\n\t// The component sets the \"verbose date\" tooltip after the component \r\n\t// has mounted rather than on the first render. \r\n\t// The reason is that otherwise React would complain that \r\n\t// server-side-rendered markup doesn't match client-side-rendered one.\r\n\tconst [shouldSetTooltipText, setShouldSetTooltipText] = useState()\r\n\r\n\tconst updater = useRef()\r\n\r\n\tuseEffect(() => {\r\n\t\tif (tick) {\r\n\t\t\tupdater.current = Updater.add({\r\n\t\t\t\tgetNextValue: () => formatDateRef.current(),\r\n\t\t\t\tsetValue: setFormattedDate,\r\n\t\t\t\tnextUpdateTime: _nextUpdateTime\r\n\t\t\t})\r\n\t\t\treturn () => updater.current.stop()\r\n\t\t}\r\n\t}, [tick])\r\n\r\n\tuseEffect(() => {\r\n\t\tif (updater.current) {\r\n\t\t\tupdater.current.forceUpdate()\r\n\t\t} else {\r\n\t\t\tconst [formattedDate] = formatDate()\r\n\t\t\tsetFormattedDate(formattedDate)\r\n\t\t}\r\n\t}, [formatDate])\r\n\r\n\tuseEffect(() => {\r\n\t\tsetShouldSetTooltipText(true)\r\n\t}, [])\r\n\r\n\t// Create verbose date formatter for the tooltip text.\r\n\t// (only on client side, because tooltips aren't rendered \r\n\t//  until triggered by user interaction)\r\n\tconst verboseDateFormatter = useMemo(() => {\r\n\t\tif (typeof window !== 'undefined') {\r\n\t\t\treturn createVerboseDateFormatter(preferredLocales, verboseDateFormat)\r\n\t\t}\r\n\t}, [\r\n\t\tpreferredLocales,\r\n\t\tverboseDateFormat\r\n\t])\r\n\r\n\t// Format verbose date for the tooltip.\r\n\t// (only on client side, because tooltips aren't rendered \r\n\t//  until triggered by user interaction)\r\n\tconst verboseDate = useMemo(() => {\r\n\t\tif (typeof window !== 'undefined') {\r\n\t\t\tif (formatVerboseDate) {\r\n\t\t\t\treturn formatVerboseDate(date)\r\n\t\t\t}\r\n\t\t\treturn verboseDateFormatter(date)\r\n\t\t}\r\n\t}, [\r\n\t\tdate,\r\n\t\tformatVerboseDate,\r\n\t\tverboseDateFormatter\r\n\t])\r\n\r\n\tconst result = (\r\n\t\t<Component\r\n\t\t\tdate={date}\r\n\t\t\tverboseDate={shouldSetTooltipText ? verboseDate : undefined}\r\n\t\t\ttooltip={tooltip}\r\n\t\t\t{...rest}>\r\n\t\t\t{formattedDate}\r\n\t\t</Component>\r\n\t)\r\n\r\n\tconst WrapperComponent = wrapperComponent || container\r\n\r\n\tif (WrapperComponent) {\r\n\t\treturn (\r\n\t\t\t<WrapperComponent\r\n\t\t\t\t{...wrapperProps}\r\n\t\t\t\tverboseDate={shouldSetTooltipText ? verboseDate : undefined}>\r\n\t\t\t\t{result}\r\n\t\t\t</WrapperComponent>\r\n\t\t)\r\n\t}\r\n\r\n\treturn result\r\n}\r\n\r\nReactTimeAgo.propTypes = {\r\n\t// The `date` or `timestamp`.\r\n\t// E.g. `new Date()` or `1355972400000`.\r\n\tdate: PropTypes.oneOfType([\r\n\t\tPropTypes.instanceOf(Date),\r\n\t\tPropTypes.number\r\n\t]).isRequired,\r\n\r\n\t// Preferred locale.\r\n\t// Is 'en' by default.\r\n\t// E.g. 'ru-RU'.\r\n\tlocale: PropTypes.string,\r\n\r\n\t// Alternatively to `locale`, one could pass `locales`:\r\n\t// A list of preferred locales (ordered).\r\n\t// Will choose the first supported locale from the list.\r\n\t// E.g. `['ru-RU', 'en-GB']`.\r\n\tlocales: PropTypes.arrayOf(PropTypes.string),\r\n\r\n\t// If set to `true`, then will stop at \"zero point\"\r\n\t// when going from future dates to past dates.\r\n\t// In other words, even if the `date` has passed,\r\n\t// it will still render as if `date` is `now`.\r\n\tfuture: PropTypes.bool,\r\n\r\n\t// Date/time formatting style.\r\n\t// See `javascript-time-ago` docs on \"Styles\" for more info.\r\n\t// E.g. 'round', 'round-minute', 'twitter', 'twitter-first-minute'.\r\n\ttimeStyle: styleType,\r\n\r\n\t// `round` parameter of `javascript-time-ago`.\r\n\t// See `javascript-time-ago` docs on \"Rounding\" for more info.\r\n\t// Examples: \"round\", \"floor\".\r\n\tround: PropTypes.string,\r\n\r\n\t// If specified, the time won't \"tick\" past this threshold (in seconds).\r\n\t// For example, if `minTimeLeft` is `60 * 60`\r\n\t// then the time won't \"tick\" past \"in 1 hour\".\r\n\tminTimeLeft: PropTypes.number,\r\n\r\n\t// A React component to render the relative time label.\r\n\t// Receives properties:\r\n\t// * date: Date â The date.\r\n\t// * verboseDate: string? â Formatted verbose date. Is always present on client, is always `undefined` on server (because tooltips aren't shown on server).\r\n\t// * tooltip: boolean â The `tooltip` property of `<ReactTimeAgo/>` component.\r\n\t// * children: string â The relative time label.\r\n\t// * All \"unknown\" properties that have been passed to `<ReactTimeAgo/>` are passed through to this component.\r\n\tcomponent: PropTypes.elementType.isRequired,\r\n\r\n\t// Whether to use HTML `tooltip` attribute to show a verbose date tooltip.\r\n\t// Is `true` by default.\r\n\t// Can be set to `false` to disable the native HTML `tooltip`.\r\n\ttooltip: PropTypes.bool.isRequired,\r\n\r\n\t// Verbose date formatter.\r\n\t// By default it's `(date) => new Intl.DateTimeFormat(locale, {â¦}).format(date)`.\r\n\tformatVerboseDate: PropTypes.func,\r\n\r\n\t// `Intl.DateTimeFormat` format for formatting verbose date.\r\n\t// See `Intl.DateTimeFormat` docs for more info.\r\n\tverboseDateFormat: PropTypes.object,\r\n\r\n\t// (deprecated)\r\n\t// How often the component refreshes itself.\r\n\t// Instead, consider using `getNextTimeToUpdate()` feature\r\n\t// of `javascript-time-ago` styles.\r\n\tupdateInterval: PropTypes.oneOfType([\r\n\t\tPropTypes.number,\r\n\t\tPropTypes.arrayOf(PropTypes.shape({\r\n\t\t\tthreshold: PropTypes.number,\r\n\t\t\tinterval: PropTypes.number.isRequired\r\n\t\t}))\r\n\t]),\r\n\r\n\t// (deprecated).\r\n\t// Set to `false` to disable automatic refresh of the component.\r\n\t// Is `true` by default.\r\n\t// I guess no one actually turns that off.\r\n\ttick: PropTypes.bool,\r\n\r\n\t// (advanced)\r\n\t// A React Component to wrap the resulting `<time/>` React Element.\r\n\t// Receives `verboseDate` and `children` properties.\r\n\t// Also receives `wrapperProps`, if they're passed.\r\n\t// `verboseDate` can be used for displaying verbose date label\r\n\t// in an \"on mouse over\" (or \"on touch\") tooltip.\r\n\t// See the \"Tooltip\" readme section for more info.\r\n\t// Another example could be having `wrapperComponent`\r\n\t// being rerendered every time the component refreshes itself.\r\n\twrapperComponent: PropTypes.func,\r\n\r\n\t// Custom `props` passed to `wrapperComponent`.\r\n\twrapperProps: PropTypes.object\r\n}\r\n\r\nReactTimeAgo.defaultProps = {\r\n\t// No preferred locales.\r\n\tlocales: [],\r\n\r\n\t// Use a `<time/>` tag by default.\r\n\tcomponent: Time,\r\n\r\n\t// Use HTML `tooltip` attribute to show a verbose date tooltip.\r\n\ttooltip: true,\r\n\r\n\t// `Intl.DateTimeFormat` for verbose date.\r\n\t// Example: \"Thursday, December 20, 2012, 7:00:00 AM GMT+4\"\r\n\tverboseDateFormat: {\r\n\t\tweekday: 'long',\r\n\t\tday: 'numeric',\r\n\t\tmonth: 'long',\r\n\t\tyear: 'numeric',\r\n\t\thour: 'numeric',\r\n\t\tminute: '2-digit',\r\n\t\tsecond: '2-digit',\r\n\t\t// timeZoneName: 'short'\r\n\t},\r\n\r\n\t// Automatically refreshes itself.\r\n\ttick: true\r\n}\r\n\r\n// The component schedules a next refresh every time it renders.\r\n// There's no need to rerender this component unless its props change.\r\nReactTimeAgo = React.memo(ReactTimeAgo)\r\n\r\nexport default ReactTimeAgo\r\n\r\n// `setTimeout()` has a bug where it fires immediately\r\n// when the interval is longer than about `24.85` days.\r\n// https://stackoverflow.com/questions/3468607/why-does-settimeout-break-for-large-millisecond-delay-values\r\nconst SET_TIMEOUT_MAX_SAFE_INTERVAL = 2147483647\r\nfunction getSafeTimeoutInterval(interval) {\r\n  return Math.min(interval, SET_TIMEOUT_MAX_SAFE_INTERVAL)\r\n}\r\n\r\n// A thousand years is practically a metaphor for \"infinity\".\r\nconst YEAR = 365 * 24 * 60 * 60 * 1000\r\nconst INFINITY = 1000 * YEAR\r\n\r\nfunction Time({\r\n\tdate,\r\n\tverboseDate,\r\n\ttooltip,\r\n\tchildren,\r\n\t...rest\r\n}) {\r\n\tconst isoString = useMemo(() => date.toISOString(), [date])\r\n\treturn (\r\n\t\t<time\r\n\t\t\t{...rest}\r\n\t\t\tdateTime={isoString}\r\n\t\t\ttitle={tooltip ? verboseDate : undefined}>\r\n\t\t\t{children}\r\n\t\t</time>\r\n\t)\r\n}\r\n\r\nTime.propTypes = {\r\n\tdate: PropTypes.instanceOf(Date).isRequired,\r\n\tverboseDate: PropTypes.string,\r\n\ttooltip: PropTypes.bool.isRequired,\r\n\tchildren: PropTypes.string.isRequired\r\n}"]},"metadata":{},"sourceType":"script"}