{"ast":null,"code":"var _jsxFileName = \"C:\\\\Smart-Virtual-Classroom\\\\client\\\\src\\\\Components\\\\Task\\\\FormTask.js\",\n    _s = $RefreshSig$();\n\nimport moment from 'moment';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport SemanticDatepicker from 'react-semantic-ui-datepickers';\nimport { Button, Form, Message } from 'semantic-ui-react';\nimport { getTaskByTeacher, taskSlice, updateTask } from '../../redux/slices/Task';\nimport FileUploadEdit from '../../utlis/FileUploadEdit';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function FormTask(props) {\n  _s();\n\n  const [Images, setImages] = useState([]);\n\n  const updateImages = newImages => {\n    if (newImages === null) {\n      props.task.listQuestion.forEach(element => {\n        setImages(element);\n      });\n    } else {\n      setImages(newImages);\n    }\n  };\n\n  const [taskEdit, setTaskEdit] = useState(props.task);\n  const dispatch = useDispatch();\n\n  const handleUpdate = e => {\n    e.preventDefault();\n    setTaskEdit(taskEdit.listQuestion = Images);\n    dispatch(updateTask(taskEdit)).then(() => {\n      dispatch(getTaskByTeacher({\n        \"idUser\": taskEdit.creator,\n        \"idClass\": taskEdit.cour\n      }));\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: handleUpdate,\n      children: [/*#__PURE__*/_jsxDEV(Form.Input, {\n        label: \"Titre\",\n        type: \"text\",\n        name: \"Titre\",\n        maxLength: \"40\",\n        required: true,\n        value: taskEdit.title,\n        onChange: e => setTaskEdit({ ...taskEdit,\n          title: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.TextArea, {\n        label: \"Description\",\n        type: \"TextArea\",\n        name: \"Description\",\n        maxLength: \"5000\",\n        required: true,\n        value: taskEdit.description,\n        onChange: e => setTaskEdit({ ...taskEdit,\n          description: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SemanticDatepicker, {\n        onChange: (e, data) => setTaskEdit({ ...taskEdit,\n          endDate: data.value\n        }),\n        format: \"YYYY-MM-DD\",\n        value: taskEdit.endDate | Date // value={taskEdit.endDate.format(\"YYYY-MM-DD\")}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 12\n      }, this), /*#__PURE__*/_jsxDEV(FileUploadEdit, {\n        refreshFunction: updateImages,\n        listfile: taskEdit.listQuestion\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 22\n      }, this), /*#__PURE__*/_jsxDEV(Message, {\n        success: true,\n        color: \"green\",\n        header: \"Nice one! \\uD83D\\uDCD2 \\uD83D\\uDCD5 \\uD83D\\uDCDA \\uD83D\\uDCD6\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Message, {\n        warning: true,\n        color: \"yellow\",\n        header: \"Woah! \\uD83D\\uDE31 \\uD83D\\uDE28\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        color: \"green\",\n        floated: \"right\",\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 14\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n}\n\n_s(FormTask, \"rIzMCxiRTFgwLBvhq77WtX32vSg=\", false, function () {\n  return [useDispatch];\n});\n\n_c = FormTask;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormTask\");","map":{"version":3,"sources":["C:/Smart-Virtual-Classroom/client/src/Components/Task/FormTask.js"],"names":["moment","React","useEffect","useState","useDispatch","useSelector","SemanticDatepicker","Button","Form","Message","getTaskByTeacher","taskSlice","updateTask","FileUploadEdit","FormTask","props","Images","setImages","updateImages","newImages","task","listQuestion","forEach","element","taskEdit","setTaskEdit","dispatch","handleUpdate","e","preventDefault","then","creator","cour","title","target","value","description","data","endDate","Date"],"mappings":"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","sourcesContent":["import moment from 'moment';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport SemanticDatepicker from 'react-semantic-ui-datepickers';\r\nimport { Button, Form, Message } from 'semantic-ui-react';\r\nimport { getTaskByTeacher, taskSlice, updateTask } from '../../redux/slices/Task';\r\nimport FileUploadEdit from '../../utlis/FileUploadEdit';\r\n\r\nexport default function FormTask(props) {\r\n\r\n  const [Images, setImages] = useState([]);\r\n\r\n\r\n  const updateImages = (newImages) => {\r\n    if (newImages === null) {\r\n      props.task.listQuestion.forEach((element) => {\r\n        setImages(element);\r\n      });\r\n    } else {\r\n     \r\n     \r\n      setImages(newImages);\r\n    }\r\n  };\r\n    const [taskEdit , setTaskEdit] = useState(props.task)\r\n    const  dispatch = useDispatch();\r\n   \r\n    const handleUpdate = (e) =>{\r\n        e.preventDefault();\r\n   \r\n         setTaskEdit(taskEdit.listQuestion = Images);\r\n        dispatch(updateTask(taskEdit)).then(()=>{\r\n            dispatch(getTaskByTeacher({\"idUser\":taskEdit.creator,\"idClass\":taskEdit.cour}))\r\n        });\r\n    }\r\n   \r\n    return (\r\n        <div>\r\n             <Form  onSubmit={handleUpdate}>\r\n        <Form.Input\r\n          label=\"Titre\"\r\n          type=\"text\"\r\n        \r\n          name=\"Titre\"\r\n          maxLength=\"40\"\r\n          \r\n          required\r\n          value={taskEdit.title}\r\n          onChange={(e) =>\r\n            setTaskEdit({ ...taskEdit, title: e.target.value })\r\n          }\r\n        />\r\n        <Form.TextArea\r\n          label=\"Description\"\r\n          type=\"TextArea\"\r\n       \r\n          name=\"Description\"\r\n          maxLength=\"5000\"\r\n          required\r\n          value={taskEdit.description}\r\n          onChange={(e) =>\r\n            setTaskEdit({ ...taskEdit, description: e.target.value })\r\n          }\r\n        />\r\n           <SemanticDatepicker\r\n                    onChange={(e, data) =>\r\n                        setTaskEdit({ ...taskEdit, endDate: data.value })\r\n                    }\r\n                    format={\"YYYY-MM-DD\"}\r\n                    value={taskEdit.endDate|Date}\r\n                   // value={taskEdit.endDate.format(\"YYYY-MM-DD\")}\r\n                  />\r\n                     <FileUploadEdit\r\n          refreshFunction={updateImages}\r\n            listfile={taskEdit.listQuestion}  \r\n          />\r\n        <Message\r\n          success\r\n          color=\"green\"\r\n          header=\"Nice one! 📒 📕 📚 📖\"\r\n            \r\n        />\r\n        <Message\r\n          warning\r\n          color=\"yellow\"\r\n          header=\"Woah! 😱 😨\"\r\n        \r\n        />\r\n        <Button color=\"green\" floated=\"right\">\r\n          Save\r\n        </Button>\r\n        <br /> {/* Yikes! Deal with Semantic UI React! */}\r\n      </Form>\r\n        </div>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}