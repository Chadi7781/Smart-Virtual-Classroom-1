{"ast":null,"code":"var _jsxFileName = \"C:\\\\Smart-Virtual-Classroom\\\\client\\\\src\\\\Components\\\\Task\\\\ModalTask.js\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport Dropzone from \"react-dropzone-uploader\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Button, Dropdown, Feed, Form, Grid, Header, Icon, Image, List, Modal } from \"semantic-ui-react\";\nimport * as Yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport FileUploadEdit from \"../../utlis/FileUploadEdit\";\nimport { isAuth } from \"../../helpers/auth\";\nimport { getDetailByTaskByStudent, rendreTask } from \"../../redux/slices/Grade\";\nimport { UpdateProfilePicture } from \"../../redux/slices/User\";\nimport FileUpload from \"../../utlis/FileUpload\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ModalTask({\n  task\n}) {\n  _s();\n\n  const [open, setOpen] = useState(false);\n  const dispatch = useDispatch();\n  const [Images, setImages] = useState(task.listReponse);\n  const [enableUpload, setEnableUpload] = useState(false);\n\n  const updateImages = newImages => {\n    if (newImages === null) {\n      task.listReponse.forEach(element => {\n        setImages(element);\n      });\n    } else {\n      setImages(Images.concat(newImages));\n    }\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      _id: task._id,\n      grade: task.grade,\n      taskStatus: \"Remis\",\n      student: task.student,\n      task: task.task,\n      listReponse: []\n    },\n    onSubmit: async values => {\n      try {\n        console.log(\"cc\");\n        console.log(Images);\n\n        if (Images.length !== 0) {\n          values.listReponse = Images;\n        } else {\n          values.listReponse = task.listReponse;\n        }\n\n        setEnableUpload(true);\n        console.log(values);\n        const res = await dispatch(rendreTask(values)).then(() => {\n          dispatch(getDetailByTaskByStudent(task._id));\n          setEnableUpload(false);\n        });\n      } catch (error) {\n        alert(error);\n      }\n    }\n  });\n\n  const closeModel = () => {\n    dispatch(getDetailByTaskByStudent(task._id));\n    setOpen(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Modal, {\n      onClose: () => setOpen(false),\n      onOpen: () => setOpen(true),\n      open: open,\n      size: \"tiny\",\n      trigger: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ui two buttons\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          color: \"red\",\n          fluid: true,\n          floated: true,\n          icon: \"cloud upload\",\n          children: [/*#__PURE__*/_jsxDEV(Icon, {\n            name: \"cloud upload\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 13\n          }, this), task.taskStatus === \"Remis\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: \" update Task \"\n          }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: \" Rendre Task \"\n          }, void 0, false)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this),\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        children: \"Upload Your File Here \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Content, {\n        children: /*#__PURE__*/_jsxDEV(Modal.Description, {\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            onSubmit: formik.handleSubmit,\n            children: [task.taskStatus === \"Remis\" ? /*#__PURE__*/_jsxDEV(FileUploadEdit, {\n              refreshFunction: updateImages,\n              listfile: task.listReponse,\n              Enbale: enableUpload\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 5\n            }, this) : /*#__PURE__*/_jsxDEV(FileUpload, {\n              refreshFunction: updateImages,\n              listfile: null,\n              Enbale: enableUpload\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              color: \"red\",\n              floated: \"right\",\n              icon: \"checkmark\",\n              children: \"rendre Task\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 10\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Actions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          color: \"black\",\n          onClick: () => setOpen(false),\n          children: \"Back To Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 14\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 1\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ModalTask, \"EMw6geJ+/x2P3uMiXeC4iXXDSvQ=\", false, function () {\n  return [useDispatch, useFormik];\n});\n\n_c = ModalTask;\n\nvar _c;\n\n$RefreshReg$(_c, \"ModalTask\");","map":{"version":3,"sources":["C:/Smart-Virtual-Classroom/client/src/Components/Task/ModalTask.js"],"names":["axios","React","useEffect","useState","Dropzone","useDispatch","useSelector","Button","Dropdown","Feed","Form","Grid","Header","Icon","Image","List","Modal","Yup","useFormik","FileUploadEdit","isAuth","getDetailByTaskByStudent","rendreTask","UpdateProfilePicture","FileUpload","ModalTask","task","open","setOpen","dispatch","Images","setImages","listReponse","enableUpload","setEnableUpload","updateImages","newImages","forEach","element","concat","formik","initialValues","_id","grade","taskStatus","student","onSubmit","values","console","log","length","res","then","error","alert","closeModel","handleSubmit"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport Dropzone from \"react-dropzone-uploader\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  Button,\n  Dropdown,\n  Feed,\n  Form,\n  Grid,\n  Header,\n  Icon,\n  Image,\n  List,\n  Modal,\n} from \"semantic-ui-react\";\nimport * as Yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport FileUploadEdit from \"../../utlis/FileUploadEdit\";\nimport { isAuth } from \"../../helpers/auth\";\nimport {  getDetailByTaskByStudent, rendreTask } from \"../../redux/slices/Grade\";\nimport { UpdateProfilePicture } from \"../../redux/slices/User\";\nimport FileUpload from \"../../utlis/FileUpload\";\n\nexport default function ModalTask({task}) {\n  \n\n  const [open, setOpen] = useState(false);\n\n  const dispatch = useDispatch();\n\n  const [Images, setImages] = useState(task.listReponse);\n  const [enableUpload, setEnableUpload] = useState(false);\n\n  \n\n  const updateImages = (newImages) => {\n    if (newImages === null) {\n      task.listReponse.forEach((element) => {\n        setImages(element);\n        \n      });\n    } else {\n      setImages(Images.concat(newImages));\n    }\n  };\n\n    \n\n\n    const formik = useFormik({\n      initialValues: {\n        _id : task._id,\n        grade: task.grade,\n        taskStatus: \"Remis\",\n      student : task.student,\n       task: task.task,\n        listReponse: [],\n      \n\n      },\n  \n  \n      onSubmit: async (values) => {\n       \n        try {\n          console.log(\"cc\");\n          console.log(Images);\n          if(Images.length !==0 )\n         { values.listReponse = Images;\n          \n        }\n        else{\n          values.listReponse = task.listReponse;\n        }\n        setEnableUpload(true)\n        console.log(values);\n        const res = await dispatch(rendreTask(values)).then(()=>{\n\n          dispatch(getDetailByTaskByStudent(task._id));\n\n          setEnableUpload(false)\n        });\n        } catch (error) {\n          alert(error);\n        }\n      },\n    });\n  const closeModel = () => {\n  \n    dispatch(getDetailByTaskByStudent(task._id));\n   \n    setOpen(false);\n  };\n\n\n\n  return (\n    <div>\n     \n\n    \n<Modal\n        onClose={() => setOpen(false)}\n        onOpen={() => setOpen(true)}\n        open={open}\n        size=\"tiny\"\n        trigger={\n          <div className='ui two buttons'>\n          <Button  color=\"red\" fluid floated\n          icon=\"cloud upload\"\n          >\n            <Icon name=\"cloud upload\"></Icon>\n              { task.taskStatus === \"Remis\" ? ( <> update Task </>) : ( <> Rendre Task </> ) }\n            </Button>\n            </div>\n         \n        }\n      >\n        <Modal.Header>Upload Your File Here </Modal.Header>\n        <Modal.Content>\n          <Modal.Description>\n          <Form  onSubmit={formik.handleSubmit}>\n         \n        { task.taskStatus ===\"Remis\"  ? ( \n    <FileUploadEdit\n    refreshFunction={updateImages}\n    listfile={ task.listReponse}  \n    Enbale={enableUpload}\n  />\n\n        ) : (\n\n          <FileUpload\n          refreshFunction={updateImages}\n          listfile={ null}  \n          Enbale={enableUpload}\n        />\n        )}\n         <Button type=\"submit\" color=\"red\" floated=\"right\"   icon=\"checkmark\">\n          rendre Task\n        </Button>\n</Form>\n          </Modal.Description>\n        </Modal.Content>\n        <br/>\n        <br/>\n        <Modal.Actions>\n          <Button color=\"black\" onClick={() => setOpen(false)}>\n            Back To Task\n          </Button>\n        \n             <br></br>\n        \n        </Modal.Actions>\n     \n      </Modal>\n   \n      \n\n\n    </div>\n  );\n}\n\n\n"]},"metadata":{},"sourceType":"module"}