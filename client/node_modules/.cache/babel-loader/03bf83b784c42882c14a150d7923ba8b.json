{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { CommentsApi } from \"../../api/api\";\nlet initialState = {\n  comments: [],\n  errors: \"\"\n};\nconst commentSlice = createSlice({\n  name: \"comments\",\n  initialState,\n  reducers: {\n    setComments(state, action) {\n      state.comments = action.payload;\n    },\n\n    setErrors(state, action) {\n      state.errors = action.payload;\n    },\n\n    addComments: (state, action) => {\n      const payload = action.payload;\n      state.comments.push(payload);\n    }\n  }\n});\nexport const fetchCommentsCourse = id => async dispatch => {\n  const res = CommentsApi.getCommentsCourse(id);\n  res.then(data => {\n    dispatch(setComments(data));\n  });\n};\nexport const fetchCommentsTask = id => async dispatch => {\n  const res = CommentsApi.getCommentsTask(id);\n  res.then(data => {\n    dispatch(setComments(data));\n  });\n};\nexport const selectComments = state => {\n  return [state.comments.comments, state.comments.errors];\n};\nexport const {\n  setComments,\n  setErrors,\n  addComments\n} = commentSlice.actions;\nexport default commentSlice.reducer;","map":{"version":3,"sources":["C:/Smart-Virtual-Classroom/client/src/redux/slices/commentslice.js"],"names":["createSlice","CommentsApi","initialState","comments","errors","commentSlice","name","reducers","setComments","state","action","payload","setErrors","addComments","push","fetchCommentsCourse","id","dispatch","res","getCommentsCourse","then","data","fetchCommentsTask","getCommentsTask","selectComments","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,WAAT,QAA4B,eAA5B;AAEA,IAAIC,YAAY,GAAG;AACjBC,EAAAA,QAAQ,EAAE,EADO;AAEjBC,EAAAA,MAAM,EAAE;AAFS,CAAnB;AAKA,MAAMC,YAAY,GAAGL,WAAW,CAAC;AAC/BM,EAAAA,IAAI,EAAE,UADyB;AAE/BJ,EAAAA,YAF+B;AAG/BK,EAAAA,QAAQ,EAAE;AACRC,IAAAA,WAAW,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACzBD,MAAAA,KAAK,CAACN,QAAN,GAAiBO,MAAM,CAACC,OAAxB;AACD,KAHO;;AAIRC,IAAAA,SAAS,CAACH,KAAD,EAAQC,MAAR,EAAgB;AACvBD,MAAAA,KAAK,CAACL,MAAN,GAAeM,MAAM,CAACC,OAAtB;AACD,KANO;;AAORE,IAAAA,WAAW,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AAC9B,YAAMC,OAAO,GAAGD,MAAM,CAACC,OAAvB;AACAF,MAAAA,KAAK,CAACN,QAAN,CAAeW,IAAf,CAAoBH,OAApB;AACD;AAVO;AAHqB,CAAD,CAAhC;AAiBA,OAAO,MAAMI,mBAAmB,GAAIC,EAAD,IAAQ,MAAOC,QAAP,IAAoB;AAC7D,QAAMC,GAAG,GAAGjB,WAAW,CAACkB,iBAAZ,CAA8BH,EAA9B,CAAZ;AAEAE,EAAAA,GAAG,CAACE,IAAJ,CAAUC,IAAD,IAAU;AACjBJ,IAAAA,QAAQ,CAACT,WAAW,CAACa,IAAD,CAAZ,CAAR;AACD,GAFD;AAGD,CANM;AAOP,OAAO,MAAMC,iBAAiB,GAAIN,EAAD,IAAQ,MAAOC,QAAP,IAAoB;AACzD,QAAMC,GAAG,GAAGjB,WAAW,CAACsB,eAAZ,CAA4BP,EAA5B,CAAZ;AAEAE,EAAAA,GAAG,CAACE,IAAJ,CAAUC,IAAD,IAAU;AACjBJ,IAAAA,QAAQ,CAACT,WAAW,CAACa,IAAD,CAAZ,CAAR;AACD,GAFD;AAGD,CANI;AAQP,OAAO,MAAMG,cAAc,GAAIf,KAAD,IAAW;AACvC,SAAO,CAACA,KAAK,CAACN,QAAN,CAAeA,QAAhB,EAA0BM,KAAK,CAACN,QAAN,CAAeC,MAAzC,CAAP;AACD,CAFM;AAIP,OAAO,MAAM;AAAEI,EAAAA,WAAF;AAAeI,EAAAA,SAAf;AAA0BC,EAAAA;AAA1B,IAA0CR,YAAY,CAACoB,OAA7D;AACP,eAAepB,YAAY,CAACqB,OAA5B","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { CommentsApi } from \"../../api/api\";\r\n\r\nlet initialState = {\r\n  comments: [],\r\n  errors: \"\",\r\n};\r\n\r\nconst commentSlice = createSlice({\r\n  name: \"comments\",\r\n  initialState,\r\n  reducers: {\r\n    setComments(state, action) {\r\n      state.comments = action.payload;\r\n    },\r\n    setErrors(state, action) {\r\n      state.errors = action.payload;\r\n    },\r\n    addComments: (state, action) => {\r\n      const payload = action.payload;\r\n      state.comments.push(payload);\r\n    },\r\n  },\r\n});\r\n\r\nexport const fetchCommentsCourse = (id) => async (dispatch) => {\r\n  const res = CommentsApi.getCommentsCourse(id);\r\n\r\n  res.then((data) => {\r\n    dispatch(setComments(data));\r\n  });\r\n};\r\nexport const fetchCommentsTask = (id) => async (dispatch) => {\r\n    const res = CommentsApi.getCommentsTask(id);\r\n  \r\n    res.then((data) => {\r\n      dispatch(setComments(data));\r\n    });\r\n  };\r\n  \r\nexport const selectComments = (state) => {\r\n  return [state.comments.comments, state.comments.errors];\r\n};\r\n\r\nexport const { setComments, setErrors, addComments } = commentSlice.actions;\r\nexport default commentSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}