{"ast":null,"code":"var _jsxFileName = \"C:\\\\Smart-Virtual-Classroom\\\\client\\\\src\\\\Components\\\\question\\\\AddPost.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Button, Form, Input, TextArea, Segment } from \"semantic-ui-react\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport * as Yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport { AddquestionsApi } from \"../../api/api\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { addQuestion } from \"../../redux/slices/questionslice\";\nimport FileUpload from \"../../utlis/FileUpload\";\nimport TagsInput from \"react-tagsinput\";\nimport \"react-tagsinput/react-tagsinput.css\";\nimport { useHistory } from \"react-router\";\nimport io from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ENDPOINT = \"https://closer-server.herokuapp.com/\";\n\nfunction AddPost() {\n  _s();\n\n  const socket = io(ENDPOINT);\n  const documentData = JSON.parse(localStorage.getItem(\"user\"));\n  const history = useHistory();\n  const [error] = useState({\n    visible: false,\n    message: \"\"\n  });\n  const dispatch = useDispatch();\n  const [Images, setImages] = useState([]);\n\n  const updateImages = newImages => {\n    console.log(newImages);\n    setImages(newImages);\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      Title: \"\",\n      Body: \"\",\n      Writerq: {\n        _id: \"\"\n      },\n      Filee: []\n    },\n    validationSchema: yupSchema,\n    onSubmit: async values => {\n      try {\n        values.Filee = Images;\n        values.Writerq._id = documentData._id;\n        const res = await AddquestionsApi.postQuestions(values);\n        dispatch(addQuestion(res));\n        socket.emit(\"send_question\", \"message\");\n        history.push(\"/FAQ/\" + res._id);\n      } catch (error) {\n        alert(error);\n      }\n    }\n  });\n  const [tags, setTags] = useState([]);\n\n  const handleChange = tag => {\n    setTags(tag);\n    console.log(tags);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Segment, {\n      raised: true,\n      color: \"red\",\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: formik.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          widths: \"equal\",\n          children: /*#__PURE__*/_jsxDEV(Form.Field, {\n            control: Input,\n            placeholder: \"Title\",\n            label: \"Title\",\n            name: \"Title\",\n            onChange: formik.handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n          control: TextArea,\n          placeholder: \"whats your question?\",\n          label: \"Content\",\n          name: \"Body\",\n          onChange: formik.handleChange,\n          error: formik.errors.Body\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TagsInput, {\n          value: tags,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            float: \"right\",\n            marginRight: \"5%\",\n            marginTop: \"1%\"\n          },\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            color: \"red\",\n            children: \"Ask!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginLeft: \"5%\"\n            },\n            children: /*#__PURE__*/_jsxDEV(FileUpload, {\n              refreshFunction: updateImages,\n              listfile: null\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AddPost, \"R+lwPZCcJQP3iKF5hzjcWGE214A=\", false, function () {\n  return [useHistory, useDispatch, useFormik];\n});\n\n_c = AddPost;\nconst yupSchema = Yup.object({\n  Body: Yup.string().required(\"Champs requis!\")\n});\nexport default AddPost;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddPost\");","map":{"version":3,"sources":["C:/Smart-Virtual-Classroom/client/src/Components/question/AddPost.js"],"names":["React","Button","Form","Input","TextArea","Segment","Yup","useFormik","AddquestionsApi","useState","useDispatch","addQuestion","FileUpload","TagsInput","useHistory","io","ENDPOINT","AddPost","socket","documentData","JSON","parse","localStorage","getItem","history","error","visible","message","dispatch","Images","setImages","updateImages","newImages","console","log","formik","initialValues","Title","Body","Writerq","_id","Filee","validationSchema","yupSchema","onSubmit","values","res","postQuestions","emit","push","alert","tags","setTags","handleChange","tag","handleSubmit","errors","float","marginRight","marginTop","display","marginLeft","object","string","required"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Button, Form, Input, TextArea, Segment } from \"semantic-ui-react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport * as Yup from \"yup\";\r\nimport { useFormik } from \"formik\";\r\nimport { AddquestionsApi } from \"../../api/api\";\r\nimport { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addQuestion } from \"../../redux/slices/questionslice\";\r\nimport FileUpload from \"../../utlis/FileUpload\";\r\nimport TagsInput from \"react-tagsinput\";\r\nimport \"react-tagsinput/react-tagsinput.css\";\r\nimport { useHistory } from \"react-router\";\r\nimport io from \"socket.io-client\";\r\nconst ENDPOINT = \"https://closer-server.herokuapp.com/\";\r\nfunction AddPost() {\r\n  const socket = io(ENDPOINT);\r\n\r\n  const documentData = JSON.parse(localStorage.getItem(\"user\"));\r\n  const history = useHistory();\r\n  const [error] = useState({ visible: false, message: \"\" });\r\n  const dispatch = useDispatch();\r\n  const [Images, setImages] = useState([]);\r\n  const updateImages = (newImages) => {\r\n    console.log(newImages);\r\n    setImages(newImages);\r\n  };\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      Title: \"\",\r\n      Body: \"\",\r\n      Writerq: { _id: \"\" },\r\n      Filee: [],\r\n    },\r\n    validationSchema: yupSchema,\r\n\r\n    onSubmit: async (values) => {\r\n      try {\r\n        values.Filee = Images;\r\n        values.Writerq._id = documentData._id;\r\n\r\n        const res = await AddquestionsApi.postQuestions(values);\r\n        dispatch(addQuestion(res));\r\n        socket.emit(\"send_question\", \"message\");\r\n\r\n        history.push(\"/FAQ/\" + res._id);\r\n      } catch (error) {\r\n        alert(error);\r\n      }\r\n    },\r\n  });\r\n  const [tags, setTags] = useState([]);\r\n  const handleChange = (tag) => {\r\n    setTags(tag);\r\n    console.log(tags);\r\n  };\r\n  return (\r\n    <div>\r\n      <Segment raised color=\"red\">\r\n        <Form onSubmit={formik.handleSubmit}>\r\n          <Form.Group widths=\"equal\">\r\n            <Form.Field\r\n              control={Input}\r\n              placeholder=\"Title\"\r\n              label=\"Title\"\r\n              name=\"Title\"\r\n              onChange={formik.handleChange}\r\n            />\r\n          </Form.Group>\r\n          <Form.Field\r\n            control={TextArea}\r\n            placeholder=\"whats your question?\"\r\n            label=\"Content\"\r\n            name=\"Body\"\r\n            onChange={formik.handleChange}\r\n            error={formik.errors.Body}\r\n          />\r\n          <TagsInput value={tags} onChange={handleChange} />\r\n          <div style={{ float: \"right\", marginRight: \"5%\", marginTop: \"1%\" }}>\r\n            <Button type=\"submit\" color=\"red\">\r\n              Ask!\r\n            </Button>\r\n          </div>\r\n          <div style={{ display: \"flex\" }}>\r\n            <div style={{ marginLeft: \"5%\" }}>\r\n              <FileUpload refreshFunction={updateImages} listfile={null} />\r\n            </div>\r\n          </div>{\" \"}\r\n        </Form>\r\n      </Segment>\r\n    </div>\r\n  );\r\n}\r\nconst yupSchema = Yup.object({\r\n  Body: Yup.string().required(\"Champs requis!\"),\r\n});\r\nexport default AddPost;\r\n"]},"metadata":{},"sourceType":"module"}