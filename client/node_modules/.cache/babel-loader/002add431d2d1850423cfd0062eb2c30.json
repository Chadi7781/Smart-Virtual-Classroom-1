{"ast":null,"code":"var _jsxFileName = \"C:\\\\Smart-Virtual-Classroom\\\\client\\\\src\\\\Components\\\\Task\\\\FormTask.js\",\n    _s = $RefreshSig$();\n\nimport moment from 'moment';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport SemanticDatepicker from 'react-semantic-ui-datepickers';\nimport { Button, Form, Message } from 'semantic-ui-react';\nimport { getTaskByTeacher, taskSlice, updateTask } from '../../redux/slices/Task';\nimport FileUploadEdit from '../../utlis/FileUploadEdit';\nimport * as Yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function FormTask({\n  task\n}) {\n  _s();\n\n  const [Images, setImages] = useState([]);\n  let listFile = [];\n  const [enableUpload, setEnableUpload] = useState(false);\n  const [successMessage, SetSuccessMessage] = useState(\"\");\n  const [errorMessage, SetErrorMessage] = useState(\"\");\n  const [up, setUp] = useState(0);\n\n  const updateImages = newImages => {\n    listFile = newImages; //console.log(listFile);\n  };\n\n  const [taskEdit, setTaskEdit] = useState(task);\n  const dispatch = useDispatch();\n  /* const handleUpdate = (e) =>{\r\n       e.preventDefault();\r\n     //  setTaskEdit(taskEdit.listQuestion = Images)\r\n       setEnableUpload(true)\r\n      console.log(Images);\r\n       console.log(taskEdit.listQuestion);\r\n       dispatch(updateTask(taskEdit)).then(()=>{\r\n           dispatch(getTaskByTeacher({\"idUser\":taskEdit.creator,\"idClass\":taskEdit.cour}))\r\n       });\r\n   }*/\n\n  const d = new Date(task.endDate);\n  const initialDateValue = d;\n  const formik = useFormik({\n    initialValues: {\n      _id: task._id,\n      title: task.title,\n      description: task.description,\n      theme: task.theme,\n      cour: task.cour,\n      typeTask: task.typeTask,\n      listQuestion: listFile,\n      listStudents: task.listStudents,\n      endDate: initialDateValue,\n      creator: task.creator\n    },\n    onSubmit: async values => {\n      try {\n        //setImages(listFile)\n        console.log(task.listQuestion); // console.log(task.listQuestion.length );\n        // console.log(listFile.length);\n        //  if(Images.length != task.listQuestion.length )\n        // { \n        //   values.listQuestion = Images;\n        //values.listQuestion = task.listQuestion;\n\n        setEnableUpload(true); //}\n        // else{\n        // values.listQuestion = Images;\n\n        console.log(values.listQuestion); //values.listQuestion = task.listQuestion;\n        // }\n\n        console.log(values);\n        const res = await dispatch(updateTask(values)).then(() => {\n          dispatch(getTaskByTeacher({\n            \"idUser\": task.creator,\n            \"idClass\": task.cour\n          }));\n          SetSuccessMessage(\"Update Task successfully !\");\n        });\n      } catch (error) {\n        SetErrorMessage(\"Semothing Wrrong Check Your Data Please  !\");\n        alert(error);\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [successMessage ? /*#__PURE__*/_jsxDEV(Message, {\n      success: true,\n      color: \"green\",\n      header: \"Nice one! \\uD83D\\uDCD2 \\uD83D\\uDCD5 \\uD83D\\uDCDA \\uD83D\\uDCD6\",\n      content: successMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 32\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), errorMessage ? /*#__PURE__*/_jsxDEV(Message, {\n      warning: true,\n      color: \"yellow\",\n      header: \"Woah! \\uD83D\\uDE31 \\uD83D\\uDE28\",\n      content: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: formik.handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Form.Input, {\n        label: \"Titre\",\n        type: \"text\",\n        name: \"title\",\n        maxLength: \"40\",\n        required: true,\n        onChange: formik.handleChange,\n        value: formik.values.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.TextArea, {\n        label: \"Description\",\n        type: \"TextArea\",\n        required: true,\n        name: \"description\",\n        onChange: formik.handleChange,\n        value: formik.values.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Due\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(SemanticDatepicker, {\n          required: true,\n          value: formik.values.endDate,\n          onChange: (e, data) => formik.values.endDate = data.value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 14\n      }, this), task.typeTask === \"File\" ? /*#__PURE__*/_jsxDEV(FileUploadEdit, {\n        refreshFunction: updateImages,\n        listfile: task.listQuestion,\n        Enbale: enableUpload\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 43\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        color: \"red\",\n        disabled: formik.values.title === \"\" || formik.values.description === \"\" || formik.values.endDate === null,\n        content: \"Update Task\",\n        floated: \"right\",\n        icon: \"checkmark\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 16\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 14\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 9\n  }, this);\n}\n\n_s(FormTask, \"xlK4XjJTWRHH5NIbGrR7rsez01k=\", false, function () {\n  return [useDispatch, useFormik];\n});\n\n_c = FormTask;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormTask\");","map":{"version":3,"sources":["C:/Smart-Virtual-Classroom/client/src/Components/Task/FormTask.js"],"names":["moment","React","useEffect","useState","useDispatch","useSelector","SemanticDatepicker","Button","Form","Message","getTaskByTeacher","taskSlice","updateTask","FileUploadEdit","Yup","useFormik","FormTask","task","Images","setImages","listFile","enableUpload","setEnableUpload","successMessage","SetSuccessMessage","errorMessage","SetErrorMessage","up","setUp","updateImages","newImages","taskEdit","setTaskEdit","dispatch","d","Date","endDate","initialDateValue","formik","initialValues","_id","title","description","theme","cour","typeTask","listQuestion","listStudents","creator","onSubmit","values","console","log","res","then","error","alert","handleSubmit","handleChange","e","data","value"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,kBAAP,MAA+B,+BAA/B;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,OAAvB,QAAsC,mBAAtC;AACA,SAASC,gBAAT,EAA2BC,SAA3B,EAAsCC,UAAtC,QAAwD,yBAAxD;AACA,OAAOC,cAAP,MAA2B,4BAA3B;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,SAAT,QAA0B,QAA1B;;;AACA,eAAe,SAASC,QAAT,CAAkB;AAACC,EAAAA;AAAD,CAAlB,EAA0B;AAAA;;AAEvC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBhB,QAAQ,CAAC,EAAD,CAApC;AACA,MAAIiB,QAAQ,GAAE,EAAd;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCnB,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM,CAACoB,cAAD,EAAiBC,iBAAjB,IAAsCrB,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACsB,YAAD,EAAeC,eAAf,IAAkCvB,QAAQ,CAAC,EAAD,CAAhD;AAEA,QAAM,CAACwB,EAAD,EAAKC,KAAL,IAAczB,QAAQ,CAAC,CAAD,CAA5B;;AAEA,QAAM0B,YAAY,GAAIC,SAAD,IAAe;AAGlCV,IAAAA,QAAQ,GAAGU,SAAX,CAHkC,CAKlC;AAGD,GARD;;AASE,QAAM,CAACC,QAAD,EAAYC,WAAZ,IAA2B7B,QAAQ,CAACc,IAAD,CAAzC;AAGA,QAAOgB,QAAQ,GAAG7B,WAAW,EAA7B;AAED;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,QAAM8B,CAAC,GAAG,IAAIC,IAAJ,CAASlB,IAAI,CAACmB,OAAd,CAAV;AACA,QAAMC,gBAAgB,GAAGH,CAAzB;AACA,QAAMI,MAAM,GAAGvB,SAAS,CAAC;AACvBwB,IAAAA,aAAa,EAAE;AACbC,MAAAA,GAAG,EAAGvB,IAAI,CAACuB,GADE;AAEbC,MAAAA,KAAK,EAAExB,IAAI,CAACwB,KAFC;AAGbC,MAAAA,WAAW,EAAEzB,IAAI,CAACyB,WAHL;AAIbC,MAAAA,KAAK,EAAE1B,IAAI,CAAC0B,KAJC;AAKbC,MAAAA,IAAI,EAAG3B,IAAI,CAAC2B,IALC;AAMbC,MAAAA,QAAQ,EAAE5B,IAAI,CAAC4B,QANF;AAObC,MAAAA,YAAY,EAAE1B,QAPD;AAQb2B,MAAAA,YAAY,EAAE9B,IAAI,CAAC8B,YARN;AASbX,MAAAA,OAAO,EAAEC,gBATI;AAUbW,MAAAA,OAAO,EAAE/B,IAAI,CAAC+B;AAVD,KADQ;AAgBvBC,IAAAA,QAAQ,EAAE,MAAOC,MAAP,IAAkB;AAE1B,UAAI;AACF;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYnC,IAAI,CAAC6B,YAAjB,EAFE,CAGH;AACA;AACD;AACA;AACA;AACG;;AACAxB,QAAAA,eAAe,CAAC,IAAD,CAAf,CATC,CAUJ;AACD;AACE;;AACC6B,QAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACJ,YAAnB,EAbE,CAcF;AAGH;;AAECK,QAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,cAAMG,GAAG,GAAG,MAAMpB,QAAQ,CAACrB,UAAU,CAACsC,MAAD,CAAX,CAAR,CAA6BI,IAA7B,CAAkC,MAAI;AACtDrB,UAAAA,QAAQ,CAACvB,gBAAgB,CAAC;AAAC,sBAASO,IAAI,CAAC+B,OAAf;AAAuB,uBAAU/B,IAAI,CAAC2B;AAAtC,WAAD,CAAjB,CAAR;AACApB,UAAAA,iBAAiB,CAAC,4BAAD,CAAjB;AACH,SAHmB,CAAlB;AAIC,OAxBD,CAwBE,OAAO+B,KAAP,EAAc;AACd7B,QAAAA,eAAe,CAAC,4CAAD,CAAf;AACA8B,QAAAA,KAAK,CAACD,KAAD,CAAL;AACD;AACF;AA9CsB,GAAD,CAAxB;AAgDA,sBACI;AAAA,eACIhC,cAAc,gBAAK,QAAC,OAAD;AACrB,MAAA,OAAO,MADc;AAErB,MAAA,KAAK,EAAC,OAFe;AAGrB,MAAA,MAAM,EAAC,+DAHc;AAInB,MAAA,OAAO,EAAEA;AAJU;AAAA;AAAA;AAAA;AAAA,YAAL,gBAKX,qCANP,EAQAE,YAAY,gBACV,QAAC,OAAD;AACA,MAAA,OAAO,MADP;AAEA,MAAA,KAAK,EAAC,QAFN;AAGA,MAAA,MAAM,EAAC,iCAHP;AAIA,MAAA,OAAO,EAAEA;AAJT;AAAA;AAAA;AAAA;AAAA,YADU,gBAQR,qCAhBJ,eAkBK,QAAC,IAAD;AAAO,MAAA,QAAQ,EAAEa,MAAM,CAACmB,YAAxB;AAAA,8BACL,QAAC,IAAD,CAAM,KAAN;AACE,QAAA,KAAK,EAAC,OADR;AAEE,QAAA,IAAI,EAAC,MAFP;AAIE,QAAA,IAAI,EAAC,OAJP;AAKE,QAAA,SAAS,EAAC,IALZ;AAOE,QAAA,QAAQ,MAPV;AASE,QAAA,QAAQ,EACNnB,MAAM,CAACoB,YAVX;AAWI,QAAA,KAAK,EAAEpB,MAAM,CAACY,MAAP,CAAcT;AAXzB;AAAA;AAAA;AAAA;AAAA,cADK,eAcL,QAAC,IAAD,CAAM,QAAN;AACE,QAAA,KAAK,EAAC,aADR;AAEE,QAAA,IAAI,EAAC,UAFP;AAGD,QAAA,QAAQ,MAHP;AAIE,QAAA,IAAI,EAAC,aAJP;AAOE,QAAA,QAAQ,EACNH,MAAM,CAACoB,YARX;AASI,QAAA,KAAK,EAAEpB,MAAM,CAACY,MAAP,CAAcR;AATzB;AAAA;AAAA;AAAA;AAAA,cAdK,eAyBA,QAAC,IAAD,CAAM,KAAN;AAAA,gCACK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADL,eAEK,QAAC,kBAAD;AACA,UAAA,QAAQ,MADR;AAEC,UAAA,KAAK,EAAEJ,MAAM,CAACY,MAAP,CAAcd,OAFtB;AAGC,UAAA,QAAQ,EAAE,CAACuB,CAAD,EAAIC,IAAJ,KACRtB,MAAM,CAACY,MAAP,CAAcd,OAAd,GAAuBwB,IAAI,CAACC;AAJ/B;AAAA;AAAA;AAAA;AAAA,gBAFL;AAAA;AAAA;AAAA;AAAA;AAAA,cAzBA,EAoCD5C,IAAI,CAAC4B,QAAL,KAAkB,MAAlB,gBAA8B,QAAC,cAAD;AAChC,QAAA,eAAe,EAAEhB,YADe;AAE9B,QAAA,QAAQ,EAAEZ,IAAI,CAAC6B,YAFe;AAG9B,QAAA,MAAM,EAAEzB;AAHsB;AAAA;AAAA;AAAA;AAAA,cAA9B,gBAIO,qCAxCN,eA2CH;AAAA;AAAA;AAAA;AAAA,cA3CG,eA4CE,QAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,KAAK,EAAC,KAA5B;AAAkC,QAAA,QAAQ,EAAEiB,MAAM,CAACY,MAAP,CAAcT,KAAd,KAAuB,EAAvB,IAA6BH,MAAM,CAACY,MAAP,CAAcR,WAAd,KAA6B,EAA1D,IAAgEJ,MAAM,CAACY,MAAP,CAAcd,OAAd,KAAwB,IAApI;AACA,QAAA,OAAO,EAAC,aADR;AACuB,QAAA,OAAO,EAAC,OAD/B;AACwC,QAAA,IAAI,EAAC;AAD7C;AAAA;AAAA;AAAA;AAAA,cA5CF;AAAA;AAAA;AAAA;AAAA;AAAA,YAlBL,eAmEG;AAAA;AAAA;AAAA;AAAA,YAnEH,eAoEA;AAAA;AAAA;AAAA;AAAA,YApEA,eAsEA;AAAA;AAAA;AAAA;AAAA,YAtEA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA2EH;;GA/JuBpB,Q;UAsBFZ,W,EAcHW,S;;;KApCKC,Q","sourcesContent":["import moment from 'moment';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport SemanticDatepicker from 'react-semantic-ui-datepickers';\r\nimport { Button, Form, Message } from 'semantic-ui-react';\r\nimport { getTaskByTeacher, taskSlice, updateTask } from '../../redux/slices/Task';\r\nimport FileUploadEdit from '../../utlis/FileUploadEdit';\r\nimport * as Yup from \"yup\";\r\nimport { useFormik } from \"formik\";\r\nexport default function FormTask({task}) {\r\n\r\n  const [Images, setImages] = useState([]);\r\n  let listFile =[];\r\n  const [enableUpload, setEnableUpload] = useState(false);\r\n  const [successMessage, SetSuccessMessage] = useState(\"\");\r\n  const [errorMessage, SetErrorMessage] = useState(\"\");\r\n\r\n  const [up, setUp] = useState(0);\r\n\r\n  const updateImages = (newImages) => {\r\n \r\n\r\n    listFile = newImages;\r\n\r\n    //console.log(listFile);\r\n\r\n\r\n  };\r\n    const [taskEdit , setTaskEdit] = useState(task);\r\n    \r\n\r\n    const  dispatch = useDispatch();\r\n   \r\n   /* const handleUpdate = (e) =>{\r\n        e.preventDefault();\r\n      //  setTaskEdit(taskEdit.listQuestion = Images)\r\n        setEnableUpload(true)\r\n       console.log(Images);\r\n        console.log(taskEdit.listQuestion);\r\n        dispatch(updateTask(taskEdit)).then(()=>{\r\n            dispatch(getTaskByTeacher({\"idUser\":taskEdit.creator,\"idClass\":taskEdit.cour}))\r\n        });\r\n    }*/\r\n    const d = new Date(task.endDate,);\r\n    const initialDateValue = d;\r\n    const formik = useFormik({\r\n      initialValues: {\r\n        _id : task._id,\r\n        title: task.title,\r\n        description: task.description,\r\n        theme: task.theme,\r\n        cour : task.cour,\r\n        typeTask: task.typeTask,\r\n        listQuestion: listFile,\r\n        listStudents: task.listStudents,\r\n        endDate: initialDateValue,\r\n        creator: task.creator,\r\n\r\n      },\r\n  \r\n  \r\n      onSubmit: async (values) => {\r\n       \r\n        try {\r\n          //setImages(listFile)\r\n          console.log(task.listQuestion);\r\n         // console.log(task.listQuestion.length );\r\n         // console.log(listFile.length);\r\n        //  if(Images.length != task.listQuestion.length )\r\n        // { \r\n        //   values.listQuestion = Images;\r\n           //values.listQuestion = task.listQuestion;\r\n           setEnableUpload(true)\r\n        //}\r\n       // else{\r\n         // values.listQuestion = Images;\r\n          console.log(values.listQuestion);\r\n          //values.listQuestion = task.listQuestion;\r\n        \r\n       \r\n       // }\r\n        \r\n        console.log(values);\r\n        const res = await dispatch(updateTask(values)).then(()=>{\r\n          dispatch(getTaskByTeacher({\"idUser\":task.creator,\"idClass\":task.cour}));\r\n          SetSuccessMessage(\"Update Task successfully !\")\r\n      });\r\n        } catch (error) {\r\n          SetErrorMessage(\"Semothing Wrrong Check Your Data Please  !\")\r\n          alert(error);\r\n        }\r\n      },\r\n    });\r\n    return (\r\n        <div>\r\n          { successMessage ? ( <Message\r\n          success\r\n          color=\"green\"\r\n          header=\"Nice one! 📒 📕 📚 📖\"\r\n            content={successMessage}\r\n        />) : (<></>)}\r\n       \r\n       {errorMessage ? (\r\n          <Message\r\n          warning\r\n          color=\"yellow\"\r\n          header=\"Woah! 😱 😨\"\r\n          content={errorMessage}\r\n        \r\n        />\r\n       ) : (<></>)}\r\n       \r\n             <Form  onSubmit={formik.handleSubmit}>\r\n        <Form.Input\r\n          label=\"Titre\"\r\n          type=\"text\"\r\n          \r\n          name=\"title\"\r\n          maxLength=\"40\"\r\n          \r\n          required\r\n      \r\n          onChange={\r\n            formik.handleChange}\r\n            value={formik.values.title}\r\n        />\r\n        <Form.TextArea\r\n          label=\"Description\"\r\n          type=\"TextArea\"\r\n       required\r\n          name=\"description\"\r\n         \r\n        \r\n          onChange={\r\n            formik.handleChange}\r\n            value={formik.values.description}\r\n        />\r\n             <Form.Field>\r\n                  <label>Due</label>\r\n                  <SemanticDatepicker\r\n                  required\r\n                   value={formik.values.endDate}\r\n                   onChange={(e, data) =>\r\n                    (formik.values.endDate= data.value )\r\n                  }\r\n                  />\r\n                </Form.Field>\r\n                 \r\n          { task.typeTask === \"File\" ? (  <FileUploadEdit\r\n          refreshFunction={updateImages}\r\n            listfile={task.listQuestion}  \r\n            Enbale={enableUpload}\r\n          />)  :  (<></>)}\r\n       \r\n      \r\n          <br/>\r\n               <Button type=\"submit\" color=\"red\" disabled={formik.values.title ===\"\" || formik.values.description=== \"\" || formik.values.endDate===null }\r\n               content=\"Update Task\"  floated=\"right\"  icon=\"checkmark\" / >\r\n        \r\n           </Form>\r\n\r\n           <br/>\r\n        <br/>\r\n    \r\n        <br /> {/* Yikes! Deal with Semantic UI React! */}\r\n     \r\n        </div>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}