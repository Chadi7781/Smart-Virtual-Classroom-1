{"ast":null,"code":"var _jsxFileName = \"C:\\\\Smart-Virtual-Classroom\\\\client\\\\src\\\\Components\\\\coursesAndSeances\\\\FormSeance.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Button, Form, Message } from \"semantic-ui-react\";\nimport { AddSeance, EditSeances, GetSeancesById, updateById } from \"../../redux/slices/Seance\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction FormSeance(props) {\n  _s();\n\n  const [titre, SetTitre] = useState(\"\");\n  const [description, SetDescription] = useState(\"\");\n  const [dateCreation, SetDateCreation] = useState(Date.now());\n  const [formClassName, SetFormClassName] = useState(\"\");\n  const [formSuccessMessage, SetFormSuccessMessage] = useState(\"\");\n  const [formErrorMessage, SetFormErrorMessage] = useState(\"\");\n  const CurrentClass = JSON.parse(localStorage.getItem(\"idClass\"));\n  const seanceId = props.seanceId;\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (seanceId) {\n      console.log(seanceId);\n      dispatch(GetSeancesById(seanceId)).then(response => {\n        console.log(response);\n        SetTitre(response.payload.titre);\n        SetDescription(response.payload.description);\n      });\n    }\n  }, [dispatch]);\n\n  const handleTitreChanges = e => {\n    SetTitre(e.target.value);\n  };\n\n  const handleDescriptionChanges = e => {\n    SetDescription(e.target.value);\n  };\n\n  const handleSubmit = e => {\n    // Prevent browser refresh\n    e.preventDefault(); // Acknowledge that if the user id is provided, we're updating via PUT\n    // Otherwise, we're creating a new data via POST\n\n    if (seanceId) {\n      const seance = {\n        titre: titre,\n        description: description,\n        idClass: CurrentClass._id,\n        dateCreation: dateCreation,\n        _id: seanceId\n      };\n      dispatch(EditSeances(seance)).then(response => {\n        SetFormClassName(\"success \");\n        SetFormSuccessMessage(response.payload.msg);\n      }).catch(err => {\n        if (err.response) {\n          if (err.response.data) {\n            SetFormClassName(\"warning\");\n            SetFormErrorMessage(err.response.payload.msg);\n          }\n        } else {\n          SetFormClassName(\"warning\");\n          SetFormErrorMessage(\"something wen wrong \" + err);\n        }\n      });\n    }\n\n    if (!seanceId) {\n      const seance = {\n        titre: titre,\n        description: description,\n        idClass: CurrentClass._id,\n        dateCreation: dateCreation\n      };\n      console.log(seance);\n      dispatch(AddSeance(seance)).then(response => {\n        SetFormClassName(\"success\");\n        SetFormSuccessMessage(response.payload.msg);\n      }).catch(err => {\n        if (err.response) {\n          if (err.response.data) {\n            SetFormClassName(\"warning\");\n            SetFormErrorMessage(err.response.payload.msg);\n          }\n        } else {\n          SetFormClassName(\"warning\");\n          SetFormErrorMessage(\"something wen wrong \" + err);\n        }\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      className: formClassName,\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Form.Input, {\n        label: \"Titre\",\n        type: \"text\",\n        placeholder: \"Seance 1\",\n        name: \"Titre\",\n        maxLength: \"40\",\n        required: true,\n        value: titre,\n        onChange: handleTitreChanges\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.TextArea, {\n        label: \"Description\",\n        type: \"TextArea\",\n        placeholder: \"In this workshop we will learn ...\",\n        name: \"Description\",\n        maxLength: \"5000\",\n        required: true,\n        value: description,\n        onChange: handleDescriptionChanges\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Message, {\n        success: true,\n        color: \"green\",\n        header: \"Nice one! \\uD83D\\uDCD2 \\uD83D\\uDCD5 \\uD83D\\uDCDA \\uD83D\\uDCD6\",\n        content: formSuccessMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Message, {\n        warning: true,\n        color: \"yellow\",\n        header: \"Woah! \\uD83D\\uDE31 \\uD83D\\uDE28\",\n        content: formErrorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        color: \"green\",\n        floated: \"right\",\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n}\n\n_s(FormSeance, \"OIBsONUUGSBZtOuoQ+h7pz64Sus=\", false, function () {\n  return [useDispatch];\n});\n\n_c = FormSeance;\nexport default FormSeance;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormSeance\");","map":{"version":3,"sources":["C:/Smart-Virtual-Classroom/client/src/Components/coursesAndSeances/FormSeance.js"],"names":["React","useState","useEffect","useDispatch","useSelector","Button","Form","Message","AddSeance","EditSeances","GetSeancesById","updateById","FormSeance","props","titre","SetTitre","description","SetDescription","dateCreation","SetDateCreation","Date","now","formClassName","SetFormClassName","formSuccessMessage","SetFormSuccessMessage","formErrorMessage","SetFormErrorMessage","CurrentClass","JSON","parse","localStorage","getItem","seanceId","dispatch","console","log","then","response","payload","handleTitreChanges","e","target","value","handleDescriptionChanges","handleSubmit","preventDefault","seance","idClass","_id","msg","catch","err","data"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Button, Form, Message } from \"semantic-ui-react\";\r\nimport {\r\n  AddSeance,\r\n  EditSeances,\r\n  GetSeancesById,\r\n  updateById,\r\n} from \"../../redux/slices/Seance\";\r\n\r\nfunction FormSeance(props) {\r\n  const [titre, SetTitre] = useState(\"\");\r\n  const [description, SetDescription] = useState(\"\");\r\n \r\n  const [dateCreation, SetDateCreation] = useState(Date.now());\r\n  const [formClassName, SetFormClassName] = useState(\"\");\r\n  const [formSuccessMessage, SetFormSuccessMessage] = useState(\"\");\r\n  const [formErrorMessage, SetFormErrorMessage] = useState(\"\");\r\n  const CurrentClass = JSON.parse(localStorage.getItem(\"idClass\"));\r\n\r\n  const seanceId = props.seanceId;\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (seanceId) {\r\n      console.log(seanceId);\r\n      dispatch(GetSeancesById(seanceId)).then((response) => {\r\n        console.log(response);\r\n        SetTitre(response.payload.titre);\r\n        SetDescription(response.payload.description);\r\n      });\r\n    }\r\n  }, [dispatch]);\r\n\r\n  const handleTitreChanges = (e) => {\r\n    SetTitre(e.target.value);\r\n  };\r\n  const handleDescriptionChanges = (e) => {\r\n    SetDescription(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    // Prevent browser refresh\r\n    e.preventDefault();\r\n\r\n    // Acknowledge that if the user id is provided, we're updating via PUT\r\n    // Otherwise, we're creating a new data via POST\r\n    if (seanceId) {\r\n      const seance = {\r\n        titre: titre,\r\n        description: description,\r\n        idClass: CurrentClass._id,\r\n        dateCreation: dateCreation,\r\n        _id: seanceId,\r\n      };\r\n\r\n      dispatch(EditSeances(seance))\r\n        .then((response) => {\r\n          SetFormClassName(\"success \");\r\n          SetFormSuccessMessage(response.payload.msg);\r\n        })\r\n        .catch((err) => {\r\n          if (err.response) {\r\n            if (err.response.data) {\r\n              SetFormClassName(\"warning\");\r\n              SetFormErrorMessage(err.response.payload.msg);\r\n            }\r\n          } else {\r\n            SetFormClassName(\"warning\");\r\n            SetFormErrorMessage(\"something wen wrong \" + err);\r\n          }\r\n        });\r\n    }\r\n\r\n    if (!seanceId) {\r\n      const seance = {\r\n        titre: titre,\r\n        description: description,\r\n        idClass: CurrentClass._id,\r\n        dateCreation: dateCreation,\r\n      };\r\n      console.log(seance);\r\n      dispatch(AddSeance(seance))\r\n        .then((response) => {\r\n          SetFormClassName(\"success\");\r\n          SetFormSuccessMessage(response.payload.msg);\r\n        })\r\n        .catch((err) => {\r\n          if (err.response) {\r\n            if (err.response.data) {\r\n              SetFormClassName(\"warning\");\r\n              SetFormErrorMessage(err.response.payload.msg);\r\n            }\r\n          } else {\r\n            SetFormClassName(\"warning\");\r\n            SetFormErrorMessage(\"something wen wrong \" + err);\r\n          }\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Form className={formClassName} onSubmit={handleSubmit}>\r\n        <Form.Input\r\n          label=\"Titre\"\r\n          type=\"text\"\r\n          placeholder=\"Seance 1\"\r\n          name=\"Titre\"\r\n          maxLength=\"40\"\r\n          required\r\n          value={titre}\r\n          onChange={handleTitreChanges}\r\n        />\r\n        <Form.TextArea\r\n          label=\"Description\"\r\n          type=\"TextArea\"\r\n          placeholder=\"In this workshop we will learn ...\"\r\n          name=\"Description\"\r\n          maxLength=\"5000\"\r\n          required\r\n          value={description}\r\n          onChange={handleDescriptionChanges}\r\n        />\r\n        <Message\r\n          success\r\n          color=\"green\"\r\n          header=\"Nice one! 📒 📕 📚 📖\"\r\n          content={formSuccessMessage}\r\n        />\r\n        <Message\r\n          warning\r\n          color=\"yellow\"\r\n          header=\"Woah! 😱 😨\"\r\n          content={formErrorMessage}\r\n        />\r\n        <Button color=\"green\" floated=\"right\">\r\n          Save\r\n        </Button>\r\n        <br /> {/* Yikes! Deal with Semantic UI React! */}\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FormSeance;\r\n"]},"metadata":{},"sourceType":"module"}