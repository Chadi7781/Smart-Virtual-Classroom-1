{"ast":null,"code":"var _jsxFileName = \"C:\\\\Smart-Virtual-Classroom\\\\client\\\\src\\\\Components\\\\Task\\\\AddTask.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Multiselect } from \"multiselect-react-dropdown\";\nimport Select from \"react-select\";\nimport SemanticDatepicker from \"react-semantic-ui-datepickers\";\nimport { Dropdown, Button, Form, Grid, Rail, Segment, TextArea, Label } from \"semantic-ui-react\";\nimport { useSelector } from \"react-redux\";\nimport MultiSelect from \"react-multi-select-component\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AddTask(props) {\n  _s();\n\n  const seances = useSelector(state => state.seance.seance);\n  const [theme, setTheme] = useState(props.data.theme);\n  const currentClass = JSON.parse(localStorage.getItem(\"idClass\"));\n  const [selected, setSelected] = useState([]);\n  const studentChosen = [];\n  currentClass.classUsers.forEach(element => {\n    studentChosen.push({\n      label: element.name,\n      value: element._id\n    });\n  });\n  var step = 1;\n  const [tasks, setTask] = useState({\n    title: props.data.title,\n    description: props.data.description,\n    theme: props.data.theme,\n    cour: props.data.cour,\n    typeTask: props.data.typeTask,\n    listQuestion: props.data.listQuestion,\n    listStudents: props.data.listStudents,\n    endDate: props.data.endDate,\n    creator: props.data.creator\n  });\n\n  const event = () => {\n    props.addTask(tasks);\n    console.log(tasks.listStudents);\n    props.nextStep(step + 1);\n  };\n  /*\n    const onSelect = (selectedList, selectedItem) => {\n      console.log(selectedItem);\n      props.addTask(tasks.listStudents.push(selectedItem));\n  \n      console.log(tasks.listStudents);\n    };\n    const onRemove = (selectedList, removedItem) => {\n      props.addTask(\n        (tasks.listStudents = selectedList.filter(\n          (item) => item._id !== removedItem._id\n        ))\n      );\n  \n      console.log(tasks.listStudents);\n    };\n  \n    const selectedTheme = (selectedList, selectedItem) => {\n      console.log(selectedItem);\n      setTheme(selectedItem);\n      props.addTask((tasks.theme = selectedItem._id));\n    };*/\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Segment, {\n      raised: true,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        children: /*#__PURE__*/_jsxDEV(Grid.Row, {\n          children: [/*#__PURE__*/_jsxDEV(Grid.Column, {\n            width: 11,\n            children: /*#__PURE__*/_jsxDEV(Form, {\n              children: [/*#__PURE__*/_jsxDEV(Form.Field, {\n                children: /*#__PURE__*/_jsxDEV(Form.Input, {\n                  label: \"Title\",\n                  required: true,\n                  value: tasks.title,\n                  onChange: e => setTask({ ...tasks,\n                    title: e.target.value\n                  }),\n                  placeholder: \"Title\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 87,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 86,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n                required: true,\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  children: \"Description\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 98,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(TextArea, {\n                  required: true,\n                  label: \"Description\",\n                  value: tasks.description,\n                  onChange: e => setTask({ ...tasks,\n                    description: e.target.value\n                  }),\n                  placeholder: \"Description..\",\n                  style: {\n                    minHeight: 50\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 99,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  children: \"Due\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 112,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(SemanticDatepicker, {\n                  onChange: (e, data) => setTask({ ...tasks,\n                    endDate: data.value\n                  }),\n                  value: tasks.endDate\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 113,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 111,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid.Column, {\n            width: 5,\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"For : \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n              required: true,\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"For : \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 28\n              }, this), /*#__PURE__*/_jsxDEV(MultiSelect, {\n                options: studentChosen,\n                value: selected,\n                onChange: setSelected,\n                labelledBy: \"Select\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 128,\n                columnNumber: 28\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      disabled: step > 2 || !tasks.title && !tasks.description && !tasks.typeTask,\n      type: \"submit\",\n      floated: \"right\",\n      color: \"red\",\n      onClick: event,\n      children: \"Next\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AddTask, \"afxf/6CZs0EloQzUi+bXU6Z3tIk=\", false, function () {\n  return [useSelector];\n});\n\n_c = AddTask;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddTask\");","map":{"version":3,"sources":["C:/Smart-Virtual-Classroom/client/src/Components/Task/AddTask.js"],"names":["React","useState","Multiselect","Select","SemanticDatepicker","Dropdown","Button","Form","Grid","Rail","Segment","TextArea","Label","useSelector","MultiSelect","AddTask","props","seances","state","seance","theme","setTheme","data","currentClass","JSON","parse","localStorage","getItem","selected","setSelected","studentChosen","classUsers","forEach","element","push","label","name","value","_id","step","tasks","setTask","title","description","cour","typeTask","listQuestion","listStudents","endDate","creator","event","addTask","console","log","nextStep","e","target","minHeight"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n\nimport { Multiselect } from \"multiselect-react-dropdown\";\nimport Select from \"react-select\";\nimport SemanticDatepicker from \"react-semantic-ui-datepickers\";\n\nimport {\n  Dropdown,\n  Button,\n  Form,\n  Grid,\n  Rail,\n  Segment,\n  TextArea,\n  Label,\n} from \"semantic-ui-react\";\nimport { useSelector } from \"react-redux\";\nimport MultiSelect from \"react-multi-select-component\";\n\nexport default function AddTask(props) {\n \n  const seances = useSelector((state) => state.seance.seance);\n  \n  \n  const [theme, setTheme] = useState(props.data.theme);\n\n  const currentClass = JSON.parse(localStorage.getItem(\"idClass\"));\n  const [selected, setSelected] = useState([]);\n  const studentChosen = [];\n  currentClass.classUsers.forEach((element) => {\n       \n    studentChosen.push( {label: element.name,value: element._id});\n  });\n \n  \n  var step = 1;\n\n  const [tasks, setTask] = useState({\n    title: props.data.title,\n    description: props.data.description,\n    theme: props.data.theme,\n    cour : props.data.cour,\n    typeTask: props.data.typeTask,\n    listQuestion: props.data.listQuestion,\n    listStudents: props.data.listStudents,\n    endDate: props.data.endDate,\n    creator: props.data.creator,\n  });\n\n  const event = () => {\n    props.addTask(tasks);\n    console.log(tasks.listStudents);\n\n    props.nextStep(step + 1);\n  };\n/*\n  const onSelect = (selectedList, selectedItem) => {\n    console.log(selectedItem);\n    props.addTask(tasks.listStudents.push(selectedItem));\n\n    console.log(tasks.listStudents);\n  };\n  const onRemove = (selectedList, removedItem) => {\n    props.addTask(\n      (tasks.listStudents = selectedList.filter(\n        (item) => item._id !== removedItem._id\n      ))\n    );\n\n    console.log(tasks.listStudents);\n  };\n\n  const selectedTheme = (selectedList, selectedItem) => {\n    console.log(selectedItem);\n    setTheme(selectedItem);\n    props.addTask((tasks.theme = selectedItem._id));\n  };*/\n\n  return (\n    <div>\n      <Segment raised>\n        <Grid>\n          <Grid.Row>\n            <Grid.Column width={11}>\n              <Form >\n                <Form.Field>\n                  <Form.Input\n                    label=\"Title\"\n                    required\n                    value={tasks.title}\n                    onChange={(e) =>\n                      setTask({ ...tasks, title: e.target.value })\n                    }\n                    placeholder=\"Title\"\n                  />\n                </Form.Field>\n                <Form.Field required>\n                  <label>Description</label>\n                  <TextArea\n                  required\n                    label=\"Description\"\n                    value={tasks.description}\n                    onChange={(e) =>\n                      setTask({ ...tasks, description: e.target.value })\n                    }\n                    placeholder=\"Description..\"\n                    style={{ minHeight: 50 }}\n                  />\n                </Form.Field>\n            \n                <Form.Field>\n                  <label>Due</label>\n                  <SemanticDatepicker\n                    onChange={(e, data) =>\n                      setTask({ ...tasks, endDate: data.value })\n                    }\n                    value={tasks.endDate}\n                  />\n                </Form.Field>\n              </Form>\n            </Grid.Column>\n            <Grid.Column width={5}>\n              <label>For : </label>\n       \n              <br/>\n              <Form.Field required>\n                           <label>For : </label>\n                           <MultiSelect\n        options={studentChosen}\n       \n        value={selected}\n        onChange={setSelected}\n        labelledBy=\"Select\"\n      />\n              </Form.Field>\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </Segment>\n      <Button\n        disabled={\n          step > 2 || (!tasks.title && !tasks.description && !tasks.typeTask)\n        }\n        type=\"submit\"\n        floated=\"right\"\n        color=\"red\"\n        onClick={event}\n      >\n        Next\n      </Button>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}