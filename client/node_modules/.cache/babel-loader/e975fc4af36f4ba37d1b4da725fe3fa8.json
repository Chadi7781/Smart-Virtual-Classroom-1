{"ast":null,"code":"var _jsxFileName = \"C:\\\\Smart-Virtual-Classroom\\\\client\\\\src\\\\Components\\\\Task\\\\FormTask.js\",\n    _s = $RefreshSig$();\n\nimport moment from 'moment';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport SemanticDatepicker from 'react-semantic-ui-datepickers';\nimport { Button, Form, Message, Input } from 'semantic-ui-react';\nimport { getTaskByTeacher, taskSlice, updateTask } from '../../redux/slices/Task';\nimport FileUploadEdit from '../../utlis/FileUploadEdit';\nimport * as Yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function FormTask({\n  task\n}) {\n  _s();\n\n  const [Images, setImages] = useState([]);\n  const [enableUpload, setEnableUpload] = useState(false);\n\n  const updateImages = newImages => {\n    if (newImages === null) {\n      task.listQuestion.forEach(element => {\n        setImages(element);\n      });\n    } else {\n      setImages(newImages);\n    }\n  };\n\n  const [taskEdit, setTaskEdit] = useState(task);\n  const dispatch = useDispatch();\n\n  const handleUpdate = e => {\n    e.preventDefault(); //  setTaskEdit(taskEdit.listQuestion = Images)\n\n    setEnableUpload(true);\n    console.log(Images);\n    console.log(taskEdit.listQuestion);\n    dispatch(updateTask(taskEdit)).then(() => {\n      dispatch(getTaskByTeacher({\n        \"idUser\": taskEdit.creator,\n        \"idClass\": taskEdit.cour\n      }));\n    });\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      title: task.title,\n      description: task.description,\n      theme: task.theme,\n      cour: task.cour,\n      typeTask: task.typeTask,\n      listQuestion: [],\n      listStudents: task.listStudents,\n      endDate: task.endDate,\n      creator: task.creator\n      /*   Title: qes.Title,\r\n         Body: qes.Body,\r\n         Writerq: { _id: \"\"+documentData._id },\r\n         Filee: [],*/\n\n    },\n    validationSchema: yupSchema,\n    onSubmit: async values => {\n      try {\n        if (Images.length !== 0) {\n          values.listQuestion = Images;\n          alert(\"images : here : \" + values.listQuestion);\n        } else {\n          values.listQuestion = task.listQuestion;\n        }\n\n        setEnableUpload(true);\n        dispatch(updateTask(values)).then(() => {\n          dispatch(getTaskByTeacher({\n            \"idUser\": taskEdit.creator,\n            \"idClass\": taskEdit.cour\n          }));\n        });\n      } catch (error) {\n        alert(error);\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: formik.handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Form.Field, {\n        control: Input,\n        label: \"Titre\",\n        type: \"text\",\n        name: \"title\",\n        maxLength: \"40\",\n        required: true,\n        onChange: formik.handleChange,\n        value: formik.values.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.TextArea, {\n        label: \"Description\",\n        type: \"TextArea\",\n        name: \"description\",\n        maxLength: \"5000\",\n        required: true,\n        onChange: formik.handleChange,\n        value: formik.values.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FileUploadEdit, {\n        refreshFunction: updateImages,\n        listfile: task.listQuestion,\n        Enbale: enableUpload\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 22\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 14\n    }, this), /*#__PURE__*/_jsxDEV(Message, {\n      success: true,\n      color: \"green\",\n      header: \"Nice one! \\uD83D\\uDCD2 \\uD83D\\uDCD5 \\uD83D\\uDCDA \\uD83D\\uDCD6\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Message, {\n      warning: true,\n      color: \"yellow\",\n      header: \"Woah! \\uD83D\\uDE31 \\uD83D\\uDE28\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      color: \"green\",\n      floated: \"right\",\n      children: \"Save\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n}\n\n_s(FormTask, \"ZpLsBEBQqHhXapCLrAGXBHDL9Yg=\", false, function () {\n  return [useDispatch, useFormik];\n});\n\n_c = FormTask;\nconst yupSchema = Yup.object({\n  Body: Yup.string().required(\"Champs requis!\")\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"FormTask\");","map":{"version":3,"sources":["C:/Smart-Virtual-Classroom/client/src/Components/Task/FormTask.js"],"names":["moment","React","useEffect","useState","useDispatch","useSelector","SemanticDatepicker","Button","Form","Message","Input","getTaskByTeacher","taskSlice","updateTask","FileUploadEdit","Yup","useFormik","FormTask","task","Images","setImages","enableUpload","setEnableUpload","updateImages","newImages","listQuestion","forEach","element","taskEdit","setTaskEdit","dispatch","handleUpdate","e","preventDefault","console","log","then","creator","cour","formik","initialValues","title","description","theme","typeTask","listStudents","endDate","validationSchema","yupSchema","onSubmit","values","length","alert","error","handleSubmit","handleChange","object","Body","string","required"],"mappings":"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","sourcesContent":["import moment from 'moment';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport SemanticDatepicker from 'react-semantic-ui-datepickers';\r\nimport { Button, Form, Message ,Input} from 'semantic-ui-react';\r\nimport { getTaskByTeacher, taskSlice, updateTask } from '../../redux/slices/Task';\r\nimport FileUploadEdit from '../../utlis/FileUploadEdit';\r\nimport * as Yup from \"yup\";\r\nimport { useFormik } from \"formik\";\r\nexport default function FormTask({task}) {\r\n\r\n  const [Images, setImages] = useState([]);\r\n  const [enableUpload, setEnableUpload] = useState(false);\r\n\r\n  const updateImages = (newImages) => {\r\n    if (newImages === null) {\r\n      task.listQuestion.forEach((element) => {\r\n        setImages(element);\r\n      });\r\n    } else {\r\n     \r\n     \r\n      setImages(newImages);\r\n    }\r\n  };\r\n    const [taskEdit , setTaskEdit] = useState(task);\r\n    \r\n\r\n    const  dispatch = useDispatch();\r\n   \r\n    const handleUpdate = (e) =>{\r\n        e.preventDefault();\r\n      //  setTaskEdit(taskEdit.listQuestion = Images)\r\n        setEnableUpload(true)\r\n       console.log(Images);\r\n        console.log(taskEdit.listQuestion);\r\n        dispatch(updateTask(taskEdit)).then(()=>{\r\n            dispatch(getTaskByTeacher({\"idUser\":taskEdit.creator,\"idClass\":taskEdit.cour}))\r\n        });\r\n    }\r\n    const formik = useFormik({\r\n      initialValues: {\r\n        title: task.title,\r\n        description: task.description,\r\n        theme: task.theme,\r\n        cour : task.cour,\r\n        typeTask: task.typeTask,\r\n        listQuestion: [],\r\n        listStudents: task.listStudents,\r\n        endDate: task.endDate,\r\n        creator: task.creator,\r\n      \r\n     /*   Title: qes.Title,\r\n        Body: qes.Body,\r\n        Writerq: { _id: \"\"+documentData._id },\r\n        Filee: [],*/\r\n      },\r\n      validationSchema: yupSchema,\r\n  \r\n      onSubmit: async (values) => {\r\n        try {\r\n          \r\n          if(Images.length !==0 )\r\n         { values.listQuestion = Images;\r\n          alert(\"images : here : \"+values.listQuestion);\r\n        }\r\n        else{\r\n          values.listQuestion = task.listQuestion;\r\n        }\r\n        setEnableUpload(true)\r\n        dispatch(updateTask(values)).then(()=>{\r\n          dispatch(getTaskByTeacher({\"idUser\":taskEdit.creator,\"idClass\":taskEdit.cour}))\r\n      });\r\n        } catch (error) {\r\n          alert(error);\r\n        }\r\n      },\r\n    });\r\n    return (\r\n        <div>\r\n             <Form  onSubmit={formik.handleSubmit}>\r\n        <Form.Field\r\n        control={Input}\r\n          label=\"Titre\"\r\n          type=\"text\"\r\n          \r\n          name=\"title\"\r\n          maxLength=\"40\"\r\n          \r\n          required\r\n      \r\n          onChange={\r\n            formik.handleChange}\r\n            value={formik.values.title}\r\n        />\r\n        <Form.TextArea\r\n          label=\"Description\"\r\n          type=\"TextArea\"\r\n       \r\n          name=\"description\"\r\n          maxLength=\"5000\"\r\n          required\r\n        \r\n          onChange={\r\n            formik.handleChange}\r\n            value={formik.values.description}\r\n        />\r\n         \r\n                 \r\n                     <FileUploadEdit\r\n          refreshFunction={updateImages}\r\n            listfile={task.listQuestion}  \r\n            Enbale={enableUpload}\r\n          />\r\n           </Form>\r\n        <Message\r\n          success\r\n          color=\"green\"\r\n          header=\"Nice one! 📒 📕 📚 📖\"\r\n            \r\n        />\r\n        <Message\r\n          warning\r\n          color=\"yellow\"\r\n          header=\"Woah! 😱 😨\"\r\n        \r\n        />\r\n        <Button color=\"green\" floated=\"right\">\r\n          Save\r\n        </Button>\r\n        <br /> {/* Yikes! Deal with Semantic UI React! */}\r\n     \r\n        </div>\r\n    )\r\n}\r\nconst yupSchema = Yup.object({\r\n  Body: Yup.string().required(\"Champs requis!\"),\r\n});"]},"metadata":{},"sourceType":"module"}