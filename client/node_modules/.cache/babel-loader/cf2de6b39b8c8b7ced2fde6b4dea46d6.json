{"ast":null,"code":"var _jsxFileName = \"C:\\\\Smart-Virtual-Classroom\\\\client\\\\src\\\\Components\\\\Task\\\\ModalTask.js\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport React, { useState } from \"react\";\nimport Dropzone from \"react-dropzone-uploader\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Button, Dropdown, Feed, Form, Grid, Header, Icon, Image, List, Modal } from \"semantic-ui-react\";\nimport * as Yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport FileUploadEdit from \"../../utlis/FileUploadEdit\";\nimport { isAuth } from \"../../helpers/auth\";\nimport { getDetailByTaskByStudent, rendreTask } from \"../../redux/slices/Grade\";\nimport { UpdateProfilePicture } from \"../../redux/slices/User\";\nimport FileUpload from \"../../utlis/FileUpload\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ModalTask({\n  task\n}) {\n  _s();\n\n  const [open, setOpen] = useState(false);\n  const dispatch = useDispatch();\n  const [Images, setImages] = useState([]);\n  const [enableUpload, setEnableUpload] = useState(false);\n\n  const updateImages = newImages => {\n    if (newImages === null) {\n      task.listReponse.forEach(element => {\n        setImages(element);\n      });\n    } else {\n      setImages(Images.concat(newImages));\n    }\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      _id: task._id,\n      grade: task.grade,\n      taskStatus: \"Remis\",\n      student: task.student,\n      task: task.task,\n      listReponse: []\n    },\n    onSubmit: async values => {\n      try {\n        console.log(\"cc\");\n        console.log(Images);\n\n        if (Images.length !== 0) {\n          values.listReponse = Images;\n          alert(\"images : here : \" + values.listReponse);\n        } else {\n          values.listReponse = task.listReponse;\n        }\n\n        setEnableUpload(true);\n        console.log(values);\n        const res = await dispatch(rendreTask(values)).then(() => {\n          dispatch(getDetailByTaskByStudent(task._id));\n          setEnableUpload(false);\n        });\n      } catch (error) {\n        alert(error);\n      }\n    }\n  });\n\n  const closeModel = () => {\n    setOpen(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Modal, {\n      onClose: () => setOpen(false),\n      onOpen: () => setOpen(true),\n      open: open,\n      trigger: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ui two buttons\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          icon: \"cloud upload\",\n          children: [/*#__PURE__*/_jsxDEV(Icon, {\n            name: \"cloud upload\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this), \"upload File\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this),\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        children: \"Select a Photo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Content, {\n        children: /*#__PURE__*/_jsxDEV(Modal.Description, {\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            onSubmit: formik.handleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              color: \"green\",\n              floated: \"right\",\n              children: \"Save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 13\n            }, this), task.listReponse ? /*#__PURE__*/_jsxDEV(FileUploadEdit, {\n              refreshFunction: updateImages,\n              listfile: task.listReponse,\n              Enbale: enableUpload\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 5\n            }, this) : /*#__PURE__*/_jsxDEV(FileUpload, {\n              refreshFunction: updateImages,\n              listfile: null,\n              Enbale: enableUpload\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Actions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          color: \"black\",\n          onClick: () => setOpen(false),\n          children: \"Discard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          content: \"Yep, Save\",\n          labelPosition: \"right\",\n          icon: \"checkmark\",\n          onClick: closeModel,\n          color: \"red\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 14\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 1\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ModalTask, \"yjVhjWN9w1Lre/W5FOG5fm3CAoo=\", false, function () {\n  return [useDispatch, useFormik];\n});\n\n_c = ModalTask;\n\nvar _c;\n\n$RefreshReg$(_c, \"ModalTask\");","map":{"version":3,"sources":["C:/Smart-Virtual-Classroom/client/src/Components/Task/ModalTask.js"],"names":["axios","React","useState","Dropzone","useDispatch","useSelector","Button","Dropdown","Feed","Form","Grid","Header","Icon","Image","List","Modal","Yup","useFormik","FileUploadEdit","isAuth","getDetailByTaskByStudent","rendreTask","UpdateProfilePicture","FileUpload","ModalTask","task","open","setOpen","dispatch","Images","setImages","enableUpload","setEnableUpload","updateImages","newImages","listReponse","forEach","element","concat","formik","initialValues","_id","grade","taskStatus","student","onSubmit","values","console","log","length","alert","res","then","error","closeModel","handleSubmit"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SACEC,MADF,EAEEC,QAFF,EAGEC,IAHF,EAIEC,IAJF,EAKEC,IALF,EAMEC,MANF,EAOEC,IAPF,EAQEC,KARF,EASEC,IATF,EAUEC,KAVF,QAWO,mBAXP;AAYA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,SAAT,QAA0B,QAA1B;AACA,OAAOC,cAAP,MAA2B,4BAA3B;AACA,SAASC,MAAT,QAAuB,oBAAvB;AACA,SAAUC,wBAAV,EAAoCC,UAApC,QAAsD,0BAAtD;AACA,SAASC,oBAAT,QAAqC,yBAArC;AACA,OAAOC,UAAP,MAAuB,wBAAvB;;AAEA,eAAe,SAASC,SAAT,CAAmB;AAACC,EAAAA;AAAD,CAAnB,EAA2B;AAAA;;AAGxC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBzB,QAAQ,CAAC,KAAD,CAAhC;AAEA,QAAM0B,QAAQ,GAAGxB,WAAW,EAA5B;AAEA,QAAM,CAACyB,MAAD,EAASC,SAAT,IAAsB5B,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAAC6B,YAAD,EAAeC,eAAf,IAAkC9B,QAAQ,CAAC,KAAD,CAAhD;;AAIA,QAAM+B,YAAY,GAAIC,SAAD,IAAe;AAClC,QAAIA,SAAS,KAAK,IAAlB,EAAwB;AACtBT,MAAAA,IAAI,CAACU,WAAL,CAAiBC,OAAjB,CAA0BC,OAAD,IAAa;AACpCP,QAAAA,SAAS,CAACO,OAAD,CAAT;AAED,OAHD;AAID,KALD,MAKO;AACLP,MAAAA,SAAS,CAACD,MAAM,CAACS,MAAP,CAAcJ,SAAd,CAAD,CAAT;AACD;AACF,GATD;;AAcE,QAAMK,MAAM,GAAGtB,SAAS,CAAC;AACvBuB,IAAAA,aAAa,EAAE;AACbC,MAAAA,GAAG,EAAGhB,IAAI,CAACgB,GADE;AAEbC,MAAAA,KAAK,EAAEjB,IAAI,CAACiB,KAFC;AAGbC,MAAAA,UAAU,EAAE,OAHC;AAIfC,MAAAA,OAAO,EAAGnB,IAAI,CAACmB,OAJA;AAKdnB,MAAAA,IAAI,EAAEA,IAAI,CAACA,IALG;AAMbU,MAAAA,WAAW,EAAE;AANA,KADQ;AAavBU,IAAAA,QAAQ,EAAE,MAAOC,MAAP,IAAkB;AAE1B,UAAI;AACFC,QAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAYnB,MAAZ;;AACA,YAAGA,MAAM,CAACoB,MAAP,KAAiB,CAApB,EACD;AAAEH,UAAAA,MAAM,CAACX,WAAP,GAAqBN,MAArB;AACDqB,UAAAA,KAAK,CAAC,qBAAmBJ,MAAM,CAACX,WAA3B,CAAL;AACD,SAHC,MAIE;AACFW,UAAAA,MAAM,CAACX,WAAP,GAAqBV,IAAI,CAACU,WAA1B;AACD;;AACDH,QAAAA,eAAe,CAAC,IAAD,CAAf;AACAe,QAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,cAAMK,GAAG,GAAG,MAAMvB,QAAQ,CAACP,UAAU,CAACyB,MAAD,CAAX,CAAR,CAA6BM,IAA7B,CAAkC,MAAI;AACtDxB,UAAAA,QAAQ,CAACR,wBAAwB,CAACK,IAAI,CAACgB,GAAN,CAAzB,CAAR;AAEAT,UAAAA,eAAe,CAAC,KAAD,CAAf;AACD,SAJiB,CAAlB;AAKC,OAjBD,CAiBE,OAAOqB,KAAP,EAAc;AACdH,QAAAA,KAAK,CAACG,KAAD,CAAL;AACD;AACF;AAnCsB,GAAD,CAAxB;;AAqCF,QAAMC,UAAU,GAAG,MAAM;AAIvB3B,IAAAA,OAAO,CAAC,KAAD,CAAP;AACD,GALD;;AASA,sBACE;AAAA,2BAIJ,QAAC,KAAD;AACQ,MAAA,OAAO,EAAE,MAAMA,OAAO,CAAC,KAAD,CAD9B;AAEQ,MAAA,MAAM,EAAE,MAAMA,OAAO,CAAC,IAAD,CAF7B;AAGQ,MAAA,IAAI,EAAED,IAHd;AAIQ,MAAA,OAAO,eACL;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA,+BACA,QAAC,MAAD;AACA,UAAA,IAAI,EAAC,cADL;AAAA,kCAGE,QAAC,IAAD;AAAM,YAAA,IAAI,EAAC;AAAX;AAAA;AAAA;AAAA;AAAA,kBAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,cALV;AAAA,8BAgBQ,QAAC,KAAD,CAAO,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAhBR,eAiBQ,QAAC,KAAD,CAAO,OAAP;AAAA,+BACE,QAAC,KAAD,CAAO,WAAP;AAAA,iCACA,QAAC,IAAD;AAAO,YAAA,QAAQ,EAAEa,MAAM,CAACgB,YAAxB;AAAA,oCAME,QAAC,MAAD;AAAQ,cAAA,IAAI,EAAC,QAAb;AAAsB,cAAA,KAAK,EAAC,OAA5B;AAAoC,cAAA,OAAO,EAAC,OAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBANF,EASA9B,IAAI,CAACU,WAAL,gBACN,QAAC,cAAD;AACA,cAAA,eAAe,EAAEF,YADjB;AAEA,cAAA,QAAQ,EAAGR,IAAI,CAACU,WAFhB;AAGA,cAAA,MAAM,EAAEJ;AAHR;AAAA;AAAA;AAAA;AAAA,oBADM,gBASA,QAAC,UAAD;AACA,cAAA,eAAe,EAAEE,YADjB;AAEA,cAAA,QAAQ,EAAG,IAFX;AAGA,cAAA,MAAM,EAAEF;AAHR;AAAA;AAAA;AAAA;AAAA,oBAlBA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAjBR,eA+CQ,QAAC,KAAD,CAAO,OAAP;AAAA,gCACE,QAAC,MAAD;AAAQ,UAAA,KAAK,EAAC,OAAd;AAAsB,UAAA,OAAO,EAAE,MAAMJ,OAAO,CAAC,KAAD,CAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE,QAAC,MAAD;AACE,UAAA,OAAO,EAAC,WADV;AAEE,UAAA,aAAa,EAAC,OAFhB;AAGE,UAAA,IAAI,EAAC,WAHP;AAIE,UAAA,OAAO,EAAE2B,UAJX;AAKE,UAAA,KAAK,EAAC;AALR;AAAA;AAAA;AAAA;AAAA,gBAJF,eAWK;AAAA;AAAA;AAAA;AAAA,gBAXL;AAAA;AAAA;AAAA;AAAA;AAAA,cA/CR;AAAA;AAAA;AAAA;AAAA;AAAA;AAJI;AAAA;AAAA;AAAA;AAAA,UADF;AA0ED;;GAlJuB9B,S;UAKLpB,W,EAqBAa,S;;;KA1BKO,S","sourcesContent":["import axios from \"axios\";\nimport React, { useState } from \"react\";\nimport Dropzone from \"react-dropzone-uploader\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  Button,\n  Dropdown,\n  Feed,\n  Form,\n  Grid,\n  Header,\n  Icon,\n  Image,\n  List,\n  Modal,\n} from \"semantic-ui-react\";\nimport * as Yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport FileUploadEdit from \"../../utlis/FileUploadEdit\";\nimport { isAuth } from \"../../helpers/auth\";\nimport {  getDetailByTaskByStudent, rendreTask } from \"../../redux/slices/Grade\";\nimport { UpdateProfilePicture } from \"../../redux/slices/User\";\nimport FileUpload from \"../../utlis/FileUpload\";\n\nexport default function ModalTask({task}) {\n  \n\n  const [open, setOpen] = useState(false);\n\n  const dispatch = useDispatch();\n\n  const [Images, setImages] = useState([]);\n  const [enableUpload, setEnableUpload] = useState(false);\n\n  \n\n  const updateImages = (newImages) => {\n    if (newImages === null) {\n      task.listReponse.forEach((element) => {\n        setImages(element);\n        \n      });\n    } else {\n      setImages(Images.concat(newImages));\n    }\n  };\n\n    \n\n\n    const formik = useFormik({\n      initialValues: {\n        _id : task._id,\n        grade: task.grade,\n        taskStatus: \"Remis\",\n      student : task.student,\n       task: task.task,\n        listReponse: [],\n      \n\n      },\n  \n  \n      onSubmit: async (values) => {\n       \n        try {\n          console.log(\"cc\");\n          console.log(Images);\n          if(Images.length !==0 )\n         { values.listReponse = Images;\n          alert(\"images : here : \"+values.listReponse);\n        }\n        else{\n          values.listReponse = task.listReponse;\n        }\n        setEnableUpload(true)\n        console.log(values);\n        const res = await dispatch(rendreTask(values)).then(()=>{\n          dispatch(getDetailByTaskByStudent(task._id))\n\n          setEnableUpload(false)\n        });\n        } catch (error) {\n          alert(error);\n        }\n      },\n    });\n  const closeModel = () => {\n  \n   \n   \n    setOpen(false);\n  };\n\n\n\n  return (\n    <div>\n     \n\n    \n<Modal\n        onClose={() => setOpen(false)}\n        onOpen={() => setOpen(true)}\n        open={open}\n        trigger={\n          <div className='ui two buttons'>\n          <Button \n          icon=\"cloud upload\"\n          >\n            <Icon name=\"cloud upload\"></Icon>\n              upload File\n            </Button>\n            </div>\n         \n        }\n      >\n        <Modal.Header>Select a Photo</Modal.Header>\n        <Modal.Content>\n          <Modal.Description>\n          <Form  onSubmit={formik.handleSubmit}>\n      \n\n         \n                 \n          \n            <Button type=\"submit\" color=\"green\" floated=\"right\">\n          Save\n        </Button>\n        { task.listReponse ? ( \n    <FileUploadEdit\n    refreshFunction={updateImages}\n    listfile={ task.listReponse}  \n    Enbale={enableUpload}\n  />\n\n        ) : (\n\n          <FileUpload\n          refreshFunction={updateImages}\n          listfile={ null}  \n          Enbale={enableUpload}\n        />\n        )}\n      \n</Form>\n          </Modal.Description>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button color=\"black\" onClick={() => setOpen(false)}>\n            Discard\n          </Button>\n          <Button\n            content=\"Yep, Save\"\n            labelPosition=\"right\"\n            icon=\"checkmark\"\n            onClick={closeModel}\n            color=\"red\"\n          />\n             <br></br>\n        \n        </Modal.Actions>\n     \n      </Modal>\n   \n      \n\n\n    </div>\n  );\n}\n\n\n"]},"metadata":{},"sourceType":"module"}