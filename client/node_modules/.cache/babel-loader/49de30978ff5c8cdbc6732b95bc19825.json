{"ast":null,"code":"var _jsxFileName = \"C:\\\\Smart-Virtual-Classroom\\\\client\\\\src\\\\Components\\\\Task\\\\ModalTaskFile.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Multiselect } from \"multiselect-react-dropdown\";\nimport Select from \"react-select\";\nimport SemanticDatepicker from \"react-semantic-ui-datepickers\";\nimport { Dropdown, Button, Form, Grid, Rail, Segment, TextArea, Label, Modal, Confirm, Header, Message } from \"semantic-ui-react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { isAuth } from \"../../helpers/auth\";\nimport FileUpload from \"../../utlis/FileUpload\";\nimport { assignTask, getTaskByTeacher, postTasks } from \"../../redux/slices/Task\";\nimport { AddquestionsApi } from \"../../api/api\";\nimport { addQuestion } from \"../../redux/slices/questionslice\";\nimport MultiSelect from \"react-multi-select-component\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ModalTaskFile(props) {\n  _s();\n\n  const currentClass = JSON.parse(localStorage.getItem(\"idClass\")); //const [classCurr , setClassCurr] = useState([]);\n  // setClassCurr(currentClass.classUsers)\n  //const currentClass = JSON.parse(localStorage.getItem(\"idClass\"));\n\n  const seances = useSelector(state => state.seance.seance);\n  const studentChosen = [];\n  const seanceChosen = [];\n  currentClass.classUsers.forEach(element => {\n    studentChosen.push({\n      label: element.name,\n      value: element._id\n    });\n  });\n  console.log(studentChosen);\n  seances.forEach(element => {\n    seanceChosen.push({\n      label: element.titre,\n      value: element\n    });\n  });\n  const [cancel, setCancel] = useState(false);\n  const [open, setOpen] = useState(false);\n  const [opensave, setOpensave] = useState(false);\n  const [close, setClose] = useState(false);\n  const [successMessage, SetSuccessMessage] = useState(\"\");\n  const [errorMessage, SetErrorMessage] = useState(\"\");\n  const [selectedSeance, setSelectedSeance] = useState(null);\n  const [openModel, setOpenModel] = useState(false);\n  const [selected, setSelected] = useState([]);\n  const [tasks, setTask] = useState({\n    title: \"\",\n    description: \"\",\n    theme: \"\",\n    cour: currentClass._id,\n    typeTask: \"File\",\n    listQuestion: [],\n    listStudents: [],\n    endDate: null,\n    creator: isAuth()._id\n  });\n  const taskDetail = {\n    \"idUser\": isAuth()._id,\n    \"idClass\": currentClass._id\n  };\n  const dispatch = useDispatch();\n\n  const clicCancel = () => {\n    setCancel(true);\n  };\n\n  const clicOpen = () => {\n    setOpen(true);\n  };\n\n  const clicOpensave = () => {\n    setOpensave(true);\n  };\n\n  const clicConfirmCancel = () => {\n    SetSuccessMessage(\"\");\n    setOpenModel(false);\n  };\n\n  const clicConfirm = () => {\n    setTask(currentClass.classUsers.forEach(itemselect => {\n      const index = selected.findIndex(item => item.value === itemselect._id);\n\n      if (index !== -1) {\n        tasks.listStudents.concat(itemselect);\n      }\n    }));\n    console.log(selectedSeance);\n    setTask(tasks.theme = selectedSeance.value); // setTask(...tasks.listStudents = listStud);\n\n    setTask(...(tasks.listQuestion = Images));\n    setEnableUpload(true);\n    dispatch(postTasks(tasks)).then(() => {\n      dispatch(getTaskByTeacher(taskDetail));\n      setEnableUpload(false);\n      SetSuccessMessage(\"Add Task successfully !\");\n      setOpenModel(false);\n    });\n    setOpensave(false);\n  };\n\n  const clicConfirmAssign = () => {\n    setTask(currentClass.classUsers.forEach(itemselect => {\n      const index = selected.findIndex(item => item.value === itemselect._id);\n\n      if (index !== -1) {\n        tasks.listStudents.push(itemselect); // tasks.listStudents.push(itemselect);\n      }\n    }));\n    setTask(tasks.theme = selectedSeance.value); // setTask(...tasks.listStudents = listStud);\n\n    setTask(...(tasks.listQuestion = Images));\n    setSelected([]);\n    setSelectedSeance(null);\n    setEnableUpload(true);\n    setOpen(false);\n    dispatch(assignTask(tasks)).then(() => {\n      setEnableUpload(false);\n      dispatch(getTaskByTeacher(taskDetail));\n      setTask({\n        title: \"\",\n        description: \"\",\n        theme: \"\",\n        cour: currentClass._id,\n        typeTask: \"File\",\n        listQuestion: [],\n        listStudents: [],\n        endDate: null,\n        creator: isAuth()._id\n      });\n      SetSuccessMessage(\"Assgin Task successfully !\");\n    });\n  };\n\n  const clicClose = () => {\n    setOpen(false); // setOpenModel(false);\n  };\n\n  const clicClosesave = () => {\n    setOpensave(false); // setOpenModel(false);\n  };\n\n  const clicCloseCancel = () => {\n    setCancel(false); // setOpenModel(false);\n  };\n\n  const [enableUpload, setEnableUpload] = useState(false);\n  const [Images, setImages] = useState([]);\n\n  const updateImages = newImages => {\n    setImages(newImages);\n  };\n\n  const handleOpen = () => {\n    setOpenModel(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Modal, {\n      trigger: /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n        onClick: handleOpen,\n        icon: \"file text\",\n        text: \"Add Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 18\n      }, this),\n      dimmer: \"inverted\",\n      size: \"tiny\",\n      closeIcon: \"close\",\n      open: openModel,\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        children: props.headerTitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Content, {\n        children: [successMessage ? /*#__PURE__*/_jsxDEV(Message, {\n          success: true,\n          color: \"green\",\n          header: \"Nice one! \\uD83D\\uDCD2 \\uD83D\\uDCD5 \\uD83D\\uDCDA \\uD83D\\uDCD6\",\n          content: successMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 30\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), errorMessage ? /*#__PURE__*/_jsxDEV(Message, {\n          warning: true,\n          color: \"yellow\",\n          header: \"Woah! \\uD83D\\uDE31 \\uD83D\\uDE28\",\n          content: errorMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(Grid, {\n          children: /*#__PURE__*/_jsxDEV(Grid.Row, {\n            children: [/*#__PURE__*/_jsxDEV(Grid.Column, {\n              width: 10,\n              children: /*#__PURE__*/_jsxDEV(Form, {\n                children: [/*#__PURE__*/_jsxDEV(Form.Field, {\n                  children: /*#__PURE__*/_jsxDEV(Form.Input, {\n                    label: \"Title\",\n                    required: true,\n                    value: tasks.title,\n                    onChange: e => setTask({ ...tasks,\n                      title: e.target.value\n                    }),\n                    placeholder: \"Title\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 243,\n                    columnNumber: 19\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 242,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n                  required: true,\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    children: \"Description\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 254,\n                    columnNumber: 19\n                  }, this), /*#__PURE__*/_jsxDEV(TextArea, {\n                    required: true,\n                    label: \"Description\",\n                    value: tasks.description,\n                    onChange: e => setTask({ ...tasks,\n                      description: e.target.value\n                    }),\n                    placeholder: \"Description..\",\n                    style: {\n                      minHeight: 50\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 255,\n                    columnNumber: 19\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 253,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    children: \"Due\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 267,\n                    columnNumber: 19\n                  }, this), /*#__PURE__*/_jsxDEV(SemanticDatepicker, {\n                    onChange: (e, data) => setTask({ ...tasks,\n                      endDate: data.value\n                    }),\n                    value: tasks.endDate\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 268,\n                    columnNumber: 19\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 266,\n                  columnNumber: 17\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 241,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Grid.Column, {\n              width: 6,\n              children: [/*#__PURE__*/_jsxDEV(Header, {\n                as: \"h5\",\n                icon: \"check square outline\",\n                content: \"Choose Theme  \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 278,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                options: seanceChosen,\n                value: selectedSeance,\n                onChange: setSelectedSeance\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 283,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(Header, {\n                as: \"h5\",\n                icon: \"check square outline\",\n                content: \" For Student  \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 290,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(MultiSelect, {\n                options: studentChosen,\n                value: selected,\n                onChange: setSelected,\n                labelledBy: \"Select\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 297,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(FileUpload, {\n          refreshFunction: updateImages,\n          listfile: null,\n          Enbale: enableUpload\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Actions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          color: \"black\",\n          floated: \"right\",\n          onClick: clicConfirmCancel,\n          children: \"Back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          color: \"red\",\n          type: \"submit\",\n          onClick: () => clicOpensave() //onClick={onSubmitSaveTask}\n          ,\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Confirm, {\n          size: \"tiny\",\n          header: \"Save Task To Assign\",\n          content: \"Are you sure?\",\n          open: opensave,\n          onCancel: clicClosesave,\n          onConfirm: clicConfirm\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          color: \"red\",\n          type: \"submit\" // onClick={onSubmitAssignTask}\n          ,\n          onClick: () => clicOpen(),\n          children: \"Assign\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Confirm, {\n          size: \"tiny\",\n          header: \"Assign Task To Student\",\n          content: \"Are you sure?\",\n          open: open,\n          onCancel: clicClose,\n          onConfirm: clicConfirmAssign\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 16\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 210,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ModalTaskFile, \"PBtLxtZsisqiHJ8aGtnsHY2yH6E=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = ModalTaskFile;\n\nvar _c;\n\n$RefreshReg$(_c, \"ModalTaskFile\");","map":{"version":3,"sources":["C:/Smart-Virtual-Classroom/client/src/Components/Task/ModalTaskFile.js"],"names":["React","useEffect","useState","Multiselect","Select","SemanticDatepicker","Dropdown","Button","Form","Grid","Rail","Segment","TextArea","Label","Modal","Confirm","Header","Message","useDispatch","useSelector","isAuth","FileUpload","assignTask","getTaskByTeacher","postTasks","AddquestionsApi","addQuestion","MultiSelect","ModalTaskFile","props","currentClass","JSON","parse","localStorage","getItem","seances","state","seance","studentChosen","seanceChosen","classUsers","forEach","element","push","label","name","value","_id","console","log","titre","cancel","setCancel","open","setOpen","opensave","setOpensave","close","setClose","successMessage","SetSuccessMessage","errorMessage","SetErrorMessage","selectedSeance","setSelectedSeance","openModel","setOpenModel","selected","setSelected","tasks","setTask","title","description","theme","cour","typeTask","listQuestion","listStudents","endDate","creator","taskDetail","dispatch","clicCancel","clicOpen","clicOpensave","clicConfirmCancel","clicConfirm","itemselect","index","findIndex","item","concat","Images","setEnableUpload","then","clicConfirmAssign","clicClose","clicClosesave","clicCloseCancel","enableUpload","setImages","updateImages","newImages","handleOpen","headerTitle","e","target","minHeight","data"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,SAASC,WAAT,QAA4B,4BAA5B;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,kBAAP,MAA+B,+BAA/B;AAEA,SACEC,QADF,EAEEC,MAFF,EAGEC,IAHF,EAIEC,IAJF,EAKEC,IALF,EAMEC,OANF,EAOEC,QAPF,EAQEC,KARF,EASEC,KATF,EAUEC,OAVF,EAWEC,MAXF,EAYEC,OAZF,QAaO,mBAbP;AAcA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,MAAT,QAAuB,oBAAvB;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,SAASC,UAAT,EAAqBC,gBAArB,EAAuCC,SAAvC,QAAwD,yBAAxD;AACA,SAASC,eAAT,QAAgC,eAAhC;AACA,SAASC,WAAT,QAA4B,kCAA5B;AACA,OAAOC,WAAP,MAAwB,8BAAxB;;;AAIA,eAAe,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAAA;;AAE3C,QAAMC,YAAY,GAAEC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAX,CAApB,CAF2C,CAIzC;AACD;AACD;;AACA,QAAMC,OAAO,GAAGhB,WAAW,CAAEiB,KAAD,IAAWA,KAAK,CAACC,MAAN,CAAaA,MAAzB,CAA3B;AACA,QAAMC,aAAa,GAAG,EAAtB;AACA,QAAMC,YAAY,GAAG,EAArB;AAEAT,EAAAA,YAAY,CAACU,UAAb,CAAwBC,OAAxB,CAAiCC,OAAD,IAAa;AAC3CJ,IAAAA,aAAa,CAACK,IAAd,CAAmB;AAAEC,MAAAA,KAAK,EAAEF,OAAO,CAACG,IAAjB;AAAuBC,MAAAA,KAAK,EAAEJ,OAAO,CAACK;AAAtC,KAAnB;AACD,GAFD;AAGAC,EAAAA,OAAO,CAACC,GAAR,CAAYX,aAAZ;AACAH,EAAAA,OAAO,CAACM,OAAR,CAAiBC,OAAD,IAAa;AAC3BH,IAAAA,YAAY,CAACI,IAAb,CAAkB;AAAEC,MAAAA,KAAK,EAAEF,OAAO,CAACQ,KAAjB;AAAwBJ,MAAAA,KAAK,EAAEJ;AAA/B,KAAlB;AACD,GAFD;AAGE,QAAM,CAACS,MAAD,EAASC,SAAT,IAAsBlD,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACmD,IAAD,EAAOC,OAAP,IAAkBpD,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAM,CAACqD,QAAD,EAAWC,WAAX,IAA0BtD,QAAQ,CAAC,KAAD,CAAxC;AAEA,QAAM,CAACuD,KAAD,EAAQC,QAAR,IAAoBxD,QAAQ,CAAC,KAAD,CAAlC;AAEA,QAAM,CAACyD,cAAD,EAAiBC,iBAAjB,IAAsC1D,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAAC2D,YAAD,EAAeC,eAAf,IAAkC5D,QAAQ,CAAC,EAAD,CAAhD;AAEA,QAAM,CAAC6D,cAAD,EAAiBC,iBAAjB,IAAsC9D,QAAQ,CAAC,IAAD,CAApD;AACA,QAAM,CAAC+D,SAAD,EAAYC,YAAZ,IAA4BhE,QAAQ,CAAC,KAAD,CAA1C;AAEA,QAAM,CAACiE,QAAD,EAAWC,WAAX,IAA0BlE,QAAQ,CAAC,EAAD,CAAxC;AAEA,QAAM,CAACmE,KAAD,EAASC,OAAT,IAAoBpE,QAAQ,CAAC;AAE/BqE,IAAAA,KAAK,EAAG,EAFuB;AAG/BC,IAAAA,WAAW,EAAG,EAHiB;AAI/BC,IAAAA,KAAK,EAAG,EAJuB;AAK/BC,IAAAA,IAAI,EAAG5C,YAAY,CAACiB,GALW;AAM/B4B,IAAAA,QAAQ,EAAG,MANoB;AAQ/BC,IAAAA,YAAY,EAAG,EARgB;AAS/BC,IAAAA,YAAY,EAAG,EATgB;AAU/BC,IAAAA,OAAO,EAAG,IAVqB;AAW/BC,IAAAA,OAAO,EAAG3D,MAAM,GAAG2B;AAXY,GAAD,CAAlC;AAeA,QAAMiC,UAAU,GAAC;AACf,cAAS5D,MAAM,GAAG2B,GADH;AAEf,eAAYjB,YAAY,CAACiB;AAFV,GAAjB;AAMA,QAAOkC,QAAQ,GAAG/D,WAAW,EAA7B;;AACA,QAAMgE,UAAU,GAAG,MAAM;AACvB9B,IAAAA,SAAS,CAAC,IAAD,CAAT;AACD,GAFD;;AAGA,QAAM+B,QAAQ,GAAG,MAAM;AACrB7B,IAAAA,OAAO,CAAC,IAAD,CAAP;AACD,GAFD;;AAGA,QAAM8B,YAAY,GAAG,MAAM;AACzB5B,IAAAA,WAAW,CAAC,IAAD,CAAX;AACD,GAFD;;AAGA,QAAM6B,iBAAiB,GAAG,MAAM;AAE9BzB,IAAAA,iBAAiB,CAAC,EAAD,CAAjB;AACDM,IAAAA,YAAY,CAAC,KAAD,CAAZ;AAEA,GALD;;AAMA,QAAMoB,WAAW,GAAG,MAAM;AAEzBhB,IAAAA,OAAO,CACJxC,YAAY,CAACU,UAAb,CAAwBC,OAAxB,CAAiC8C,UAAD,IAAgB;AAE9C,YAAMC,KAAK,GAAGrB,QAAQ,CAACsB,SAAT,CACXC,IAAD,IAAUA,IAAI,CAAC5C,KAAL,KAAeyC,UAAU,CAACxC,GADxB,CAAd;;AAGA,UAAIyC,KAAK,KAAK,CAAC,CAAf,EAAkB;AAGhBnB,QAAAA,KAAK,CAACQ,YAAN,CAAmBc,MAAnB,CAA0BJ,UAA1B;AACD;AAGF,KAZD,CADI,CAAP;AAeCvC,IAAAA,OAAO,CAACC,GAAR,CAAYc,cAAZ;AACAO,IAAAA,OAAO,CAACD,KAAK,CAACI,KAAN,GAAcV,cAAc,CAACjB,KAA9B,CAAP,CAlBwB,CAmBzB;;AACCwB,IAAAA,OAAO,CAAC,IAAGD,KAAK,CAACO,YAAN,GAAqBgB,MAAxB,CAAD,CAAP;AACAC,IAAAA,eAAe,CAAC,IAAD,CAAf;AACAZ,IAAAA,QAAQ,CAACzD,SAAS,CAAC6C,KAAD,CAAV,CAAR,CAA2ByB,IAA3B,CAAgC,MAAI;AAClCb,MAAAA,QAAQ,CAAC1D,gBAAgB,CAACyD,UAAD,CAAjB,CAAR;AACAa,MAAAA,eAAe,CAAC,KAAD,CAAf;AACAjC,MAAAA,iBAAiB,CAAC,yBAAD,CAAjB;AACAM,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KALD;AAMAV,IAAAA,WAAW,CAAC,KAAD,CAAX;AAGD,GA/BD;;AAiCA,QAAMuC,iBAAiB,GAAG,MAAM;AAC9BzB,IAAAA,OAAO,CACLxC,YAAY,CAACU,UAAb,CAAwBC,OAAxB,CAAiC8C,UAAD,IAAgB;AAE9C,YAAMC,KAAK,GAAGrB,QAAQ,CAACsB,SAAT,CACXC,IAAD,IAAUA,IAAI,CAAC5C,KAAL,KAAeyC,UAAU,CAACxC,GADxB,CAAd;;AAGA,UAAIyC,KAAK,KAAK,CAAC,CAAf,EAAkB;AAEhBnB,QAAAA,KAAK,CAACQ,YAAN,CAAmBlC,IAAnB,CAAwB4C,UAAxB,EAFgB,CAGjB;AACA;AAGF,KAZD,CADK,CAAP;AAeAjB,IAAAA,OAAO,CAACD,KAAK,CAACI,KAAN,GAAcV,cAAc,CAACjB,KAA9B,CAAP,CAhB8B,CAiB/B;;AACCwB,IAAAA,OAAO,CAAC,IAAGD,KAAK,CAACO,YAAN,GAAqBgB,MAAxB,CAAD,CAAP;AACAxB,IAAAA,WAAW,CAAC,EAAD,CAAX;AACAJ,IAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACA6B,IAAAA,eAAe,CAAC,IAAD,CAAf;AACAvC,IAAAA,OAAO,CAAC,KAAD,CAAP;AACA2B,IAAAA,QAAQ,CAAC3D,UAAU,CAAC+C,KAAD,CAAX,CAAR,CAA4ByB,IAA5B,CAAiC,MAAI;AACnCD,MAAAA,eAAe,CAAC,KAAD,CAAf;AACAZ,MAAAA,QAAQ,CAAC1D,gBAAgB,CAACyD,UAAD,CAAjB,CAAR;AAEAV,MAAAA,OAAO,CAAC;AAENC,QAAAA,KAAK,EAAG,EAFF;AAGNC,QAAAA,WAAW,EAAG,EAHR;AAINC,QAAAA,KAAK,EAAG,EAJF;AAKNC,QAAAA,IAAI,EAAG5C,YAAY,CAACiB,GALd;AAMN4B,QAAAA,QAAQ,EAAG,MANL;AAQNC,QAAAA,YAAY,EAAG,EART;AASNC,QAAAA,YAAY,EAAG,EATT;AAUNC,QAAAA,OAAO,EAAG,IAVJ;AAWNC,QAAAA,OAAO,EAAG3D,MAAM,GAAG2B;AAXb,OAAD,CAAP;AAcAa,MAAAA,iBAAiB,CAAC,4BAAD,CAAjB;AAGD,KArBD;AA0BD,GAjDD;;AAkDA,QAAMoC,SAAS,GAAG,MAAM;AACtB1C,IAAAA,OAAO,CAAC,KAAD,CAAP,CADsB,CAEvB;AACA,GAHD;;AAIA,QAAM2C,aAAa,GAAG,MAAM;AAC1BzC,IAAAA,WAAW,CAAC,KAAD,CAAX,CAD0B,CAE3B;AAEA,GAJD;;AAKA,QAAM0C,eAAe,GAAG,MAAM;AAC5B9C,IAAAA,SAAS,CAAC,KAAD,CAAT,CAD4B,CAE7B;AACA,GAHD;;AAME,QAAM,CAAC+C,YAAD,EAAeN,eAAf,IAAkC3F,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM,CAAC0F,MAAD,EAASQ,SAAT,IAAsBlG,QAAQ,CAAC,EAAD,CAApC;;AACA,QAAMmG,YAAY,GAAIC,SAAD,IAAe;AAElCF,IAAAA,SAAS,CAACE,SAAD,CAAT;AAGD,GALD;;AAMA,QAAMC,UAAU,GAAG,MAAI;AACrBrC,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAFD;;AAGF,sBACI;AAAA,2BACO,QAAC,KAAD;AACP,MAAA,OAAO,eAAE,QAAC,QAAD,CAAU,IAAV;AAAe,QAAA,OAAO,EAAEqC,UAAxB;AAAoC,QAAA,IAAI,EAAC,WAAzC;AAAqD,QAAA,IAAI,EAAC;AAA1D;AAAA;AAAA;AAAA;AAAA,cADF;AAEP,MAAA,MAAM,EAAC,UAFA;AAGP,MAAA,IAAI,EAAC,MAHE;AAIP,MAAA,SAAS,EAAC,OAJH;AAKP,MAAA,IAAI,EAAEtC,SALC;AAAA,8BAQP,QAAC,KAAD,CAAO,MAAP;AAAA,kBAAepC,KAAK,CAAC2E;AAArB;AAAA;AAAA;AAAA;AAAA,cARO,eASP,QAAC,KAAD,CAAO,OAAP;AAAA,mBACE7C,cAAc,gBAAK,QAAC,OAAD;AACnB,UAAA,OAAO,MADY;AAEnB,UAAA,KAAK,EAAC,OAFa;AAGnB,UAAA,MAAM,EAAC,+DAHY;AAIjB,UAAA,OAAO,EAAEA;AAJQ;AAAA;AAAA;AAAA;AAAA,gBAAL,gBAKT,qCANP,EAQAE,YAAY,gBACV,QAAC,OAAD;AACA,UAAA,OAAO,MADP;AAEA,UAAA,KAAK,EAAC,QAFN;AAGA,UAAA,MAAM,EAAC,iCAHP;AAIA,UAAA,OAAO,EAAEA;AAJT;AAAA;AAAA;AAAA;AAAA,gBADU,gBAQR,qCAhBJ,eAiBA,QAAC,IAAD;AAAA,iCACE,QAAC,IAAD,CAAM,GAAN;AAAA,oCAEE,QAAC,IAAD,CAAM,MAAN;AAAa,cAAA,KAAK,EAAE,EAApB;AAAA,qCACE,QAAC,IAAD;AAAA,wCACE,QAAC,IAAD,CAAM,KAAN;AAAA,yCACE,QAAC,IAAD,CAAM,KAAN;AACE,oBAAA,KAAK,EAAC,OADR;AAEE,oBAAA,QAAQ,MAFV;AAGE,oBAAA,KAAK,EAAEQ,KAAK,CAACE,KAHf;AAIE,oBAAA,QAAQ,EAAGkC,CAAD,IACRnC,OAAO,CAAC,EAAE,GAAGD,KAAL;AAAYE,sBAAAA,KAAK,EAAEkC,CAAC,CAACC,MAAF,CAAS5D;AAA5B,qBAAD,CALX;AAOE,oBAAA,WAAW,EAAC;AAPd;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,wBADF,eAYE,QAAC,IAAD,CAAM,KAAN;AAAY,kBAAA,QAAQ,MAApB;AAAA,0CACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,eAEE,QAAC,QAAD;AACA,oBAAA,QAAQ,MADR;AAEE,oBAAA,KAAK,EAAC,aAFR;AAGJ,oBAAA,KAAK,EAAEuB,KAAK,CAACG,WAHT;AAIE,oBAAA,QAAQ,EAAGiC,CAAD,IACRnC,OAAO,CAAC,EAAE,GAAGD,KAAL;AAAYG,sBAAAA,WAAW,EAAEiC,CAAC,CAACC,MAAF,CAAS5D;AAAlC,qBAAD,CALX;AAOE,oBAAA,WAAW,EAAC,eAPd;AAQE,oBAAA,KAAK,EAAE;AAAE6D,sBAAAA,SAAS,EAAE;AAAb;AART;AAAA;AAAA;AAAA;AAAA,0BAFF;AAAA;AAAA;AAAA;AAAA;AAAA,wBAZF,eAyBE,QAAC,IAAD,CAAM,KAAN;AAAA,0CACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,eAEE,QAAC,kBAAD;AACE,oBAAA,QAAQ,EAAE,CAACF,CAAD,EAAIG,IAAJ,KACRtC,OAAO,CAAC,EAAE,GAAGD,KAAL;AAAYS,sBAAAA,OAAO,EAAE8B,IAAI,CAAC9D;AAA1B,qBAAD,CAFX;AAIE,oBAAA,KAAK,EAAEuB,KAAK,CAACS;AAJf;AAAA;AAAA;AAAA;AAAA,0BAFF;AAAA;AAAA;AAAA;AAAA;AAAA,wBAzBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,oBAFF,eAuCE,QAAC,IAAD,CAAM,MAAN;AAAa,cAAA,KAAK,EAAE,CAApB;AAAA,sCACA,QAAC,MAAD;AACI,gBAAA,EAAE,EAAC,IADP;AAEI,gBAAA,IAAI,EAAC,sBAFT;AAGI,gBAAA,OAAO,EAAE;AAHb;AAAA;AAAA;AAAA;AAAA,sBADA,eAME,QAAC,MAAD;AACC,gBAAA,OAAO,EAAEvC,YADV;AAEE,gBAAA,KAAK,EAAEwB,cAFT;AAGE,gBAAA,QAAQ,EAAEC;AAHZ;AAAA;AAAA;AAAA;AAAA,sBANF,eAaE,QAAC,MAAD;AACE,gBAAA,EAAE,EAAC,IADL;AAEE,gBAAA,IAAI,EAAC,sBAFP;AAGE,gBAAA,OAAO,EAAE;AAHX;AAAA;AAAA;AAAA;AAAA,sBAbF,eAoBI,QAAC,WAAD;AACE,gBAAA,OAAO,EAAE1B,aADX;AAEE,gBAAA,KAAK,EAAE6B,QAFT;AAGE,gBAAA,QAAQ,EAAEC,WAHZ;AAIE,gBAAA,UAAU,EAAC;AAJb;AAAA;AAAA;AAAA;AAAA,sBApBJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBAvCF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAjBA,eAyFA,QAAC,UAAD;AAAY,UAAA,eAAe,EAAEiC,YAA7B;AAA2C,UAAA,QAAQ,EAAE,IAArD;AAA2D,UAAA,MAAM,EAAEF;AAAnE;AAAA;AAAA;AAAA;AAAA,gBAzFA;AAAA;AAAA;AAAA;AAAA;AAAA,cATO,eAyGP,QAAC,KAAD,CAAO,OAAP;AAAA,gCAEA,QAAC,MAAD;AAAQ,UAAA,KAAK,EAAC,OAAd;AAA2B,UAAA,OAAO,EAAC,OAAnC;AAA2C,UAAA,OAAO,EAAEd,iBAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFA,eAKA,QAAC,MAAD;AACE,UAAA,KAAK,EAAC,KADR;AAEE,UAAA,IAAI,EAAC,QAFP;AAGE,UAAA,OAAO,EAAE,MAAMD,YAAY,EAH7B,CAIE;AAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALA,eAcA,QAAC,OAAD;AACE,UAAA,IAAI,EAAC,MADP;AAEE,UAAA,MAAM,EAAC,qBAFT;AAGE,UAAA,OAAO,EAAC,eAHV;AAIE,UAAA,IAAI,EAAE7B,QAJR;AAKE,UAAA,QAAQ,EAAE0C,aALZ;AAME,UAAA,SAAS,EAAEX;AANb;AAAA;AAAA;AAAA;AAAA,gBAdA,eAwBA,QAAC,MAAD;AAEE,UAAA,KAAK,EAAC,KAFR;AAGE,UAAA,IAAI,EAAC,QAHP,CAIE;AAJF;AAKE,UAAA,OAAO,EAAE,MAAMH,QAAQ,EALzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAxBA,eAkCA,QAAC,OAAD;AACC,UAAA,IAAI,EAAC,MADN;AAEE,UAAA,MAAM,EAAC,wBAFT;AAGE,UAAA,OAAO,EAAC,eAHV;AAIE,UAAA,IAAI,EAAE9B,IAJR;AAKE,UAAA,QAAQ,EAAE2C,SALZ;AAME,UAAA,SAAS,EAAED;AANb;AAAA;AAAA;AAAA;AAAA,gBAlCA;AAAA;AAAA;AAAA;AAAA;AAAA,cAzGO;AAAA;AAAA;AAAA;AAAA;AAAA;AADP;AAAA;AAAA;AAAA;AAAA,UADJ;AA+JH;;GAjVuBnE,a;UAONT,W,EA8CID,W;;;KArDEU,a","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nimport { Multiselect } from \"multiselect-react-dropdown\";\r\nimport Select from \"react-select\";\r\nimport SemanticDatepicker from \"react-semantic-ui-datepickers\";\r\n\r\nimport {\r\n  Dropdown,\r\n  Button,\r\n  Form,\r\n  Grid,\r\n  Rail,\r\n  Segment,\r\n  TextArea,\r\n  Label,\r\n  Modal,\r\n  Confirm,\r\n  Header,\r\n  Message,\r\n} from \"semantic-ui-react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { isAuth } from \"../../helpers/auth\";\r\nimport FileUpload from \"../../utlis/FileUpload\";\r\nimport { assignTask, getTaskByTeacher, postTasks } from \"../../redux/slices/Task\";\r\nimport { AddquestionsApi } from \"../../api/api\";\r\nimport { addQuestion } from \"../../redux/slices/questionslice\";\r\nimport MultiSelect from \"react-multi-select-component\";\r\n\r\n\r\n\r\nexport default function ModalTaskFile(props) {\r\n \r\n  const currentClass =JSON.parse(localStorage.getItem(\"idClass\"));\r\n  \r\n    //const [classCurr , setClassCurr] = useState([]);\r\n   // setClassCurr(currentClass.classUsers)\r\n  //const currentClass = JSON.parse(localStorage.getItem(\"idClass\"));\r\n  const seances = useSelector((state) => state.seance.seance);\r\n  const studentChosen = [];\r\n  const seanceChosen = [];\r\n \r\n  currentClass.classUsers.forEach((element) => {\r\n    studentChosen.push({ label: element.name, value: element._id });\r\n  });\r\n  console.log(studentChosen);\r\n  seances.forEach((element) => {\r\n    seanceChosen.push({ label: element.titre, value: element });\r\n  });\r\n    const [cancel, setCancel] = useState(false);\r\n    const [open, setOpen] = useState(false);\r\n    const [opensave, setOpensave] = useState(false);\r\n  \r\n    const [close, setClose] = useState(false);\r\n   \r\n    const [successMessage, SetSuccessMessage] = useState(\"\");\r\n    const [errorMessage, SetErrorMessage] = useState(\"\");\r\n \r\n    const [selectedSeance, setSelectedSeance] = useState(null);\r\n    const [openModel, setOpenModel] = useState(false);\r\n\r\n    const [selected, setSelected] = useState([]);\r\n   \r\n    const [tasks , setTask] = useState({\r\n   \r\n        title : \"\",\r\n        description : \"\",\r\n        theme : \"\",\r\n        cour : currentClass._id,\r\n        typeTask : \"File\",\r\n   \r\n        listQuestion : [],\r\n        listStudents : [],\r\n        endDate : null,\r\n        creator : isAuth()._id\r\n     \r\n    });\r\n\r\n    const taskDetail={\r\n      \"idUser\":isAuth()._id,\r\n      \"idClass\" : currentClass._id,\r\n      \r\n    }\r\n  \r\n    const  dispatch = useDispatch();\r\n    const clicCancel = () => {\r\n      setCancel(true);\r\n    };\r\n    const clicOpen = () => {\r\n      setOpen(true);\r\n    };\r\n    const clicOpensave = () => {\r\n      setOpensave(true);\r\n    };\r\n    const clicConfirmCancel = () => {\r\n    \r\n      SetSuccessMessage(\"\");\r\n     setOpenModel(false);\r\n     \r\n    };\r\n    const clicConfirm = () => {\r\n\r\n     setTask(\r\n        currentClass.classUsers.forEach((itemselect) => {\r\n        \r\n          const index = selected.findIndex(\r\n            (item) => item.value === itemselect._id\r\n          );\r\n          if (index !== -1) {\r\n            \r\n        \r\n            tasks.listStudents.concat(itemselect);\r\n          }\r\n        \r\n          \r\n        })\r\n      );\r\n      console.log(selectedSeance);\r\n      setTask(tasks.theme = selectedSeance.value);\r\n     // setTask(...tasks.listStudents = listStud);\r\n      setTask(...tasks.listQuestion = Images);\r\n      setEnableUpload(true);\r\n      dispatch(postTasks(tasks)).then(()=>{\r\n        dispatch(getTaskByTeacher(taskDetail));\r\n        setEnableUpload(false);\r\n        SetSuccessMessage(\"Add Task successfully !\")\r\n        setOpenModel(false);\r\n      });\r\n      setOpensave(false);\r\n    \r\n     \r\n    };\r\n    \r\n    const clicConfirmAssign = () => {\r\n      setTask(\r\n        currentClass.classUsers.forEach((itemselect) => {\r\n        \r\n          const index = selected.findIndex(\r\n            (item) => item.value === itemselect._id\r\n          );\r\n          if (index !== -1) {\r\n            \r\n            tasks.listStudents.push(itemselect);\r\n           // tasks.listStudents.push(itemselect);\r\n          }\r\n         \r\n          \r\n        })\r\n      );\r\n      setTask(tasks.theme = selectedSeance.value);\r\n     // setTask(...tasks.listStudents = listStud);\r\n      setTask(...tasks.listQuestion = Images);\r\n      setSelected([]);\r\n      setSelectedSeance(null)\r\n      setEnableUpload(true);\r\n      setOpen(false);\r\n      dispatch(assignTask(tasks)).then(()=>{\r\n        setEnableUpload(false);\r\n        dispatch(getTaskByTeacher(taskDetail));\r\n        \r\n        setTask({\r\n   \r\n          title : \"\",\r\n          description : \"\",\r\n          theme : \"\",\r\n          cour : currentClass._id,\r\n          typeTask : \"File\",\r\n     \r\n          listQuestion : [],\r\n          listStudents : [],\r\n          endDate : null,\r\n          creator : isAuth()._id\r\n       \r\n      })\r\n        SetSuccessMessage(\"Assgin Task successfully !\");\r\n        \r\n      \r\n      });\r\n     \r\n    \r\n  \r\n      \r\n    };\r\n    const clicClose = () => {\r\n      setOpen(false);\r\n     // setOpenModel(false);\r\n    };\r\n    const clicClosesave = () => {\r\n      setOpensave(false);\r\n     // setOpenModel(false);\r\n    \r\n    };\r\n    const clicCloseCancel = () => {\r\n      setCancel(false);\r\n     // setOpenModel(false);\r\n    };\r\n\r\n  \r\n      const [enableUpload, setEnableUpload] = useState(false);\r\n      const [Images, setImages] = useState([]);\r\n      const updateImages = (newImages) => {\r\n    \r\n        setImages(newImages);\r\n        \r\n       \r\n      };\r\n      const handleOpen = ()=>{\r\n        setOpenModel(true);\r\n      }\r\n    return (\r\n        <div>\r\n               <Modal\r\n        trigger={<Dropdown.Item onClick={handleOpen} icon=\"file text\" text=\"Add Task\" />}\r\n        dimmer=\"inverted\"\r\n        size=\"tiny\"\r\n        closeIcon=\"close\"\r\n        open={openModel}\r\n        \r\n      >\r\n        <Modal.Header>{props.headerTitle}</Modal.Header>\r\n        <Modal.Content>\r\n        { successMessage ? ( <Message\r\n          success\r\n          color=\"green\"\r\n          header=\"Nice one! 📒 📕 📚 📖\"\r\n            content={successMessage}\r\n        />) : (<></>)}\r\n       \r\n       {errorMessage ? (\r\n          <Message\r\n          warning\r\n          color=\"yellow\"\r\n          header=\"Woah! 😱 😨\"\r\n          content={errorMessage}\r\n        \r\n        />\r\n       ) : (<></>)}\r\n        <Grid>\r\n          <Grid.Row>\r\n       \r\n            <Grid.Column width={10}>\r\n              <Form >\r\n                <Form.Field>\r\n                  <Form.Input\r\n                    label=\"Title\"\r\n                    required\r\n                    value={tasks.title}\r\n                    onChange={(e) =>\r\n                      setTask({ ...tasks, title: e.target.value })\r\n                    }\r\n                    placeholder=\"Title\"\r\n                  />\r\n                </Form.Field>\r\n                <Form.Field required>\r\n                  <label>Description</label>\r\n                  <TextArea\r\n                  required\r\n                    label=\"Description\"\r\n              value={tasks.description}\r\n                    onChange={(e) =>\r\n                      setTask({ ...tasks, description: e.target.value })\r\n                    }\r\n                    placeholder=\"Description..\"\r\n                    style={{ minHeight: 50 }}\r\n                  />\r\n                </Form.Field>\r\n                <Form.Field>\r\n                  <label>Due</label>\r\n                  <SemanticDatepicker\r\n                    onChange={(e, data) =>\r\n                      setTask({ ...tasks, endDate: data.value })\r\n                    }\r\n                    value={tasks.endDate}\r\n                  />\r\n                </Form.Field>\r\n              </Form>\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n            <Header\r\n                as=\"h5\"\r\n                icon=\"check square outline\"\r\n                content={\"Choose Theme  \"}\r\n              />\r\n              <Select\r\n               options={seanceChosen}\r\n                value={selectedSeance}\r\n                onChange={setSelectedSeance}\r\n               \r\n              />\r\n        \r\n              <Header\r\n                as=\"h5\"\r\n                icon=\"check square outline\"\r\n                content={\" For Student  \"}\r\n              />\r\n            \r\n               \r\n                <MultiSelect\r\n                  options={studentChosen}\r\n                  value={selected}\r\n                  onChange={setSelected}\r\n                  labelledBy=\"Select\"\r\n                />\r\n            \r\n            </Grid.Column>\r\n          </Grid.Row>\r\n        </Grid>\r\n\r\n               \r\n        <FileUpload refreshFunction={updateImages} listfile={null} Enbale={enableUpload}/>\r\n      \r\n      \r\n     \r\n        </Modal.Content>\r\n     \r\n       \r\n        <Modal.Actions>\r\n     \r\n        <Button color=\"black\"      floated=\"right\" onClick={clicConfirmCancel}>Back</Button>\r\n     \r\n           \r\n        <Button\r\n          color=\"red\"\r\n          type=\"submit\"\r\n          onClick={() => clicOpensave()}\r\n          //onClick={onSubmitSaveTask}\r\n       \r\n        >\r\n          Save\r\n        </Button>\r\n        <Confirm\r\n          size=\"tiny\"\r\n          header=\"Save Task To Assign\"\r\n          content=\"Are you sure?\"\r\n          open={opensave}\r\n          onCancel={clicClosesave}\r\n          onConfirm={clicConfirm}\r\n        />\r\n     \r\n      \r\n        <Button\r\n       \r\n          color=\"red\"\r\n          type=\"submit\"\r\n          // onClick={onSubmitAssignTask}\r\n          onClick={() => clicOpen()}\r\n        >\r\n          Assign\r\n        </Button>\r\n   \r\n        <Confirm\r\n         size=\"tiny\"\r\n          header=\"Assign Task To Student\"\r\n          content=\"Are you sure?\"\r\n          open={open}\r\n          onCancel={clicClose}\r\n          onConfirm={clicConfirmAssign}\r\n          \r\n        />\r\n        \r\n \r\n    \r\n    \r\n   \r\n    </Modal.Actions>\r\n      </Modal>\r\n        </div>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}