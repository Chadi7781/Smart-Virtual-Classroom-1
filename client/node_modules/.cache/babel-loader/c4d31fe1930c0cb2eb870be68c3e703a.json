{"ast":null,"code":"var _jsxFileName = \"C:\\\\Smart-Virtual-Classroom\\\\client\\\\src\\\\Components\\\\Comment\\\\CommentComponent.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Button, Comment, Form, Header, Icon } from \"semantic-ui-react\";\nimport { fetchCommentsCourse, selectComments, fetchCommentsTask } from \"../../redux/slices/commentslice\";\nimport { CommentsApi } from \"../../api/api\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport InputEmoji from \"react-input-emoji\";\nimport EditComment from \"./EditComment\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CommentComponent(props) {\n  _s();\n\n  const documentData = JSON.parse(localStorage.getItem(\"user\"));\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (props.courseID !== undefined) {\n      dispatch(fetchCommentsCourse(props.courseID));\n    } else {\n      dispatch(fetchCommentsTask(props.taskID));\n    }\n  }, [dispatch]);\n  const [commentss, er] = useSelector(selectComments);\n  const [text, setText] = useState(\"\");\n\n  function handleOnEnter(text) {\n    console.log(\"enter\", text);\n  }\n\n  const formik = useFormik({\n    initialValues: {\n      Body: \" \",\n      Writer: {\n        _id: \"\" + documentData._id\n      },\n      Course: props.courseID,\n      Task: props.taskID\n    },\n    validationSchema: yupSchema,\n    onSubmit: async values => {\n      values.Body = text;\n\n      try {\n        if (values.Body !== \" \") {\n          console.log(values.Task);\n          const res = await CommentsApi.postComments(values).then(data => {\n            if (data.Course !== null) {\n              dispatch(fetchCommentsCourse(data.Course));\n            } else if (data.Task !== null) {\n              dispatch(fetchCommentsTask(data.Task));\n            }\n          });\n        }\n      } catch (error) {\n        alert(error);\n      }\n    }\n  });\n\n  const deletecomment = async idcomment => {\n    try {\n      const res = await CommentsApi.deleteComments(idcomment);\n\n      if (props.courseID != null) {\n        console.log(\"course\");\n        dispatch(fetchCommentsCourse(props.courseID));\n      } else if (props.taskID != null) {\n        console.log(\"task\");\n        dispatch(fetchCommentsTask(props.taskID));\n      }\n    } catch (error) {\n      alert(error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Comment.Group, {\n      size: \"small\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(InputEmoji, {\n          onChange: setText,\n          cleanOnEnter: true,\n          onEnter: handleOnEnter,\n          placeholder: \"Type a message\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: formik.handleSubmit,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            style: {\n              maxHeight: \"40px\"\n            },\n            type: \"submit\",\n            content: \"\",\n            icon: \"edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), Number(commentss.length) !== 0 && /*#__PURE__*/_jsxDEV(Header, {\n        as: \"h3\",\n        dividing: true,\n        children: \"Comments\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this), commentss.map((commentt, index) => /*#__PURE__*/_jsxDEV(Comment, {\n        children: [/*#__PURE__*/_jsxDEV(Comment.Avatar, {\n          as: \"a\",\n          src: \"https://react.semantic-ui.com/images/avatar/small/matt.jpg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Comment.Content, {\n          children: [/*#__PURE__*/_jsxDEV(Comment.Author, {\n            as: \"a\",\n            children: commentt.Writer.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Comment.Metadata, {\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: commentt.Date\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Comment.Text, {\n            children: commentt.Body\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Comment.Actions, {\n            children: [/*#__PURE__*/_jsxDEV(Icon, {\n              name: \"delete\",\n              onClick: () => deletecomment(commentt._id),\n              color: \"red\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(EditComment, {\n              comment: commentt\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CommentComponent, \"KAbnlYW+VWUg91nnTGL49Br+ldw=\", false, function () {\n  return [useDispatch, useSelector, useFormik];\n});\n\n_c = CommentComponent;\nconst yupSchema = Yup.object({\n  Body: Yup.string().required(\"Champs requis!\")\n});\nexport default CommentComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"CommentComponent\");","map":{"version":3,"sources":["C:/Smart-Virtual-Classroom/client/src/Components/Comment/CommentComponent.js"],"names":["React","useEffect","useState","useDispatch","useSelector","Button","Comment","Form","Header","Icon","fetchCommentsCourse","selectComments","fetchCommentsTask","CommentsApi","useFormik","Yup","InputEmoji","EditComment","CommentComponent","props","documentData","JSON","parse","localStorage","getItem","dispatch","courseID","undefined","taskID","commentss","er","text","setText","handleOnEnter","console","log","formik","initialValues","Body","Writer","_id","Course","Task","validationSchema","yupSchema","onSubmit","values","res","postComments","then","data","error","alert","deletecomment","idcomment","deleteComments","display","handleSubmit","maxHeight","Number","length","map","commentt","index","name","Date","object","string","required"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Button, Comment, Form, Header, Icon } from \"semantic-ui-react\";\r\nimport {\r\n  fetchCommentsCourse,\r\n  selectComments,\r\n  fetchCommentsTask,\r\n} from \"../../redux/slices/commentslice\";\r\nimport { CommentsApi } from \"../../api/api\";\r\nimport { useFormik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport InputEmoji from \"react-input-emoji\";\r\nimport EditComment from \"./EditComment\";\r\n\r\nfunction CommentComponent(props) {\r\n  const documentData = JSON.parse(localStorage.getItem(\"user\"));\r\n\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    if (props.courseID !== undefined) {\r\n      dispatch(fetchCommentsCourse(props.courseID));\r\n    } else {\r\n      dispatch(fetchCommentsTask(props.taskID));\r\n    }\r\n  }, [dispatch]);\r\n  const [commentss, er] = useSelector(selectComments);\r\n  const [text, setText] = useState(\"\");\r\n  function handleOnEnter(text) {\r\n    console.log(\"enter\", text);\r\n  }\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      Body: \" \",\r\n      Writer: { _id: \"\" + documentData._id },\r\n      Course: props.courseID,\r\n      Task: props.taskID,\r\n    },\r\n\r\n    validationSchema: yupSchema,\r\n\r\n    onSubmit: async (values) => {\r\n      values.Body = text;\r\n\r\n      try {\r\n        if (values.Body !== \" \") {\r\n          console.log(values.Task);\r\n\r\n          const res = await CommentsApi.postComments(values).then((data) => {\r\n\r\n            if (data.Course !== null) {\r\n\r\n              dispatch(fetchCommentsCourse(data.Course));\r\n            } else if (data.Task !== null) {\r\n              dispatch(fetchCommentsTask(data.Task));\r\n            }\r\n          });\r\n        }\r\n      } catch (error) {\r\n        alert(error);\r\n      }\r\n    },\r\n  });\r\n  const deletecomment = async (idcomment) => {\r\n    try {\r\n      const res = await CommentsApi.deleteComments(idcomment);\r\n\r\n      if (props.courseID != null) {\r\n        console.log(\"course\");\r\n        dispatch(fetchCommentsCourse(props.courseID));\r\n      } else if (props.taskID != null) {\r\n        console.log(\"task\");\r\n        dispatch(fetchCommentsTask(props.taskID));\r\n      }\r\n    } catch (error) {\r\n      alert(error);\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <Comment.Group size=\"small\">\r\n        <div style={{ display: \"flex\" }}>\r\n          <InputEmoji\r\n            onChange={setText}\r\n            cleanOnEnter\r\n            onEnter={handleOnEnter}\r\n            placeholder=\"Type a message\"\r\n          />\r\n          <Form onSubmit={formik.handleSubmit}>\r\n            <Button\r\n              style={{ maxHeight: \"40px\" }}\r\n              type=\"submit\"\r\n              content=\"\"\r\n              icon=\"edit\"\r\n            />\r\n          </Form>\r\n        </div>\r\n        {Number(commentss.length) !== 0 && (\r\n          <Header as=\"h3\" dividing>\r\n            Comments\r\n          </Header>\r\n        )}\r\n\r\n        {commentss.map((commentt, index) => (\r\n          <Comment key={index}>\r\n            <Comment.Avatar\r\n              as=\"a\"\r\n              src=\"https://react.semantic-ui.com/images/avatar/small/matt.jpg\"\r\n            />\r\n            <Comment.Content>\r\n              <Comment.Author as=\"a\">{commentt.Writer.name}</Comment.Author>\r\n              <Comment.Metadata>\r\n                <span>{commentt.Date}</span>\r\n              </Comment.Metadata>\r\n              <Comment.Text>{commentt.Body}</Comment.Text>\r\n              <Comment.Actions>\r\n                <Icon\r\n                  name=\"delete\"\r\n                  onClick={() => deletecomment(commentt._id)}\r\n                  color=\"red\"\r\n                />\r\n                <EditComment comment={commentt} />\r\n              </Comment.Actions>\r\n            </Comment.Content>\r\n          </Comment>\r\n        ))}\r\n      </Comment.Group>\r\n    </div>\r\n  );\r\n}\r\nconst yupSchema = Yup.object({\r\n  Body: Yup.string().required(\"Champs requis!\"),\r\n});\r\nexport default CommentComponent;\r\n"]},"metadata":{},"sourceType":"module"}