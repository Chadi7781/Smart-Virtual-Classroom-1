{"ast":null,"code":"var _jsxFileName = \"C:\\\\Smart-Virtual-Classroom\\\\client\\\\src\\\\Components\\\\Quiz\\\\EndQuiz.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router';\nimport { Divider, Grid, Header, Icon, Image, Message, Segment, Table } from 'semantic-ui-react';\nimport { getDetailByTaskByStudent } from '../../redux/slices/Grade';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function EndQuiz() {\n  _s();\n\n  const pts = 0;\n  const task = useSelector(state => state.grades.grades);\n  const [finalTask, setFinalTask] = useState(task);\n  const {\n    id\n  } = useParams();\n  const dispatch = useDispatch();\n  console.log();\n  finalTask[0].task.listQuestion.forEach(element => {\n    pts += element.fpoint;\n  });\n  useEffect(() => {\n    dispatch(getDetailByTaskByStudent(id)).then(response => {\n      console.log(response);\n      setFinalTask(response.payload);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Segment, {\n      basic: true,\n      textAlign: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(Image, {\n        centered: true,\n        src: process.env.PUBLIC_URL + \"/Certification.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Congrats \", finalTask[0].student.name, \" you have ben passed the Quiz  \", finalTask[0].grade, \" / \", pts, \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {\n        horizontal: true,\n        children: /*#__PURE__*/_jsxDEV(Header, {\n          as: \"h4\",\n          children: [/*#__PURE__*/_jsxDEV(Icon, {\n            name: \"bar chart\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 9\n          }, this), \"Reponse\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        columns: \"three\",\n        children: /*#__PURE__*/_jsxDEV(Grid.Row, {\n          children: finalTask[0].task.listQuestion.map((quiz, index) => /*#__PURE__*/_jsxDEV(Grid.Column, {\n            children: [/*#__PURE__*/_jsxDEV(Table, {\n              color: \"red\",\n              textAlign: \"center\",\n              children: [/*#__PURE__*/_jsxDEV(Table.Header, {\n                children: /*#__PURE__*/_jsxDEV(Table.Row, {\n                  children: /*#__PURE__*/_jsxDEV(Table.HeaderCell, {\n                    children: [quiz.fquestion + \"?\", \" \"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 57,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 56,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 55,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Table.Body, {\n                children: [/*#__PURE__*/_jsxDEV(Table.Row, {\n                  positive: quiz.foptionA === quiz.correct_answer,\n                  negative: quiz.foptionA !== quiz.correct_answer && quiz.foptionA === finalTask[0].listReponse[index],\n                  children: /*#__PURE__*/_jsxDEV(Table.Cell, {\n                    children: [quiz.foptionA === finalTask[0].listReponse[index] && quiz.foptionA === quiz.correct_answer ? /*#__PURE__*/_jsxDEV(Icon, {\n                      name: \"check circle\",\n                      color: \"green\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 70,\n                      columnNumber: 28\n                    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), quiz.foptionA === finalTask[0].listReponse[index] && quiz.foptionA !== quiz.correct_answer ? /*#__PURE__*/_jsxDEV(Icon, {\n                      name: \"close\",\n                      color: \"red\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 74,\n                      columnNumber: 28\n                    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), quiz.foptionA]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 68,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 64,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Table.Row, {\n                  positive: quiz.foptionB === quiz.correct_answer,\n                  negative: quiz.foptionB !== quiz.correct_answer && quiz.foptionB === finalTask[0].listReponse[index],\n                  children: /*#__PURE__*/_jsxDEV(Table.Cell, {\n                    children: [quiz.foptionB === finalTask[0].listReponse[index] && quiz.foptionB === quiz.correct_answer ? /*#__PURE__*/_jsxDEV(Icon, {\n                      name: \"check circle\",\n                      color: \"green\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 88,\n                      columnNumber: 28\n                    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), quiz.foptionB === finalTask[0].listReponse[index] && quiz.foptionB !== quiz.correct_answer ? /*#__PURE__*/_jsxDEV(Icon, {\n                      name: \"close\",\n                      color: \"red\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 92,\n                      columnNumber: 28\n                    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), quiz.foptionB]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 86,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 81,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Table.Row, {\n                  positive: quiz.foptionC === quiz.correct_answer,\n                  negative: quiz.foptionC !== quiz.correct_answer && quiz.foptionC === finalTask[0].listReponse[index],\n                  children: /*#__PURE__*/_jsxDEV(Table.Cell, {\n                    children: [quiz.foptionC === finalTask[0].listReponse[index] && quiz.foptionC === quiz.correct_answer ? /*#__PURE__*/_jsxDEV(Icon, {\n                      name: \"check circle\",\n                      color: \"green\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 104,\n                      columnNumber: 28\n                    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), quiz.foptionC === finalTask[0].listReponse[index] && quiz.foptionC !== quiz.correct_answer ? /*#__PURE__*/_jsxDEV(Icon, {\n                      name: \"close\",\n                      color: \"red\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 107,\n                      columnNumber: 28\n                    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), quiz.foptionC]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 102,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 98,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Table.Row, {\n                  positive: quiz.foptionD === quiz.correct_answer,\n                  negative: quiz.foptionD !== quiz.correct_answer && quiz.foptionD === finalTask[0].listReponse[index],\n                  children: /*#__PURE__*/_jsxDEV(Table.Cell, {\n                    children: [quiz.foptionD === finalTask[0].listReponse[index] && quiz.foptionD === quiz.correct_answer ? /*#__PURE__*/_jsxDEV(Icon, {\n                      name: \"check circle\",\n                      color: \"green\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 118,\n                      columnNumber: 28\n                    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), quiz.foptionD === finalTask[0].listReponse[index] && quiz.foptionD !== quiz.correct_answer ? /*#__PURE__*/_jsxDEV(Icon, {\n                      name: \"close\",\n                      color: \"red\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 121,\n                      columnNumber: 28\n                    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), quiz.foptionD]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 116,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 112,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 19\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Divider, {\n              hidden: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 5\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(EndQuiz, \"hR/C3juMnWUDLpvVOlZ3D3DNRXc=\", false, function () {\n  return [useSelector, useParams, useDispatch];\n});\n\n_c = EndQuiz;\n\nvar _c;\n\n$RefreshReg$(_c, \"EndQuiz\");","map":{"version":3,"sources":["C:/Smart-Virtual-Classroom/client/src/Components/Quiz/EndQuiz.js"],"names":["React","useEffect","useState","useDispatch","useSelector","useParams","Divider","Grid","Header","Icon","Image","Message","Segment","Table","getDetailByTaskByStudent","EndQuiz","pts","task","state","grades","finalTask","setFinalTask","id","dispatch","console","log","listQuestion","forEach","element","fpoint","then","response","payload","process","env","PUBLIC_URL","student","name","grade","map","quiz","index","fquestion","foptionA","correct_answer","listReponse","foptionB","foptionC","foptionD"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useParams } from 'react-router';\r\nimport { Divider, Grid, Header, Icon, Image, Message, Segment, Table } from 'semantic-ui-react';\r\nimport { getDetailByTaskByStudent } from '../../redux/slices/Grade';\r\n\r\nexport default function EndQuiz() {\r\nconst pts = 0;\r\nconst task = useSelector((state) => state.grades.grades);\r\nconst [finalTask , setFinalTask] = useState(task);\r\nconst { id } = useParams();\r\n    const  dispatch = useDispatch();\r\n    console.log();\r\n    finalTask[0].task.listQuestion.forEach((element) => {\r\n       pts+= element.fpoint;\r\n    });\r\n   \r\n  useEffect(() => {\r\n\r\n    dispatch(getDetailByTaskByStudent(id)).then((response)=>{\r\n     \r\n      console.log(response);\r\n      setFinalTask(response.payload);\r\n          });\r\n    \r\n    },[] );\r\n \r\n    return (\r\n        <>\r\n         \r\n             \r\n            <Segment basic textAlign='center'>\r\n        \r\n       \r\n        \r\n          <Image centered src={process.env.PUBLIC_URL + \"/Certification.png\"} />\r\n    \r\n    \r\n    <p>\r\n      Congrats {finalTask[0].student.name} you have ben passed the Quiz  {finalTask[0].grade} / {pts}.\r\n    </p>\r\n    \r\n    <Divider horizontal>\r\n      <Header as='h4'>\r\n        <Icon name='bar chart' />\r\n        Reponse\r\n      </Header>\r\n    </Divider>\r\n    <Grid columns=\"three\">\r\n        <Grid.Row>\r\n          \r\n            {finalTask[0].task.listQuestion.map((quiz, index) => (\r\n    <Grid.Column>\r\n                <Table key={index} color=\"red\" textAlign=\"center\">\r\n                  <Table.Header>\r\n                    <Table.Row>\r\n                      <Table.HeaderCell>\r\n                        {quiz.fquestion + \"?\"}{\" \"}\r\n                      </Table.HeaderCell>\r\n                    </Table.Row>\r\n                  </Table.Header>\r\n\r\n                  <Table.Body>\r\n                    <Table.Row\r\n                      positive={quiz.foptionA === quiz.correct_answer  }\r\n                      negative={ quiz.foptionA !==  quiz.correct_answer &&  quiz.foptionA === finalTask[0].listReponse[index]}\r\n                    >\r\n                      <Table.Cell>\r\n                        {(     quiz.foptionA === finalTask[0].listReponse[index] && quiz.foptionA === quiz.correct_answer  ) ?\r\n                          (<Icon name=\"check circle\" color=\"green\" />): <></>\r\n                      }\r\n\r\n                {(     quiz.foptionA === finalTask[0].listReponse[index] && quiz.foptionA !== quiz.correct_answer  ) ?\r\n                          (<Icon name=\"close\" color=\"red\" />): <></>\r\n                      }\r\n                      \r\n                      \r\n                        {quiz.foptionA}\r\n                      </Table.Cell>\r\n                    </Table.Row>\r\n                    <Table.Row\r\n                                   positive={quiz.foptionB === quiz.correct_answer  }\r\n                                   negative={quiz.foptionB !==  quiz.correct_answer &&  quiz.foptionB === finalTask[0].listReponse[index]}\r\n                                  \r\n                    >\r\n                      <Table.Cell> \r\n                      {(   quiz.foptionB === finalTask[0].listReponse[index] && quiz.foptionB === quiz.correct_answer ) ?\r\n                          (<Icon name=\"check circle\" color=\"green\" />): <></>\r\n                      }\r\n\r\n{(     quiz.foptionB === finalTask[0].listReponse[index] && quiz.foptionB !== quiz.correct_answer  ) ?\r\n                          (<Icon name=\"close\" color=\"red\" />): <></>\r\n                      }\r\n                      \r\n                        {quiz.foptionB}\r\n                      </Table.Cell>\r\n                    </Table.Row>\r\n                    <Table.Row\r\n                                  positive={quiz.foptionC === quiz.correct_answer  }\r\n                                  negative={quiz.foptionC !==  quiz.correct_answer &&  quiz.foptionC === finalTask[0].listReponse[index]}\r\n                    >\r\n                      <Table.Cell> \r\n                      {(  quiz.foptionC === finalTask[0].listReponse[index] &&  quiz.foptionC === quiz.correct_answer ) ?\r\n                          (<Icon name=\"check circle\" color=\"green\" />): <></>\r\n                      }\r\n                        {(     quiz.foptionC === finalTask[0].listReponse[index] && quiz.foptionC !== quiz.correct_answer  ) ?\r\n                          (<Icon name=\"close\" color=\"red\" />): <></>\r\n                      }\r\n                      \r\n                        {quiz.foptionC}</Table.Cell>\r\n                    </Table.Row>\r\n                    <Table.Row\r\n                                positive={quiz.foptionD === quiz.correct_answer  }\r\n                                negative={quiz.foptionD !==  quiz.correct_answer &&  quiz.foptionD === finalTask[0].listReponse[index]}\r\n                    >\r\n                      <Table.Cell> \r\n                      {(    quiz.foptionD === finalTask[0].listReponse[index] && quiz.foptionD === quiz.correct_answer ) ?\r\n                          (<Icon name=\"check circle\" color=\"green\" />): <></>\r\n                      }\r\n                        {(     quiz.foptionD === finalTask[0].listReponse[index] && quiz.foptionD !== quiz.correct_answer  ) ?\r\n                          (<Icon name=\"close\" color=\"red\" />): <></>\r\n                      }\r\n                      \r\n                        {quiz.foptionD}</Table.Cell>\r\n                    </Table.Row>\r\n                  </Table.Body>\r\n                </Table>\r\n                <Divider hidden />\r\n              </Grid.Column>\r\n             ) )}\r\n\r\n             </Grid.Row>\r\n             </Grid>\r\n              </Segment>\r\n\r\n         \r\n\r\n\r\n  \r\n    \r\n    </>\r\n  );\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}