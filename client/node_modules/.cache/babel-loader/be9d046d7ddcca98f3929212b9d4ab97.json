{"ast":null,"code":"var _jsxFileName = \"C:\\\\Smart-Virtual-Classroom\\\\client\\\\src\\\\Components\\\\Task\\\\FormTask.js\",\n    _s = $RefreshSig$();\n\nimport moment from 'moment';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport SemanticDatepicker from 'react-semantic-ui-datepickers';\nimport { Button, Form, Message } from 'semantic-ui-react';\nimport { getTaskByTeacher, taskSlice, updateTask } from '../../redux/slices/Task';\nimport FileUploadEdit from '../../utlis/FileUploadEdit';\nimport * as Yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function FormTask({\n  task\n}) {\n  _s();\n\n  const [Images, setImages] = useState([]);\n  const [enableUpload, setEnableUpload] = useState(false);\n  const [up, setUp] = useState(0);\n\n  const updateImages = newImages => {\n    if (newImages === null) {\n      qes.Filee.forEach(element => {\n        setImages(element);\n      });\n    } else {\n      alert(\"hi\");\n      setUp(1);\n      setImages(newImages);\n    }\n  };\n\n  const [taskEdit, setTaskEdit] = useState(task);\n  const dispatch = useDispatch();\n  /* const handleUpdate = (e) =>{\r\n       e.preventDefault();\r\n     //  setTaskEdit(taskEdit.listQuestion = Images)\r\n       setEnableUpload(true)\r\n      console.log(Images);\r\n       console.log(taskEdit.listQuestion);\r\n       dispatch(updateTask(taskEdit)).then(()=>{\r\n           dispatch(getTaskByTeacher({\"idUser\":taskEdit.creator,\"idClass\":taskEdit.cour}))\r\n       });\r\n   }*/\n\n  const formik = useFormik({\n    initialValues: {\n      title: task.title,\n      description: task.description,\n      theme: task.theme,\n      cour: task.cour,\n      typeTask: task.typeTask,\n      listQuestion: [],\n      listStudents: task.listStudents,\n      endDate: task.endDate,\n      creator: task.creator\n    },\n    validationSchema: yupSchema,\n    onSubmit: async values => {\n      try {\n        console.log(\"cc\");\n\n        if (Images.length !== 0) {\n          values.listQuestion = Images;\n          alert(\"images : here : \" + values.listQuestion);\n        } else {\n          values.listQuestion = task.listQuestion;\n        }\n\n        setEnableUpload(true);\n        dispatch(updateTask(values)).then(() => {\n          dispatch(getTaskByTeacher({\n            \"idUser\": task.creator,\n            \"idClass\": task.cour\n          }));\n        });\n      } catch (error) {\n        alert(error);\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: formik.handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Form.Input, {\n        label: \"Titre\",\n        type: \"text\",\n        name: \"title\",\n        maxLength: \"40\",\n        required: true,\n        onChange: formik.handleChange,\n        value: formik.values.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.TextArea, {\n        label: \"Description\",\n        type: \"TextArea\",\n        name: \"description\",\n        maxLength: \"5000\",\n        required: true,\n        onChange: formik.handleChange,\n        value: formik.values.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        color: \"green\",\n        floated: \"right\",\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(FileUploadEdit, {\n        refreshFunction: updateImages,\n        listfile: task.listQuestion,\n        Enbale: enableUpload\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 14\n    }, this), /*#__PURE__*/_jsxDEV(Message, {\n      success: true,\n      color: \"green\",\n      header: \"Nice one! \\uD83D\\uDCD2 \\uD83D\\uDCD5 \\uD83D\\uDCDA \\uD83D\\uDCD6\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Message, {\n      warning: true,\n      color: \"yellow\",\n      header: \"Woah! \\uD83D\\uDE31 \\uD83D\\uDE28\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n}\n\n_s(FormTask, \"+mDE+wJ50tBxO0MzDut1Da29/h0=\", false, function () {\n  return [useDispatch, useFormik];\n});\n\n_c = FormTask;\nconst yupSchema = Yup.object({\n  Body: Yup.string().required(\"Champs requis!\")\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"FormTask\");","map":{"version":3,"sources":["C:/Smart-Virtual-Classroom/client/src/Components/Task/FormTask.js"],"names":["moment","React","useEffect","useState","useDispatch","useSelector","SemanticDatepicker","Button","Form","Message","getTaskByTeacher","taskSlice","updateTask","FileUploadEdit","Yup","useFormik","FormTask","task","Images","setImages","enableUpload","setEnableUpload","up","setUp","updateImages","newImages","qes","Filee","forEach","element","alert","taskEdit","setTaskEdit","dispatch","formik","initialValues","title","description","theme","cour","typeTask","listQuestion","listStudents","endDate","creator","validationSchema","yupSchema","onSubmit","values","console","log","length","then","error","handleSubmit","handleChange","object","Body","string","required"],"mappings":"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","sourcesContent":["import moment from 'moment';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport SemanticDatepicker from 'react-semantic-ui-datepickers';\r\nimport { Button, Form, Message } from 'semantic-ui-react';\r\nimport { getTaskByTeacher, taskSlice, updateTask } from '../../redux/slices/Task';\r\nimport FileUploadEdit from '../../utlis/FileUploadEdit';\r\nimport * as Yup from \"yup\";\r\nimport { useFormik } from \"formik\";\r\nexport default function FormTask({task}) {\r\n\r\n  const [Images, setImages] = useState([]);\r\n  const [enableUpload, setEnableUpload] = useState(false);\r\n\r\n  const [up, setUp] = useState(0);\r\n\r\n  const updateImages = (newImages) => {\r\n    if (newImages === null) {\r\n      qes.Filee.forEach((element) => {\r\n        setImages(element);\r\n      });\r\n    } else {\r\n      alert(\"hi\")\r\n      setUp(1);\r\n      setImages(newImages);\r\n    }\r\n  };\r\n    const [taskEdit , setTaskEdit] = useState(task);\r\n    \r\n\r\n    const  dispatch = useDispatch();\r\n   \r\n   /* const handleUpdate = (e) =>{\r\n        e.preventDefault();\r\n      //  setTaskEdit(taskEdit.listQuestion = Images)\r\n        setEnableUpload(true)\r\n       console.log(Images);\r\n        console.log(taskEdit.listQuestion);\r\n        dispatch(updateTask(taskEdit)).then(()=>{\r\n            dispatch(getTaskByTeacher({\"idUser\":taskEdit.creator,\"idClass\":taskEdit.cour}))\r\n        });\r\n    }*/\r\n    const formik = useFormik({\r\n      initialValues: {\r\n\r\n        title: task.title,\r\n        description: task.description,\r\n        theme: task.theme,\r\n        cour : task.cour,\r\n        typeTask: task.typeTask,\r\n        listQuestion: [],\r\n        listStudents: task.listStudents,\r\n        endDate: task.endDate,\r\n        creator: task.creator,\r\n\r\n      },\r\n      validationSchema: yupSchema,\r\n  \r\n      onSubmit: async (values) => {\r\n       \r\n        try {\r\n          console.log(\"cc\");\r\n          if(Images.length !==0 )\r\n         { values.listQuestion = Images;\r\n          alert(\"images : here : \"+values.listQuestion);\r\n        }\r\n        else{\r\n          values.listQuestion = task.listQuestion;\r\n        }\r\n        setEnableUpload(true)\r\n        dispatch(updateTask(values)).then(()=>{\r\n          dispatch(getTaskByTeacher({\"idUser\":task.creator,\"idClass\":task.cour}))\r\n      });\r\n        } catch (error) {\r\n          alert(error);\r\n        }\r\n      },\r\n    });\r\n    return (\r\n        <div>\r\n             <Form  onSubmit={formik.handleSubmit}>\r\n        <Form.Input\r\n          label=\"Titre\"\r\n          type=\"text\"\r\n          \r\n          name=\"title\"\r\n          maxLength=\"40\"\r\n          \r\n          required\r\n      \r\n          onChange={\r\n            formik.handleChange}\r\n            value={formik.values.title}\r\n        />\r\n        <Form.TextArea\r\n          label=\"Description\"\r\n          type=\"TextArea\"\r\n       \r\n          name=\"description\"\r\n          maxLength=\"5000\"\r\n          required\r\n        \r\n          onChange={\r\n            formik.handleChange}\r\n            value={formik.values.description}\r\n        />\r\n         \r\n                 \r\n          \r\n            <Button type=\"submit\" color=\"green\" floated=\"right\">\r\n          Save\r\n        </Button>\r\n        <FileUploadEdit\r\n          refreshFunction={updateImages}\r\n            listfile={task.listQuestion}  \r\n            Enbale={enableUpload}\r\n          />\r\n           </Form>\r\n        <Message\r\n          success\r\n          color=\"green\"\r\n          header=\"Nice one! 📒 📕 📚 📖\"\r\n            \r\n        />\r\n        <Message\r\n          warning\r\n          color=\"yellow\"\r\n          header=\"Woah! 😱 😨\"\r\n        \r\n        />\r\n      \r\n        <br /> {/* Yikes! Deal with Semantic UI React! */}\r\n     \r\n        </div>\r\n    )\r\n}\r\nconst yupSchema = Yup.object({\r\n  Body: Yup.string().required(\"Champs requis!\"),\r\n});"]},"metadata":{},"sourceType":"module"}