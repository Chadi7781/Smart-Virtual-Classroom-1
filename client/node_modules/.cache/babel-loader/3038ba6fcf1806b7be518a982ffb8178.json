{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { isAuth } from \"../../helpers/auth\";\nexport const UpdateProfilePicture = createAsyncThunk(\"users/UpdateProfilePicture\", async resources => {\n  const promise = await axios.post(\"https://closer-server.herokuapp.com/courses/api/upload\", resources);\n  console.log(promise.data.result.reqFiles);\n  return promise.data.result.reqFiles[0].url;\n});\nexport const getUserById = createAsyncThunk(\"users/getUserById\", async id => {\n  const {\n    data\n  } = await axios.get(\"https://closer-server.herokuapp.com/api/getUserById/\" + id);\n  return data;\n});\nexport const ChangePassword = createAsyncThunk(\"users/ChangePassword\", async object => {\n  const {\n    data\n  } = await axios.post(\"https://closer-server.herokuapp.com/api/ChangePassword/\", object);\n  return data;\n});\nexport const UpdateUserState = createAsyncThunk(\"users/UpdateUserState\", async () => {});\nexport const UserSlice = createSlice({\n  name: \"user\",\n  initialState: {\n    Resources: \"\",\n    UserById: null,\n    statusChangePassword: null,\n    userUpdated: false\n  },\n  extraReducers: {\n    [UpdateProfilePicture.fulfilled]: (state, action) => {\n      state.Resources = action.payload;\n    },\n    [getUserById.fulfilled]: (state, action) => {\n      state.UserById = action.payload;\n      state.Resources = state.UserById.picture;\n    },\n    [ChangePassword.fulfilled]: (state, action) => {\n      state.statusChangePassword = \"changed !\";\n    },\n    [UpdateUserState.fulfilled]: (state, action) => {\n      state.userUpdated = !state.userUpdated;\n    }\n  }\n});\nexport default UserSlice.reducer;","map":{"version":3,"sources":["C:/Smart-Virtual-Classroom/client/src/redux/slices/User.js"],"names":["createAsyncThunk","createSlice","axios","isAuth","UpdateProfilePicture","resources","promise","post","console","log","data","result","reqFiles","url","getUserById","id","get","ChangePassword","object","UpdateUserState","UserSlice","name","initialState","Resources","UserById","statusChangePassword","userUpdated","extraReducers","fulfilled","state","action","payload","picture","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,oBAAvB;AAEA,OAAO,MAAMC,oBAAoB,GAAGJ,gBAAgB,CAClD,4BADkD,EAGlD,MAAOK,SAAP,IAAqB;AACnB,QAAMC,OAAO,GAAG,MAAMJ,KAAK,CAACK,IAAN,CACpB,wDADoB,EAEpBF,SAFoB,CAAtB;AAIAG,EAAAA,OAAO,CAACC,GAAR,CAAYH,OAAO,CAACI,IAAR,CAAaC,MAAb,CAAoBC,QAAhC;AACA,SAAON,OAAO,CAACI,IAAR,CAAaC,MAAb,CAAoBC,QAApB,CAA6B,CAA7B,EAAgCC,GAAvC;AACD,CAViD,CAA7C;AAaP,OAAO,MAAMC,WAAW,GAAGd,gBAAgB,CAAC,mBAAD,EAAsB,MAAOe,EAAP,IAAc;AAC7E,QAAM;AAAEL,IAAAA;AAAF,MAAW,MAAMR,KAAK,CAACc,GAAN,CACrB,yDAAyDD,EADpC,CAAvB;AAIA,SAAOL,IAAP;AACD,CAN0C,CAApC;AAQP,OAAO,MAAMO,cAAc,GAAGjB,gBAAgB,CAC5C,sBAD4C,EAE5C,MAAOkB,MAAP,IAAkB;AAChB,QAAM;AAAER,IAAAA;AAAF,MAAW,MAAMR,KAAK,CAACK,IAAN,CACrB,yDADqB,EAErBW,MAFqB,CAAvB;AAKA,SAAOR,IAAP;AACD,CAT2C,CAAvC;AAYP,OAAO,MAAMS,eAAe,GAAGnB,gBAAgB,CAC7C,uBAD6C,EAE7C,YAAY,CAAE,CAF+B,CAAxC;AAKP,OAAO,MAAMoB,SAAS,GAAGnB,WAAW,CAAC;AACnCoB,EAAAA,IAAI,EAAE,MAD6B;AAEnCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,SAAS,EAAE,EADC;AAEZC,IAAAA,QAAQ,EAAE,IAFE;AAGZC,IAAAA,oBAAoB,EAAE,IAHV;AAIZC,IAAAA,WAAW,EAAE;AAJD,GAFqB;AASnCC,EAAAA,aAAa,EAAE;AACb,KAACvB,oBAAoB,CAACwB,SAAtB,GAAkC,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACnDD,MAAAA,KAAK,CAACN,SAAN,GAAkBO,MAAM,CAACC,OAAzB;AACD,KAHY;AAIb,KAACjB,WAAW,CAACc,SAAb,GAAyB,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC1CD,MAAAA,KAAK,CAACL,QAAN,GAAiBM,MAAM,CAACC,OAAxB;AACAF,MAAAA,KAAK,CAACN,SAAN,GAAkBM,KAAK,CAACL,QAAN,CAAeQ,OAAjC;AACD,KAPY;AAQb,KAACf,cAAc,CAACW,SAAhB,GAA4B,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC7CD,MAAAA,KAAK,CAACJ,oBAAN,GAA6B,WAA7B;AACD,KAVY;AAWb,KAACN,eAAe,CAACS,SAAjB,GAA6B,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC9CD,MAAAA,KAAK,CAACH,WAAN,GAAoB,CAACG,KAAK,CAACH,WAA3B;AACD;AAbY;AAToB,CAAD,CAA7B;AAyBP,eAAeN,SAAS,CAACa,OAAzB","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\nimport { isAuth } from \"../../helpers/auth\";\r\n\r\nexport const UpdateProfilePicture = createAsyncThunk(\r\n  \"users/UpdateProfilePicture\",\r\n\r\n  async (resources) => {\r\n    const promise = await axios.post(\r\n      \"https://closer-server.herokuapp.com/courses/api/upload\",\r\n      resources\r\n    );\r\n    console.log(promise.data.result.reqFiles);\r\n    return promise.data.result.reqFiles[0].url;\r\n  }\r\n);\r\n\r\nexport const getUserById = createAsyncThunk(\"users/getUserById\", async (id) => {\r\n  const { data } = await axios.get(\r\n    \"https://closer-server.herokuapp.com/api/getUserById/\" + id\r\n  );\r\n\r\n  return data;\r\n});\r\n\r\nexport const ChangePassword = createAsyncThunk(\r\n  \"users/ChangePassword\",\r\n  async (object) => {\r\n    const { data } = await axios.post(\r\n      \"https://closer-server.herokuapp.com/api/ChangePassword/\",\r\n      object\r\n    );\r\n\r\n    return data;\r\n  }\r\n);\r\n\r\nexport const UpdateUserState = createAsyncThunk(\r\n  \"users/UpdateUserState\",\r\n  async () => {}\r\n);\r\n\r\nexport const UserSlice = createSlice({\r\n  name: \"user\",\r\n  initialState: {\r\n    Resources: \"\",\r\n    UserById: null,\r\n    statusChangePassword: null,\r\n    userUpdated: false,\r\n  },\r\n\r\n  extraReducers: {\r\n    [UpdateProfilePicture.fulfilled]: (state, action) => {\r\n      state.Resources = action.payload;\r\n    },\r\n    [getUserById.fulfilled]: (state, action) => {\r\n      state.UserById = action.payload;\r\n      state.Resources = state.UserById.picture;\r\n    },\r\n    [ChangePassword.fulfilled]: (state, action) => {\r\n      state.statusChangePassword = \"changed !\";\r\n    },\r\n    [UpdateUserState.fulfilled]: (state, action) => {\r\n      state.userUpdated = !state.userUpdated;\r\n    },\r\n  },\r\n});\r\nexport default UserSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}