{"ast":null,"code":"var _jsxFileName = \"C:\\\\Smart-Virtual-Classroom\\\\client\\\\src\\\\Components\\\\Comment\\\\EditComment.js\",\n    _s = $RefreshSig$();\n\nimport { useFormik } from \"formik\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Icon, Modal, Button, Form, TextArea } from \"semantic-ui-react\";\nimport { CommentsApi } from \"../../api/api\";\nimport * as Yup from \"yup\";\nimport InputEmoji from \"react-input-emoji\";\nimport { fetchCommentsCourse, selectComments } from \"../../redux/slices/commentslice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction EditComment(props) {\n  _s();\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchCommentsCourse(props.courseID));\n  }, [dispatch]);\n  const [commentss, er] = useSelector(selectComments);\n  const [text, setText] = useState(\"\");\n\n  function handleOnEnter(text) {\n    console.log(\"enter\", text);\n  }\n\n  const formik = useFormik({\n    initialValues: {\n      Body: \" \" + props.comment.Body,\n      Writer: {\n        _id: \"\" + props.comment.Writer._id\n      },\n      Course: {\n        _id: \"\" + props.comment.Course\n      },\n      task: {\n        _id: \"\"\n      }\n    },\n    validationSchema: yupSchema,\n    onSubmit: async values => {\n      try {\n        alert(values.Body);\n        const res = await CommentsApi.putComments(values, props.comment._id);\n        console.log(JSON.stringify(props.comment.Course));\n        dispatch(fetchCommentsCourse(props.comment.Course));\n      } catch (error) {\n        alert(error);\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Modal, {\n      onClose: () => setOpen(false),\n      onOpen: () => setOpen(true),\n      open: open,\n      trigger: /*#__PURE__*/_jsxDEV(Icon, {\n        name: \"edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 18\n      }, this),\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        children: \"Update Your Answer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Content, {\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: formik.handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(Form.Field, {\n            control: TextArea,\n            placeholder: \"write your answer here\",\n            label: \"Content\",\n            name: \"Body\",\n            value: formik.values.Body,\n            onChange: formik.handleChange,\n            error: formik.errors.Body\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            color: \"red\",\n            children: \"Update!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Actions, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          color: \"black\",\n          onClick: () => setOpen(false),\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n\n_s(EditComment, \"HejnI3Dw/L8hfDWJSiE+fpXLJos=\", false, function () {\n  return [useDispatch, useSelector, useFormik];\n});\n\n_c = EditComment;\nconst yupSchema = Yup.object({\n  Body: Yup.string().required(\"Champs requis!\")\n});\nexport default EditComment;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditComment\");","map":{"version":3,"sources":["C:/Smart-Virtual-Classroom/client/src/Components/Comment/EditComment.js"],"names":["useFormik","React","useEffect","useState","useDispatch","useSelector","Icon","Modal","Button","Form","TextArea","CommentsApi","Yup","InputEmoji","fetchCommentsCourse","selectComments","EditComment","props","open","setOpen","handleClickOpen","handleClose","dispatch","courseID","commentss","er","text","setText","handleOnEnter","console","log","formik","initialValues","Body","comment","Writer","_id","Course","task","validationSchema","yupSchema","onSubmit","values","alert","res","putComments","JSON","stringify","error","handleSubmit","handleChange","errors","object","string","required"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,QAA1B;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,MAAtB,EAA8BC,IAA9B,EAAoCC,QAApC,QAAoD,mBAApD;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,OAAOC,UAAP,MAAuB,mBAAvB;AACA,SACEC,mBADF,EAEEC,cAFF,QAGO,iCAHP;;;AAIA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAAA;;AAC1B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBlB,KAAK,CAACE,QAAN,CAAe,KAAf,CAAxB;;AAEA,QAAMiB,eAAe,GAAG,MAAM;AAC5BD,IAAAA,OAAO,CAAC,IAAD,CAAP;AACD,GAFD;;AAIA,QAAME,WAAW,GAAG,MAAM;AACxBF,IAAAA,OAAO,CAAC,KAAD,CAAP;AACD,GAFD;;AAGA,QAAMG,QAAQ,GAAGlB,WAAW,EAA5B;AACAF,EAAAA,SAAS,CAAC,MAAM;AACdoB,IAAAA,QAAQ,CAACR,mBAAmB,CAACG,KAAK,CAACM,QAAP,CAApB,CAAR;AACD,GAFQ,EAEN,CAACD,QAAD,CAFM,CAAT;AAGA,QAAM,CAACE,SAAD,EAAYC,EAAZ,IAAkBpB,WAAW,CAACU,cAAD,CAAnC;AACA,QAAM,CAACW,IAAD,EAAOC,OAAP,IAAkBxB,QAAQ,CAAC,EAAD,CAAhC;;AACA,WAASyB,aAAT,CAAuBF,IAAvB,EAA6B;AAC3BG,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBJ,IAArB;AACD;;AACD,QAAMK,MAAM,GAAG/B,SAAS,CAAC;AACvBgC,IAAAA,aAAa,EAAE;AACbC,MAAAA,IAAI,EAAE,MAAMhB,KAAK,CAACiB,OAAN,CAAcD,IADb;AAEbE,MAAAA,MAAM,EAAE;AAAEC,QAAAA,GAAG,EAAE,KAAKnB,KAAK,CAACiB,OAAN,CAAcC,MAAd,CAAqBC;AAAjC,OAFK;AAGbC,MAAAA,MAAM,EAAE;AAAED,QAAAA,GAAG,EAAE,KAAKnB,KAAK,CAACiB,OAAN,CAAcG;AAA1B,OAHK;AAIbC,MAAAA,IAAI,EAAE;AAAEF,QAAAA,GAAG,EAAE;AAAP;AAJO,KADQ;AAOvBG,IAAAA,gBAAgB,EAAEC,SAPK;AASvBC,IAAAA,QAAQ,EAAE,MAAOC,MAAP,IAAkB;AAG1B,UAAI;AAEAC,QAAAA,KAAK,CAACD,MAAM,CAACT,IAAR,CAAL;AACA,cAAMW,GAAG,GAAG,MAAMjC,WAAW,CAACkC,WAAZ,CAAwBH,MAAxB,EAAgCzB,KAAK,CAACiB,OAAN,CAAcE,GAA9C,CAAlB;AACAP,QAAAA,OAAO,CAACC,GAAR,CAAYgB,IAAI,CAACC,SAAL,CAAe9B,KAAK,CAACiB,OAAN,CAAcG,MAA7B,CAAZ;AACAf,QAAAA,QAAQ,CAACR,mBAAmB,CAACG,KAAK,CAACiB,OAAN,CAAcG,MAAf,CAApB,CAAR;AAEH,OAPD,CAOE,OAAOW,KAAP,EAAc;AACdL,QAAAA,KAAK,CAACK,KAAD,CAAL;AACD;AACF;AAtBsB,GAAD,CAAxB;AAyBA,sBACE;AAAA,2BACE,QAAC,KAAD;AACE,MAAA,OAAO,EAAE,MAAM7B,OAAO,CAAC,KAAD,CADxB;AAEE,MAAA,MAAM,EAAE,MAAMA,OAAO,CAAC,IAAD,CAFvB;AAGE,MAAA,IAAI,EAAED,IAHR;AAIE,MAAA,OAAO,eAAE,QAAC,IAAD;AAAM,QAAA,IAAI,EAAC;AAAX;AAAA;AAAA;AAAA;AAAA,cAJX;AAAA,8BAME,QAAC,KAAD,CAAO,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANF,eAOE,QAAC,KAAD,CAAO,OAAP;AAAA,+BACE,QAAC,IAAD;AAAM,UAAA,QAAQ,EAAEa,MAAM,CAACkB,YAAvB;AAAA,kCACE,QAAC,IAAD,CAAM,KAAN;AACE,YAAA,OAAO,EAAEvC,QADX;AAEE,YAAA,WAAW,EAAC,wBAFd;AAGE,YAAA,KAAK,EAAC,SAHR;AAIE,YAAA,IAAI,EAAC,MAJP;AAKE,YAAA,KAAK,EAAEqB,MAAM,CAACW,MAAP,CAAcT,IALvB;AAME,YAAA,QAAQ,EAAEF,MAAM,CAACmB,YANnB;AAOE,YAAA,KAAK,EAAEnB,MAAM,CAACoB,MAAP,CAAclB;AAPvB;AAAA;AAAA;AAAA;AAAA,kBADF,eAUE,QAAC,MAAD;AAAQ,YAAA,IAAI,EAAC,QAAb;AAAsB,YAAA,KAAK,EAAC,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAVF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAPF,eAuBE,QAAC,KAAD,CAAO,OAAP;AAAA,+BACE,QAAC,MAAD;AAAQ,UAAA,KAAK,EAAC,OAAd;AAAsB,UAAA,OAAO,EAAE,MAAMd,OAAO,CAAC,KAAD,CAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAvBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAiCD;;GA7EQH,W;UAUUZ,W,EAIOC,W,EAKTL,S;;;KAnBRgB,W;AA8ET,MAAMwB,SAAS,GAAG5B,GAAG,CAACwC,MAAJ,CAAW;AAC3BnB,EAAAA,IAAI,EAAErB,GAAG,CAACyC,MAAJ,GAAaC,QAAb,CAAsB,gBAAtB;AADqB,CAAX,CAAlB;AAGA,eAAetC,WAAf","sourcesContent":["import { useFormik } from \"formik\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Icon, Modal, Button, Form, TextArea } from \"semantic-ui-react\";\r\nimport { CommentsApi } from \"../../api/api\";\r\nimport * as Yup from \"yup\";\r\nimport InputEmoji from \"react-input-emoji\";\r\nimport {\r\n  fetchCommentsCourse,\r\n  selectComments,\r\n} from \"../../redux/slices/commentslice\";\r\nfunction EditComment(props) {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    dispatch(fetchCommentsCourse(props.courseID));\r\n  }, [dispatch]);\r\n  const [commentss, er] = useSelector(selectComments);\r\n  const [text, setText] = useState(\"\");\r\n  function handleOnEnter(text) {\r\n    console.log(\"enter\", text);\r\n  }\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      Body: \" \" + props.comment.Body,\r\n      Writer: { _id: \"\" + props.comment.Writer._id },\r\n      Course: { _id: \"\" + props.comment.Course },\r\n      task: { _id: \"\"  },\r\n    },\r\n    validationSchema: yupSchema,\r\n\r\n    onSubmit: async (values) => {\r\n\r\n\r\n      try {\r\n      \r\n          alert(values.Body);\r\n          const res = await CommentsApi.putComments(values, props.comment._id );\r\n          console.log(JSON.stringify(props.comment.Course))\r\n          dispatch(fetchCommentsCourse(props.comment.Course ));\r\n        \r\n      } catch (error) {\r\n        alert(error);\r\n      }\r\n    },\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <Modal\r\n        onClose={() => setOpen(false)}\r\n        onOpen={() => setOpen(true)}\r\n        open={open}\r\n        trigger={<Icon name=\"edit\"></Icon>}\r\n      >\r\n        <Modal.Header>Update Your Answer</Modal.Header>\r\n        <Modal.Content>\r\n          <Form onSubmit={formik.handleSubmit}>\r\n            <Form.Field\r\n              control={TextArea}\r\n              placeholder=\"write your answer here\"\r\n              label=\"Content\"\r\n              name=\"Body\"\r\n              value={formik.values.Body}\r\n              onChange={formik.handleChange}\r\n              error={formik.errors.Body}\r\n            />\r\n            <Button type=\"submit\" color=\"red\">\r\n              Update!\r\n            </Button>\r\n          </Form>\r\n        </Modal.Content>\r\n        <Modal.Actions>\r\n          <Button color=\"black\" onClick={() => setOpen(false)}>\r\n            Cancel\r\n          </Button>\r\n        </Modal.Actions>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\nconst yupSchema = Yup.object({\r\n  Body: Yup.string().required(\"Champs requis!\"),\r\n});\r\nexport default EditComment;\r\n"]},"metadata":{},"sourceType":"module"}