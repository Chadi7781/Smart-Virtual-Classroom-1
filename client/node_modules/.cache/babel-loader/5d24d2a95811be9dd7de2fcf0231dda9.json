{"ast":null,"code":"var _jsxFileName = \"C:\\\\Smart-Virtual-Classroom\\\\client\\\\src\\\\Components\\\\Task\\\\UncorrectedTask.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router';\nimport { Button, Card, Grid, Header, Icon, Image, Input, Loader, Segment } from 'semantic-ui-react';\nimport { isAuth } from '../../helpers/auth';\nimport { assignGradeToStudent } from '../../redux/slices/Grade';\nimport { getDetailTask } from '../../redux/slices/Task';\nimport CorrectedTask from './CorrectedTask';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function UncorrectedTask(props) {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const [grade, setGrade] = useState();\n  const [_id, setIdTask] = useState();\n  const [objgrade, setObjGrade] = useState({\n    \"_id\": null,\n    \"grade\": null\n  });\n\n  const submitGrade = (e, data) => {\n    console.log(grade);\n    setObjGrade({\n      \"_id\": data,\n      \"grade\": e.target.value\n    });\n    console.log(objgrade);\n  };\n\n  const dispatch = useDispatch();\n\n  const assignGrade = () => {\n    dispatch(assignGradeToStudent(objgrade));\n  };\n\n  useEffect(() => {\n    dispatch(getDetailTask(id));\n  }, [id]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Card.Group, {\n      children: !props.uncorrectTasks ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\" \", /*#__PURE__*/_jsxDEV(Loader, {\n          active: true,\n          inline: \"centered\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 52\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 46\n      }, this) : props.uncorrectTasks.map((task, index) => task.grade === null ? /*#__PURE__*/_jsxDEV(Card, {\n        color: \"red\",\n        raised: true,\n        children: [/*#__PURE__*/_jsxDEV(Card.Content, {\n          children: [/*#__PURE__*/_jsxDEV(Image, {\n            floated: \"right\",\n            size: \"mini\",\n            src: task.student.picture\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(Card.Header, {\n            children: task.student.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(Card.Meta, {\n            children: /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: task.taskStatus\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(Card.Description, {\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              children: /*#__PURE__*/_jsxDEV(Grid.Row, {\n                children: props.data.listReponse.map((files, index) => files.split(\".\").pop() === \"pdf\" || files.split(\".\").pop() === \"pptx\" || files.split(\".\").pop() === \"docx\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: /*#__PURE__*/_jsxDEV(\"a\", {\n                    href: files,\n                    target: \"_blank\",\n                    rel: \"noopener noreferrer\",\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      children: [/*#__PURE__*/_jsxDEV(Grid.Column, {\n                        width: 3,\n                        children: /*#__PURE__*/_jsxDEV(\"img\", {\n                          src: process.env.PUBLIC_URL + \"/files-type/\" + files.split(\".\").pop() + \".png\",\n                          style: {\n                            margin: \"10px\",\n                            height: \"100px\",\n                            width: \"100px\"\n                          },\n                          alt: \"\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 80,\n                          columnNumber: 29\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 79,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(Grid.Column, {\n                        width: 3,\n                        children: [/*#__PURE__*/_jsxDEV(Grid.Row, {\n                          children: /*#__PURE__*/_jsxDEV(Header, {\n                            as: \"h4\",\n                            color: \"red\",\n                            children: files.split(\"-\").pop().slice(0, 7) + \".\" + files.split(\".\").pop()\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 97,\n                            columnNumber: 31\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 96,\n                          columnNumber: 29\n                        }, this), /*#__PURE__*/_jsxDEV(Grid.Row, {\n                          children: /*#__PURE__*/_jsxDEV(Header, {\n                            as: \"h4\",\n                            color: \"grey\",\n                            children: [files.split(\"-\").pop().slice(0, 7) + \".\" + files.split(\".\").pop(), \" \", \"File\"]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 104,\n                            columnNumber: 31\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 103,\n                          columnNumber: 29\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 95,\n                        columnNumber: 27\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 78,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 77,\n                    columnNumber: 23\n                  }, this)\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 76,\n                  columnNumber: 21\n                }, this) : files.split(\".\").pop() === \"mp3\" || files.split(\".\").pop() === \"mp4\" ? /*#__PURE__*/_jsxDEV(ReactPlayer, {\n                  width: \"300px\",\n                  height: \"230px\",\n                  controls: true,\n                  url: files\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 117,\n                  columnNumber: 21\n                }, this) : files.split(\".\").pop() === \"png\" || files.split(\".\").pop() === \"jpg\" || files.split(\".\").pop() === \"jpeg\" || files.split(\".\").pop() === \"gif\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(Grid.Column, {\n                    width: 3,\n                    children: /*#__PURE__*/_jsxDEV(\"a\", {\n                      href: files,\n                      target: \"_blank\",\n                      rel: \"noopener noreferrer\",\n                      children: /*#__PURE__*/_jsxDEV(Image, {\n                        src: files,\n                        alt: files.split(\"-\").pop(),\n                        style: {\n                          margin: \"10px\",\n                          height: \"100px\",\n                          width: \"100px\"\n                        }\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 135,\n                        columnNumber: 27\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 130,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 129,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Grid.Column, {\n                    width: 3,\n                    children: [/*#__PURE__*/_jsxDEV(Grid.Row, {\n                      children: /*#__PURE__*/_jsxDEV(Header, {\n                        as: \"h4\",\n                        color: \"red\",\n                        children: files.split(\"-\").pop().slice(0, 7) + \".\" + files.split(\".\").pop()\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 148,\n                        columnNumber: 27\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 147,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(Grid.Row, {\n                      children: /*#__PURE__*/_jsxDEV(Header, {\n                        as: \"h4\",\n                        color: \"grey\",\n                        children: [files.split(\".\").pop(), \" File\"]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 155,\n                        columnNumber: 27\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 154,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 146,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 128,\n                  columnNumber: 21\n                }, this) :\n                /*#__PURE__*/\n                // <a href={files} target=\"_blank\" rel=\"noopener noreferrer\">\n                //   <img\n                //     src={files}\n                //     width=\"300px\"\n                //     style={{ margin: \"2px\" }}\n                //     alt=\"\"\n                //   />\n                // </a>\n                _jsxDEV(\"a\", {\n                  href: files,\n                  target: \"_blank\",\n                  rel: \"noopener noreferrer\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(Grid.Column, {\n                      width: 3,\n                      children: /*#__PURE__*/_jsxDEV(\"img\", {\n                        style: {\n                          margin: \"10px\",\n                          height: \"100px\",\n                          width: \"100px\"\n                        },\n                        src: process.env.PUBLIC_URL + \"/files-type/\" + \"noFile.png\",\n                        alt: files.split(\"-\").pop()\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 173,\n                        columnNumber: 27\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 172,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(Grid.Column, {\n                      width: 3,\n                      children: [/*#__PURE__*/_jsxDEV(Grid.Row, {\n                        children: /*#__PURE__*/_jsxDEV(Header, {\n                          as: \"h4\",\n                          color: \"red\",\n                          children: files.split(\"-\").pop().slice(0, 7) + \".\" + files.split(\".\").pop()\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 189,\n                          columnNumber: 29\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 188,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(Grid.Row, {\n                        children: /*#__PURE__*/_jsxDEV(Header, {\n                          as: \"h4\",\n                          color: \"grey\",\n                          children: [files.split(\"-\").pop().slice(0, 7) + \".\" + files.split(\".\").pop(), \" \", \"File\"]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 196,\n                          columnNumber: 29\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 195,\n                        columnNumber: 27\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 187,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 171,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 170,\n                  columnNumber: 21\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 71,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 7\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(Card.Content, {\n          extra: true,\n          children: [/*#__PURE__*/_jsxDEV(Input, {\n            name: \"grade\",\n            type: \"number\",\n            size: \"mini\",\n            onChange: e => submitGrade(e, task._id)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            color: \"red\",\n            onClick: () => assignGrade(),\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 3\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 5\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 3\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 15\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n}\n\n_s(UncorrectedTask, \"k8G1MmIgH2gFB0o2whD3e1JTt4I=\", false, function () {\n  return [useParams, useDispatch];\n});\n\n_c = UncorrectedTask;\n\nvar _c;\n\n$RefreshReg$(_c, \"UncorrectedTask\");","map":{"version":3,"sources":["C:/Smart-Virtual-Classroom/client/src/Components/Task/UncorrectedTask.js"],"names":["React","useEffect","useState","useDispatch","useSelector","useParams","Button","Card","Grid","Header","Icon","Image","Input","Loader","Segment","isAuth","assignGradeToStudent","getDetailTask","CorrectedTask","UncorrectedTask","props","id","grade","setGrade","_id","setIdTask","objgrade","setObjGrade","submitGrade","e","data","console","log","target","value","dispatch","assignGrade","uncorrectTasks","map","task","index","student","picture","name","taskStatus","listReponse","files","split","pop","process","env","PUBLIC_URL","margin","height","width","slice"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useParams } from 'react-router';\nimport { Button, Card, Grid, Header, Icon, Image, Input, Loader, Segment } from 'semantic-ui-react'\nimport { isAuth } from '../../helpers/auth';\nimport { assignGradeToStudent } from '../../redux/slices/Grade';\nimport { getDetailTask } from '../../redux/slices/Task';\nimport CorrectedTask from './CorrectedTask';\n\n\n\nexport default function UncorrectedTask(props) {\n  const {id} = useParams();\n    const [grade , setGrade] = useState();\n    const [_id, setIdTask] = useState();\n    const [objgrade , setObjGrade] =useState({\"_id\" : null , \"grade\" :null})\n    const submitGrade =   ( e ,data) => {\n        \n       \n       \n    console.log(grade)\n        setObjGrade({\"_id\" :data,\"grade\" : e.target.value })\n        \n\n console.log(objgrade)\n  \n    };\n    const  dispatch = useDispatch();\n\n    const assignGrade = () =>{\n\n        dispatch(assignGradeToStudent(objgrade));\n    }\n      \n    useEffect(() => {\n     \n      \n      dispatch(getDetailTask(id));\n    }, [id])\n\n    return (\n        <div>\n              <Card.Group>\n                  { !props.uncorrectTasks ? (<div> <Loader active inline='centered' /></div>)  : (\n\n props.uncorrectTasks.map((task,index) =>\n    task.grade ===null ? (\n  <Card key={index} color='red' raised>\n\n   \n\n    <Card.Content>\n      <Image\n        floated='right'\n        size='mini'\n        \n        src={task.student.picture}\n      />\n      <Card.Header>{task.student.name}\n   \n      </Card.Header>\n     \n      <Card.Meta >\n          <strong>{task.taskStatus}</strong>\n          \n  \n  </Card.Meta>\n      <Card.Description>\n  \n      <Grid>\n              <Grid.Row>\n                {props.data.listReponse.map((files, index) =>\n                  files.split(\".\").pop() === \"pdf\" ||\n                  files.split(\".\").pop() === \"pptx\" ||\n                  files.split(\".\").pop() === \"docx\" ? (\n                    <div key={index}>\n                      <a href={files} target=\"_blank\" rel=\"noopener noreferrer\">\n                        <div>\n                          <Grid.Column width={3}>\n                            <img\n                              src={\n                                process.env.PUBLIC_URL +\n                                \"/files-type/\" +\n                                files.split(\".\").pop() +\n                                \".png\"\n                              }\n                              style={{\n                                margin: \"10px\",\n                                height: \"100px\",\n                                width: \"100px\",\n                              }}\n                              alt=\"\"\n                            />\n                          </Grid.Column>\n                          <Grid.Column width={3}>\n                            <Grid.Row>\n                              <Header as=\"h4\" color=\"red\">\n                                {files.split(\"-\").pop().slice(0, 7) +\n                                  \".\" +\n                                  files.split(\".\").pop()}\n                              </Header>\n                            </Grid.Row>\n                            <Grid.Row>\n                              <Header as=\"h4\" color=\"grey\">\n                                {files.split(\"-\").pop().slice(0, 7) +\n                                  \".\" +\n                                  files.split(\".\").pop()}{\" \"}\n                                File\n                              </Header>\n                            </Grid.Row>\n                          </Grid.Column>\n                        </div>\n                      </a>\n                    </div>\n                  ) : files.split(\".\").pop() === \"mp3\" ||\n                    files.split(\".\").pop() === \"mp4\" ? (\n                    <ReactPlayer\n                      key={index}\n                      width=\"300px\"\n                      height=\"230px\"\n                      controls={true}\n                      url={files}\n                    />\n                  ) : files.split(\".\").pop() === \"png\" ||\n                    files.split(\".\").pop() === \"jpg\" ||\n                    files.split(\".\").pop() === \"jpeg\" ||\n                    files.split(\".\").pop() === \"gif\" ? (\n                    <div>\n                      <Grid.Column width={3}>\n                        <a\n                          href={files}\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                        >\n                          <Image\n                            src={files}\n                            alt={files.split(\"-\").pop()}\n                            style={{\n                              margin: \"10px\",\n                              height: \"100px\",\n                              width: \"100px\",\n                            }}\n                          />\n                        </a>\n                      </Grid.Column>\n                      <Grid.Column width={3}>\n                        <Grid.Row>\n                          <Header as=\"h4\" color=\"red\">\n                            {files.split(\"-\").pop().slice(0, 7) +\n                              \".\" +\n                              files.split(\".\").pop()}\n                          </Header>\n                        </Grid.Row>\n                        <Grid.Row>\n                          <Header as=\"h4\" color=\"grey\">\n                            {files.split(\".\").pop()} File\n                          </Header>\n                        </Grid.Row>\n                      </Grid.Column>\n                    </div>\n                  ) : (\n                    // <a href={files} target=\"_blank\" rel=\"noopener noreferrer\">\n                    //   <img\n                    //     src={files}\n                    //     width=\"300px\"\n                    //     style={{ margin: \"2px\" }}\n                    //     alt=\"\"\n                    //   />\n                    // </a>\n                    <a href={files} target=\"_blank\" rel=\"noopener noreferrer\">\n                      <div>\n                        <Grid.Column width={3}>\n                          <img\n                            style={{\n                              margin: \"10px\",\n                              height: \"100px\",\n                              width: \"100px\",\n                            }}\n                            src={\n                              process.env.PUBLIC_URL +\n                              \"/files-type/\" +\n                              \"noFile.png\"\n                            }\n                            alt={files.split(\"-\").pop()}\n                          />\n                        </Grid.Column>\n                        <Grid.Column width={3}>\n                          <Grid.Row>\n                            <Header as=\"h4\" color=\"red\">\n                              {files.split(\"-\").pop().slice(0, 7) +\n                                \".\" +\n                                files.split(\".\").pop()}\n                            </Header>\n                          </Grid.Row>\n                          <Grid.Row>\n                            <Header as=\"h4\" color=\"grey\">\n                              {files.split(\"-\").pop().slice(0, 7) +\n                                \".\" +\n                                files.split(\".\").pop()}{\" \"}\n                              File\n                            </Header>\n                          </Grid.Row>\n                        </Grid.Column>\n                      </div>\n                    </a>\n                  )\n                )}\n              </Grid.Row>\n            </Grid>\n\n      </Card.Description>\n    </Card.Content>\n    <Card.Content extra>\n  \n    <Input\n   \n  name=\"grade\"\n   type=\"number\"\n  size='mini'\n  \n\n\nonChange={(e) => submitGrade(e , task._id)}\n\n\n/><Button color=\"red\" onClick={()=>assignGrade()} >Send</Button>\n    \n    </Card.Content>\n  </Card>\n    ): (\n<></>\n    ))\n                   )}\n  \n  </Card.Group>\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}