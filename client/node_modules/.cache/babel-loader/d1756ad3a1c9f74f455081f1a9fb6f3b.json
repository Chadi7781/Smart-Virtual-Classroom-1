{"ast":null,"code":"var _jsxFileName = \"C:\\\\Smart-Virtual-Classroom\\\\client\\\\src\\\\Components\\\\question\\\\EditQuestionComponent.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { Button, Form, Input, TextArea, Segment, Modal, Icon, Label } from \"semantic-ui-react\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport * as Yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport { AddquestionsApi } from \"../../api/api\";\nimport { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addQuestion, fetchQuestions } from \"../../redux/slices/questionslice\";\nimport FileUploadEdit from \"../../utlis/FileUploadEdit\";\nimport { selectedClasses } from \"../../redux/slices/classsline\";\nimport io from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ENDPOINT = \"https://closer-server.herokuapp.com/\";\nexport default function EditQuestions({\n  qes\n}) {\n  _s();\n\n  const socket = io(ENDPOINT);\n  const [open, setOpen] = React.useState(false);\n  const [currentClass, err] = useSelector(selectedClasses);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const [error] = useState({\n    visible: false,\n    message: \"\"\n  });\n  const dispatch = useDispatch();\n  const [Images, setImages] = useState([]);\n  const [up, setUp] = useState(0);\n\n  const updateImages = newImages => {\n    if (newImages === null) {\n      qes.Filee.forEach(element => {\n        setImages(element);\n      });\n    } else {\n      alert(\"hi\");\n      setUp(1);\n      setImages(newImages);\n    }\n  };\n\n  const documentData = JSON.parse(localStorage.getItem('user'));\n  const formik = useFormik({\n    initialValues: {\n      Title: qes.Title,\n      Body: qes.Body,\n      Writerq: {\n        _id: \"\" + documentData._id\n      },\n      Filee: []\n    },\n    validationSchema: yupSchema,\n    onSubmit: async values => {\n      try {\n        if (Images.length !== 0) {\n          values.Filee = Images;\n          alert(\"images : here : \" + values.Filee);\n        } else {\n          values.Filee = qes.Filee;\n        }\n\n        const res = await AddquestionsApi.putQuestions(values, qes._id); //  dispatch(fetchQuestions(currentClass._id));\n\n        socket.emit(\"send_question\", \"message\");\n      } catch (error) {\n        alert(error);\n      }\n    }\n  });\n  const [enableUpload, setEnableUpload] = useState(false);\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    onClose: () => setOpen(false),\n    onOpen: () => setOpen(true),\n    open: open,\n    trigger: /*#__PURE__*/_jsxDEV(Icon, {\n      name: \"edit\",\n      children: \"Edit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 16\n    }, this),\n    children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n      children: \"Update your question\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Content, {\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: formik.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          widths: \"equal\",\n          children: /*#__PURE__*/_jsxDEV(Form.Field, {\n            control: Input,\n            placeholder: \"Title\",\n            label: \"Title\",\n            name: \"Title\",\n            onChange: formik.handleChange,\n            value: formik.values.Title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n          control: TextArea,\n          placeholder: \"whats your question?\",\n          label: \"Content\",\n          name: \"Body\",\n          value: formik.values.Body,\n          onChange: formik.handleChange,\n          error: formik.errors.Title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"update\",\n          color: \"red\",\n          children: \"Update\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FileUploadEdit, {\n          refreshFunction: updateImages,\n          listfile: qes.Filee\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Actions, {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        color: \"black\",\n        onClick: () => setOpen(false),\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n}\n\n_s(EditQuestions, \"wvC8DR6kgDSkj6urFeaBNxBD7qQ=\", false, function () {\n  return [useSelector, useDispatch, useFormik];\n});\n\n_c = EditQuestions;\nconst yupSchema = Yup.object({\n  Body: Yup.string().required(\"Champs requis!\")\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"EditQuestions\");","map":{"version":3,"sources":["C:/Smart-Virtual-Classroom/client/src/Components/question/EditQuestionComponent.js"],"names":["React","useEffect","Button","Form","Input","TextArea","Segment","Modal","Icon","Label","Yup","useFormik","AddquestionsApi","useState","useDispatch","useSelector","addQuestion","fetchQuestions","FileUploadEdit","selectedClasses","io","ENDPOINT","EditQuestions","qes","socket","open","setOpen","currentClass","err","handleClickOpen","handleClose","error","visible","message","dispatch","Images","setImages","up","setUp","updateImages","newImages","Filee","forEach","element","alert","documentData","JSON","parse","localStorage","getItem","formik","initialValues","Title","Body","Writerq","_id","validationSchema","yupSchema","onSubmit","values","length","res","putQuestions","emit","enableUpload","setEnableUpload","handleSubmit","handleChange","errors","object","string","required"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport {\r\n  Button,\r\n  Form,\r\n  Input,\r\n  TextArea,\r\n  Segment,\r\n  Modal,\r\n  Icon,\r\n  Label,\r\n} from \"semantic-ui-react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport * as Yup from \"yup\";\r\nimport { useFormik } from \"formik\";\r\nimport { AddquestionsApi } from \"../../api/api\";\r\nimport { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { addQuestion, fetchQuestions } from \"../../redux/slices/questionslice\";\r\nimport FileUploadEdit from \"../../utlis/FileUploadEdit\";\r\nimport { selectedClasses } from \"../../redux/slices/classsline\";\r\nimport io from \"socket.io-client\";\r\n\r\nconst ENDPOINT = \"https://closer-server.herokuapp.com/\";\r\nexport default function EditQuestions({ qes }) {\r\n  const socket = io(ENDPOINT);\r\n  const [open, setOpen] = React.useState(false);\r\n  const [currentClass, err] = useSelector(selectedClasses);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const [error] = useState({ visible: false, message: \"\" });\r\n  const dispatch = useDispatch();\r\n  const [Images, setImages] = useState([]);\r\n  const [up, setUp] = useState(0);\r\n\r\n  const updateImages = (newImages) => {\r\n    if (newImages === null) {\r\n      qes.Filee.forEach((element) => {\r\n        setImages(element);\r\n      });\r\n    } else {\r\n      alert(\"hi\")\r\n      setUp(1);\r\n      setImages(newImages);\r\n    }\r\n  };\r\n  const documentData = JSON.parse(localStorage.getItem('user'));\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      Title: qes.Title,\r\n      Body: qes.Body,\r\n      Writerq: { _id: \"\"+documentData._id },\r\n      Filee: [],\r\n    },\r\n    validationSchema: yupSchema,\r\n\r\n    onSubmit: async (values) => {\r\n      try {\r\n        \r\n        if(Images.length !==0 )\r\n       { values.Filee = Images;\r\n        alert(\"images : here : \"+values.Filee);\r\n      }\r\n      else{\r\n        values.Filee = qes.Filee;\r\n      }\r\n        const res = await AddquestionsApi.putQuestions(values, qes._id);\r\n      //  dispatch(fetchQuestions(currentClass._id));\r\n        socket.emit(\"send_question\", \"message\");\r\n      } catch (error) {\r\n        alert(error);\r\n      }\r\n    },\r\n  });\r\n  const [enableUpload, setEnableUpload] = useState(false);\r\n\r\n  return (\r\n    <Modal\r\n      onClose={() => setOpen(false)}\r\n      onOpen={() => setOpen(true)}\r\n      open={open}\r\n      trigger={<Icon name=\"edit\">Edit</Icon>}\r\n    >\r\n      <Modal.Header>Update your question</Modal.Header>\r\n      <Modal.Content>\r\n        <Form onSubmit={formik.handleSubmit}>\r\n          <Form.Group widths=\"equal\">\r\n            <Form.Field\r\n              control={Input}\r\n              placeholder=\"Title\"\r\n              label=\"Title\"\r\n              name=\"Title\"\r\n              onChange={formik.handleChange}\r\n              value={formik.values.Title}\r\n              \r\n            />\r\n          </Form.Group>\r\n          <Form.Field\r\n            control={TextArea}\r\n            placeholder=\"whats your question?\"\r\n            label=\"Content\"\r\n            name=\"Body\"\r\n            value={formik.values.Body}\r\n            onChange={formik.handleChange}\r\n            error={formik.errors.Title}\r\n          />\r\n          <Button type=\"update\" color=\"red\">\r\n            Update\r\n          </Button>\r\n          <FileUploadEdit\r\n            refreshFunction={updateImages}\r\n            listfile={qes.Filee}  \r\n          />\r\n        </Form>\r\n      </Modal.Content>\r\n      <Modal.Actions>\r\n        <Button color=\"black\" onClick={() => setOpen(false)}>\r\n          Cancel\r\n        </Button>\r\n      </Modal.Actions>\r\n    </Modal>\r\n  );\r\n}\r\nconst yupSchema = Yup.object({\r\n  Body: Yup.string().required(\"Champs requis!\"),\r\n});\r\n"]},"metadata":{},"sourceType":"module"}