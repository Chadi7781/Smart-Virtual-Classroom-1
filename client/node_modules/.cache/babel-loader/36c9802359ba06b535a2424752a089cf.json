{"ast":null,"code":"var _jsxFileName = \"C:\\\\Smart-Virtual-Classroom\\\\client\\\\src\\\\Components\\\\Quiz\\\\Quiz.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport { Icon, Image, Button, Form, Segment, Progress, Container, Header, Divider } from 'semantic-ui-react';\nimport { isAuth } from '../../helpers/auth.js';\nimport { getListQuestionTasksById, assignGradeToStudent, getDetailByTaskByStudent } from '../../redux/slices/Grade.js';\nimport { getQuizzes } from \"../../redux/slices/Quiz.js\";\nimport EndQuiz from './EndQuiz.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Quiz() {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const quizzes = useSelector(state => state.grades.listQuestion);\n  const grade = useSelector(state => state.grades.grade);\n  const [objgrade, setObjGrade] = useState({\n    \"_id\": null,\n    \"grade\": 0,\n    \"listReponse\": []\n  });\n  const [score, setScore] = useState(0);\n  const [cuurQuestion, setCurrQuestion] = useState(0);\n  const [optionChosen, setOptionChosen] = useState('');\n  const [listReponse] = useState([]);\n  const [finish, setFinish] = useState(false);\n\n  const nextQuestion = () => {\n    if (optionChosen === quizzes[cuurQuestion].correct_answer) setScore(score + 1);\n    setCurrQuestion(cuurQuestion + 1);\n    listReponse.push(optionChosen);\n    console.log(listReponse);\n    setOptionChosen(\"\");\n  };\n\n  console.log(quizzes);\n  const dispatch = useDispatch();\n\n  const handleResult = () => {\n    if (optionChosen === quizzes[cuurQuestion].correct_answer) {\n      setScore(score + 1);\n    }\n\n    listReponse.push(optionChosen);\n    dispatch(assignGradeToStudent({\n      \"_id\": id,\n      \"grade\": score,\n      \"listReponse\": listReponse\n    }));\n    setFinish(true);\n  };\n\n  const handleChosen = option => {\n    setOptionChosen(optionChosen != option ? option : \"\");\n  };\n\n  useEffect(() => {\n    // dispatch(getQuizzes());\n    dispatch(getListQuestionTasksById(id));\n  }, [id]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Quiz\",\n    children: finish ? /*#__PURE__*/_jsxDEV(EndQuiz, {\n      task: grade\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 15\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Divider, {\n        hidden: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(Segment, {\n        raised: true,\n        children: [/*#__PURE__*/_jsxDEV(Progress, {\n          active: true,\n          color: \"red\",\n          percent: (1 + cuurQuestion) * 100 / quizzes.length,\n          attached: \"top\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 10\n        }, this), quizzes.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: [\" \", quizzes[cuurQuestion].fquestion + \"?\", \"   \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Question \", cuurQuestion + 1, \" of \", quizzes.length]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {\n            section: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            size: \"big\",\n            fluid: true,\n            basic: optionChosen != quizzes[cuurQuestion].foptionA,\n            color: \"grey\",\n            onClick: () => handleChosen(quizzes[cuurQuestion].foptionA),\n            children: quizzes[cuurQuestion].foptionA\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {\n            hidden: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            size: \"big\",\n            fluid: true,\n            basic: optionChosen != quizzes[cuurQuestion].foptionB,\n            color: \"grey\",\n            onClick: () => handleChosen(quizzes[cuurQuestion].foptionB),\n            children: quizzes[cuurQuestion].foptionB\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 2\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {\n            hidden: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            size: \"big\",\n            fluid: true,\n            basic: optionChosen != quizzes[cuurQuestion].foptionC,\n            color: \"grey\",\n            onClick: () => handleChosen(quizzes[cuurQuestion].foptionC),\n            children: quizzes[cuurQuestion].foptionC\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {\n            hidden: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            size: \"big\",\n            fluid: true,\n            basic: optionChosen != quizzes[cuurQuestion].foptionD,\n            color: \"grey\",\n            onClick: () => handleChosen(quizzes[cuurQuestion].foptionD),\n            children: quizzes[cuurQuestion].foptionD\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {\n            section: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 7\n          }, this), cuurQuestion == quizzes.length - 1 ? /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/Result/\" + id,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              onClick: () => handleResult(),\n              animated: \"fade\",\n              children: [/*#__PURE__*/_jsxDEV(Button.Content, {\n                visible: true,\n                children: \"Finish Quiz\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 10\n              }, this), /*#__PURE__*/_jsxDEV(Button.Content, {\n                hidden: true,\n                children: \"View result\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 7\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 9\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: /*#__PURE__*/_jsxDEV(Button.Group, {\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                onClick: () => nextQuestion(),\n                disabled: !optionChosen,\n                content: \"Continue\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 110,\n                columnNumber: 9\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 10\n            }, this)\n          }, void 0, false)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 19\n        }, this) : /*#__PURE__*/_jsxDEV(Segment, {\n          loading: true,\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"No Qts\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 38\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Progress, {\n          active: true,\n          color: \"red\",\n          percent: (1 + cuurQuestion) * 100 / quizzes.length,\n          attached: \"bottom\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Quiz, \"G8FZB+k8G6P8rqQKPZlYCx421k0=\", false, function () {\n  return [useParams, useSelector, useSelector, useDispatch];\n});\n\n_c = Quiz;\n\nvar _c;\n\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"sources":["C:/Smart-Virtual-Classroom/client/src/Components/Quiz/Quiz.js"],"names":["React","useState","useEffect","useDispatch","useSelector","useParams","Link","Icon","Image","Button","Form","Segment","Progress","Container","Header","Divider","isAuth","getListQuestionTasksById","assignGradeToStudent","getDetailByTaskByStudent","getQuizzes","EndQuiz","Quiz","id","quizzes","state","grades","listQuestion","grade","objgrade","setObjGrade","score","setScore","cuurQuestion","setCurrQuestion","optionChosen","setOptionChosen","listReponse","finish","setFinish","nextQuestion","correct_answer","push","console","log","dispatch","handleResult","handleChosen","option","length","fquestion","foptionA","foptionB","foptionC","foptionD"],"mappings":"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","sourcesContent":["import React,{useState,useEffect} from 'react'\r\nimport {useDispatch,useSelector} from 'react-redux';\r\nimport { useParams } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\nimport {Icon, Image,Button, Form, Segment,Progress, Container,Header, Divider} from 'semantic-ui-react';\r\nimport { isAuth } from '../../helpers/auth.js';\r\nimport { getListQuestionTasksById,assignGradeToStudent, getDetailByTaskByStudent } from '../../redux/slices/Grade.js';\r\nimport { getQuizzes } from \"../../redux/slices/Quiz.js\";\r\nimport EndQuiz from './EndQuiz.js';\r\n\r\n\r\nexport default function Quiz() {\r\n\r\n  const {id} = useParams();\r\n  const quizzes = useSelector( state => state.grades.listQuestion);\r\n  const grade = useSelector( state => state.grades.grade);\r\n  const [objgrade , setObjGrade] =useState({\"_id\" : null , \"grade\" :0,\"listReponse\":[]})\r\n     const [score,setScore] = useState(0);\r\n    const [cuurQuestion,setCurrQuestion] = useState(0);\r\n    const [optionChosen,setOptionChosen]= useState('');\r\n    const [listReponse] = useState([]);\r\n    const [finish,setFinish] = useState(false);\r\n\r\n   \r\n    const nextQuestion = () =>{\r\n   \r\n      if(optionChosen===quizzes[cuurQuestion].correct_answer)\r\n  setScore(score+1);\r\n      setCurrQuestion(cuurQuestion+1);\r\n      listReponse.push(optionChosen);\r\nconsole.log(listReponse);\r\n      setOptionChosen(\"\")\r\n    \r\n  \r\n      \r\n    }\r\n    console.log(quizzes)\r\n    const dispatch = useDispatch();\r\n    const handleResult = () =>{\r\n      if(optionChosen===quizzes[cuurQuestion].correct_answer){\r\n        setScore(score+1);\r\n      }\r\n      \r\n      listReponse.push(optionChosen);\r\n      \r\n\r\n      dispatch(assignGradeToStudent({\"_id\" :id,\"grade\" : score,\"listReponse\" : listReponse }));\r\n\r\n      setFinish(true);\r\n    \r\n    }\r\nconst handleChosen = (option) =>{\r\n \r\n  setOptionChosen(optionChosen!= option ? option  : \"\")  \r\n}\r\n\r\n useEffect(()=>{\r\n  \r\n // dispatch(getQuizzes());\r\n dispatch(getListQuestionTasksById(id));\r\n },[id]);\r\n\r\n    return (\r\n   \r\n        <div className=\"Quiz\" >\r\n   \r\n   {finish ? (<EndQuiz task={grade}></EndQuiz>) : (\r\n   \r\n   <>\r\n<Divider hidden />\r\n     <Segment raised>\r\n     \r\n         <Progress active color=\"red\" percent={(1+cuurQuestion)*100/quizzes.length} attached='top' />\r\n  \r\n                {\r\n                quizzes.length>0 ? (\r\n               \r\n                  <div>\r\n              \r\n                <h1> {quizzes[cuurQuestion].fquestion+\"?\"}   </h1>\r\n                <p>Question { cuurQuestion+1} of { quizzes.length}</p>\r\n                <Divider section />\r\n   \r\n    \r\n    <Button size=\"big\"fluid basic={optionChosen!=quizzes[cuurQuestion].foptionA} color='grey' onClick={()=>handleChosen(quizzes[cuurQuestion].foptionA)}>{quizzes[cuurQuestion].foptionA}</Button>\r\n    <Divider hidden />\r\n    <br/>\r\n        <Button size=\"big\"  fluid basic={optionChosen!=quizzes[cuurQuestion].foptionB} color='grey' onClick={()=>handleChosen(quizzes[cuurQuestion].foptionB)}>{quizzes[cuurQuestion].foptionB}</Button>\r\n      \r\n <br/>\r\n        <Divider hidden />\r\n   \r\n        \r\n        <Button size=\"big\" fluid basic={optionChosen!=quizzes[cuurQuestion].foptionC} color='grey' onClick={()=>handleChosen(quizzes[cuurQuestion].foptionC)}>{quizzes[cuurQuestion].foptionC}</Button>\r\n        <Divider hidden />\r\n        <br/>\r\n        <Button size=\"big\" fluid basic={optionChosen!=quizzes[cuurQuestion].foptionD} color='grey' onClick={()=>handleChosen(quizzes[cuurQuestion].foptionD)}>{quizzes[cuurQuestion].foptionD}</Button>\r\n    \r\n      <Divider section />\r\n      {cuurQuestion == quizzes.length-1 ? (\r\n        <Link to={\"/Result/\"+id}>\r\n        <Button onClick={()=>handleResult()} animated='fade'>\r\n         <Button.Content visible>Finish Quiz</Button.Content>\r\n      <Button.Content hidden>View result</Button.Content>\r\n        </Button>\r\n        </Link>\r\n      ) :(\r\n        <>\r\n         <Button.Group>\r\n        <Button onClick={()=>nextQuestion()} disabled={!optionChosen} content='Continue'/> \r\n        \r\n        </Button.Group>\r\n        </>\r\n      )}\r\n   \r\n     \r\n                </div>\r\n                    \r\n                  \r\n                 \r\n    \r\n         \r\n                ) : <Segment loading><h1>No Qts</h1> </Segment>\r\n                }\r\n          \r\n          <Progress   active  color=\"red\" percent={(1+cuurQuestion)*100/quizzes.length} attached='bottom' />\r\n          </Segment>\r\n          </>\r\n)}\r\n         \r\n    \r\n        </div>\r\n       \r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}