{"ast":null,"code":"var _jsxFileName = \"C:\\\\Smart-Virtual-Classroom\\\\client\\\\src\\\\Components\\\\Task\\\\ReminderTask.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Card } from 'semantic-ui-react';\nimport { isAuth } from '../../helpers/auth';\nimport { getTasksById } from '../../redux/slices/Grade';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ReminderTask() {\n  _s();\n\n  const grades = useSelector(state => state.grades.grades);\n  const [reminder, setReminder] = useState(false);\n  const currentClass = JSON.parse(localStorage.getItem(\"idClass\"));\n  const taskDetail = {\n    \"idUser\": isAuth()._id,\n    \"idClass\": currentClass._id\n  };\n  grades.forEach(element => {\n    if (element.taskStatus === \"Attribué\") {\n      setReminder(true); //return;\n    }\n  });\n  console.log(grades);\n  const dispatch = useDispatch();\n  console.log(grades);\n  useEffect(() => {\n    dispatch(getTasksById(taskDetail));\n  }, [dispatch]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Card.Content, {\n      children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n        children: \"To Do \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card.Description, {\n        children: reminder ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Check Your Task List You Have Assign Task clic  \", /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/TaskListStudent\",\n            children: \"ici\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 83\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 32\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"All Done Good No Tasks Assign \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 133\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 2\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(ReminderTask, \"JEMAj93tIyOTIp06cEQBMxYKYyk=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = ReminderTask;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReminderTask\");","map":{"version":3,"sources":["C:/Smart-Virtual-Classroom/client/src/Components/Task/ReminderTask.js"],"names":["React","useEffect","useState","useDispatch","useSelector","Link","Card","isAuth","getTasksById","ReminderTask","grades","state","reminder","setReminder","currentClass","JSON","parse","localStorage","getItem","taskDetail","_id","forEach","element","taskStatus","console","log","dispatch"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,SAASC,MAAT,QAAuB,oBAAvB;AACA,SAASC,YAAT,QAA6B,0BAA7B;;;AAEA,eAAe,SAASC,YAAT,GAAwB;AAAA;;AAEnC,QAAMC,MAAM,GAAGN,WAAW,CAAEO,KAAK,IAAIA,KAAK,CAACD,MAAN,CAAaA,MAAxB,CAA1B;AACA,QAAM,CAACE,QAAD,EAAYC,WAAZ,IAA0BX,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAMY,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAX,CAArB;AACA,QAAMC,UAAU,GAAC;AACf,cAASZ,MAAM,GAAGa,GADH;AAEf,eAAYN,YAAY,CAACM;AAFV,GAAjB;AAOAV,EAAAA,MAAM,CAACW,OAAP,CAAeC,OAAO,IAAI;AACtB,QAAGA,OAAO,CAACC,UAAR,KAAqB,UAAxB,EAAmC;AACnCV,MAAAA,WAAW,CAAC,IAAD,CAAX,CADmC,CAEnC;AACC;AAAG,GAJR;AAMAW,EAAAA,OAAO,CAACC,GAAR,CAAYf,MAAZ;AACE,QAAMgB,QAAQ,GAAGvB,WAAW,EAA5B;AACFqB,EAAAA,OAAO,CAACC,GAAR,CAAYf,MAAZ;AAEET,EAAAA,SAAS,CAAC,MAAI;AAEVyB,IAAAA,QAAQ,CAAClB,YAAY,CAACW,UAAD,CAAb,CAAR;AAGA,GALK,EAKJ,CAACO,QAAD,CALI,CAAT;AAQF,sBAEI;AAAA,2BAEI,QAAC,IAAD,CAAM,OAAN;AAAA,8BACJ,QAAC,IAAD,CAAM,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADI,eAMX,QAAC,IAAD,CAAM,WAAN;AAAA,kBACiBd,QAAQ,gBAAK;AAAA,sFAAmD,QAAC,IAAD;AAAM,YAAA,EAAE,EAAC,kBAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAnD;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAL,gBAA0G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADnI;AAAA;AAAA;AAAA;AAAA,cANW;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ,mBAFJ;AAqBH;;GAnDuBH,Y;UAELL,W,EAiBID,W;;;KAnBCM,Y","sourcesContent":["import React, { useEffect } from 'react'\r\nimport { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card } from 'semantic-ui-react'\r\nimport { isAuth } from '../../helpers/auth';\r\nimport { getTasksById } from '../../redux/slices/Grade';\r\n\r\nexport default function ReminderTask() {\r\n\r\n    const grades = useSelector( state => state.grades.grades);\r\n    const [reminder , setReminder] =useState(false)\r\n    const currentClass = JSON.parse(localStorage.getItem(\"idClass\"));\r\n    const taskDetail={\r\n      \"idUser\":isAuth()._id,\r\n      \"idClass\" : currentClass._id,\r\n      \r\n    }\r\n   \r\n\r\n    grades.forEach(element => {\r\n        if(element.taskStatus===\"Attribué\"){\r\n        setReminder(true);\r\n        //return;\r\n        }  })\r\n   \r\n    console.log(grades)\r\n      const dispatch = useDispatch();\r\n    console.log(grades);\r\n \r\n      useEffect(()=>{\r\n       \r\n          dispatch(getTasksById(taskDetail));\r\n         \r\n         \r\n         },[dispatch])\r\n       \r\n\r\n    return (\r\n       \r\n        <>\r\n            \r\n            <Card.Content>\r\n        <Card.Header>To Do </Card.Header>\r\n   \r\n       \r\n\r\n          \r\n <Card.Description>\r\n                { reminder ? ( <p>Check Your Task List You Have Assign Task clic  <Link to=\"/TaskListStudent\">ici</Link> </p>)  : ( <p>All Done Good No Tasks Assign </p>) }\r\n                \r\n                </Card.Description>\r\n        \r\n        \r\n             \r\n      \r\n      </Card.Content>\r\n        </>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}