{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nexport const RetrieveCourses = createAsyncThunk(\"Courses/RetrieveCourses\", async () => {\n  const {\n    data\n  } = await axios.get(\"https://closer-server.herokuapp.com/courses\");\n  return data;\n});\nexport const RetrieveCoursesByIdSeance = createAsyncThunk(\"Courses/RetrieveCoursesByIdSeance\", async idSeance => {\n  const {\n    data\n  } = await axios.get(\"https://closer-server.herokuapp.com/courses/findByIdSeance/\" + idSeance);\n  return data;\n});\nexport const RetrieveCoursesByIdClass = createAsyncThunk(\"Courses/RetrieveCoursesByIdClass\", async idClass => {\n  const {\n    data\n  } = await axios.get(\"https://closer-server.herokuapp.com/courses/findByIdClass/\" + idClass);\n  return data;\n});\nexport const AddCourses = (idSeance, titre, description, multiple_resources, idOwner, idClass) => async dispatch => {\n  console.log(multiple_resources);\n  var formData = new FormData();\n\n  for (const key of Object.keys(multiple_resources)) {\n    formData.append(\"multiple_resources\", multiple_resources[key]);\n  }\n\n  formData.append(\"titre\", titre);\n  formData.append(\"description\", description);\n\n  if (idSeance !== \"\") {\n    formData.append(\"idSeance\", idSeance);\n  }\n\n  formData.append(\"idOwner\", idOwner);\n  formData.append(\"idClass\", idClass);\n  const promise = await axios.post(\"https://closer-server.herokuapp.com/courses/\", formData).then(response => {\n    const CurrentClass = JSON.parse(localStorage.getItem(\"idClass\"));\n    console.log(CurrentClass._id);\n    dispatch(RetrieveCoursesByIdClass(CurrentClass._id));\n    const data = response.data; // assign data\n\n    return data;\n  }).catch(error => {\n    console.log(error);\n  });\n  const data = promise;\n  console.log(\"this is data\");\n  console.log(data);\n  return data;\n};\nexport const UpdateCourses = (coursesId, titre, description, Resources, selectedItem) => async dispatch => {\n  const cour = {\n    titre: titre,\n    description: description,\n    multiple_resources: Resources,\n    idSeance: selectedItem\n  };\n  console.log(\"this is cour\");\n  console.log(cour);\n  const promise = await axios.put(\"https://closer-server.herokuapp.com/courses/\" + coursesId, cour).then(response => {\n    const CurrentClass = JSON.parse(localStorage.getItem(\"idClass\"));\n    console.log(CurrentClass._id);\n    dispatch(RetrieveCoursesByIdClass(CurrentClass._id));\n    const data = response.data; // assign data\n\n    return data;\n  }).catch(error => {\n    console.log(error);\n  });\n  const data = promise;\n  console.log(\"this is data\");\n  console.log(data);\n  return data;\n};\nexport const GetCoursesById = createAsyncThunk(\"Courses/GetCoursesById\", async coursesId => {\n  const promise = await axios.get(\"https://closer-server.herokuapp.com/courses/\" + coursesId).then(response => {\n    console.log(\"this is response\");\n    console.log(response);\n    console.log(\"this is data\");\n    console.log(response.data); //console.log(response);\n\n    const data = response.data; // assign data\n\n    return data;\n  });\n  const data = await promise;\n  return data;\n});\nexport const UpdateResources = createAsyncThunk(\"Courses/UpdateResources\", async resources => {\n  //CoursesSlice.state.Resources.push(resources);\n  console.log(resources);\n  return resources;\n});\nexport const DeleteCourses = createAsyncThunk(\"Courses/DeleteCourses\", async coursesId => {\n  const promise = await axios.delete(\"https://closer-server.herokuapp.com/courses/\" + coursesId).then(response => {\n    console.log(\"this is response\");\n    console.log(response);\n    console.log(\"this is data\");\n    console.log(response.data); //console.log(response);\n\n    const data = response.data; // assign data\n\n    return data;\n  });\n  const data = await promise;\n  return data;\n});\nexport const DeleteResources = createAsyncThunk(\"Courses/DeleteResources\", async index => {\n  return index;\n});\nexport const CoursesSlice = createSlice({\n  name: \"Courses\",\n  initialState: {\n    courses: [],\n    status: null,\n    statusUpdate: null,\n    coursesById: [],\n    coursesBySeance: [],\n    Resources: []\n  },\n  extraReducers: {\n    [RetrieveCourses.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [RetrieveCourses.fulfilled]: (state, {\n      payload\n    }) => {\n      state.courses = payload;\n      state.status = \"success\";\n    },\n    [RetrieveCourses.rejected]: (state, action) => {\n      state.status = \"failed\";\n    },\n    [RetrieveCoursesByIdSeance.fulfilled]: (state, {\n      payload\n    }) => {\n      state.status = \"success\";\n      state.coursesBySeance = payload;\n    },\n    [RetrieveCoursesByIdClass.fulfilled]: (state, {\n      payload\n    }) => {\n      state.status = \"success\";\n      state.courses = payload;\n    },\n    [UpdateResources.fulfilled]: (state, action) => {\n      //state.Resources.push(action.payload);\n      state.Resources.push(action.payload);\n    },\n    [GetCoursesById.fulfilled]: (state, action) => {\n      state.coursesById = action.payload;\n      state.Resources = action.payload.multiple_resources;\n      console.log(state.Resources);\n    },\n    [DeleteCourses.fulfilled]: (state, action) => {\n      state.courses = state.courses.filter(u => {\n        return u._id !== action.payload.result._id;\n      });\n    },\n    [DeleteResources.fulfilled]: (state, action) => {\n      //state.Resources.splice(action.payload, 1);\n      let res = action.payload;\n      let resources = state.Resources.slice();\n      resources = resources.filter(u => {\n        return u.url !== res;\n      });\n      state.Resources = resources;\n    },\n    // [DeleteResources.fulfilled]: (state, action) => {\n    //   let index = action.payload;\n    //   //state.Resources.splice(index,1)\n    // },\n    // [UpdateCourses.fulfilled]: (state, action) => {\n    //   state.statusUpdate = \"success\";\n    //   let cour = action.payload.result;\n    //   let courses = state.courses.slice();\n    //   for (let i = 0, n = courses.length; i < n; i++) {\n    //     if (courses[i]._id === cour._id) {\n    //       //courses[i].idCour = cour.idCour;\n    //       courses[i].titre = cour.titre;\n    //       courses[i].idSeance = cour.idSeance;\n    //       courses[i].dateCreation = cour.dateCreation;\n    //       courses[i].description = cour.description;\n    //       courses[i].multiple_resources = cour.multiple_resources;\n    //       break; // Stop this loop, we found it!\n    //     }\n    //   }\n    //   state.courses = courses;\n    // },\n    // [EditCourses.fulfilled]: (state, action) => {\n    //   // let cour = action.payload;\n    //   // for (let i = 0, n = state.courses.length; i < n; i++) {\n    //   //   if (state.courses[i]._id === cour._id) {\n    //   //     state.courses[i] = cour;\n    //   //     break; // Stop this loop, we found it!\n    //   //   }\n    //   // }\n    //   console.log(\"test\");\n    // }\n    // // //   const index = state.courses.findIndex(\n    // // //     (cour) => cour.id !== action.payload.result\n    // // //   ); //finding index of the item\n    // // //   const newArray = [...state.todos]; //making a new array\n    // // //   newArray[index].completed = true; //changing value in the new array\n    // // //   return {\n    // // //     ...state, //copying the orignal state\n    // // //     todos: newArray, //reassingning todos to new array\n    // // //   };\n    // // // },\n    // AddCourses: (state, action) => {\n    //   console.log(\"this is payload\");\n    //   console.log(action.payload);\n    //   state.courses.push(action.payload.result);\n    // },\n    // GetCoursesById: (state, action) => {\n    //   state.coursesById = action.payload;\n    // },\n    // DeleteCourses: (state, action) => {\n    //   let cour = action.payload;\n    //   let courses = state.courses.slice();\n    //   courses = courses.filter((u) => {\n    //     return u._id !== cour._id;\n    //   });\n    //   state.courses = courses;\n    // },\n    UpdateCourses: (state, action) => {\n      state.statusUpdate = \"success\";\n      let cour = action.payload.result;\n\n      for (let i = 0, n = state.courses.length; i < n; i++) {\n        if (state.courses[i]._id === cour._id) {\n          state.courses[i].titre = cour.titre;\n          state.courses[i].idSeance = cour.idSeance;\n          state.courses[i].dateCreation = cour.dateCreation;\n          state.courses[i].description = cour.description;\n          state.courses[i].multiple_resources = cour.multiple_resources;\n          break; // Stop this loop, we found it!\n        }\n      }\n    },\n    AddCourses: (state, action) => {\n      state.courses.push(action.payload.result);\n    }\n  }\n});\nexport default CoursesSlice.reducer;","map":{"version":3,"sources":["C:/Smart-Virtual-Classroom/client/src/redux/slices/Courses.js"],"names":["createAsyncThunk","createSlice","axios","RetrieveCourses","data","get","RetrieveCoursesByIdSeance","idSeance","RetrieveCoursesByIdClass","idClass","AddCourses","titre","description","multiple_resources","idOwner","dispatch","console","log","formData","FormData","key","Object","keys","append","promise","post","then","response","CurrentClass","JSON","parse","localStorage","getItem","_id","catch","error","UpdateCourses","coursesId","Resources","selectedItem","cour","put","GetCoursesById","UpdateResources","resources","DeleteCourses","delete","DeleteResources","index","CoursesSlice","name","initialState","courses","status","statusUpdate","coursesById","coursesBySeance","extraReducers","pending","state","action","fulfilled","payload","rejected","push","filter","u","result","res","slice","url","i","n","length","dateCreation","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,eAAe,GAAGH,gBAAgB,CAC7C,yBAD6C,EAE7C,YAAY;AACV,QAAM;AAAEI,IAAAA;AAAF,MAAW,MAAMF,KAAK,CAACG,GAAN,CACrB,6CADqB,CAAvB;AAIA,SAAOD,IAAP;AACD,CAR4C,CAAxC;AAWP,OAAO,MAAME,yBAAyB,GAAGN,gBAAgB,CACvD,mCADuD,EAEvD,MAAOO,QAAP,IAAoB;AAClB,QAAM;AAAEH,IAAAA;AAAF,MAAW,MAAMF,KAAK,CAACG,GAAN,CACrB,gEAAgEE,QAD3C,CAAvB;AAIA,SAAOH,IAAP;AACD,CARsD,CAAlD;AAWP,OAAO,MAAMI,wBAAwB,GAAGR,gBAAgB,CACtD,kCADsD,EAEtD,MAAOS,OAAP,IAAmB;AACjB,QAAM;AAAEL,IAAAA;AAAF,MAAW,MAAMF,KAAK,CAACG,GAAN,CACrB,+DAA+DI,OAD1C,CAAvB;AAIA,SAAOL,IAAP;AACD,CARqD,CAAjD;AAWP,OAAO,MAAMM,UAAU,GAAG,CACxBH,QADwB,EAExBI,KAFwB,EAGxBC,WAHwB,EAIxBC,kBAJwB,EAKxBC,OALwB,EAMxBL,OANwB,KAOrB,MAAOM,QAAP,IAAoB;AACvBC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,kBAAZ;AACA,MAAIK,QAAQ,GAAG,IAAIC,QAAJ,EAAf;;AACA,OAAK,MAAMC,GAAX,IAAkBC,MAAM,CAACC,IAAP,CAAYT,kBAAZ,CAAlB,EAAmD;AACjDK,IAAAA,QAAQ,CAACK,MAAT,CAAgB,oBAAhB,EAAsCV,kBAAkB,CAACO,GAAD,CAAxD;AACD;;AACDF,EAAAA,QAAQ,CAACK,MAAT,CAAgB,OAAhB,EAAyBZ,KAAzB;AAEAO,EAAAA,QAAQ,CAACK,MAAT,CAAgB,aAAhB,EAA+BX,WAA/B;;AACA,MAAIL,QAAQ,KAAK,EAAjB,EAAqB;AACnBW,IAAAA,QAAQ,CAACK,MAAT,CAAgB,UAAhB,EAA4BhB,QAA5B;AACD;;AAEDW,EAAAA,QAAQ,CAACK,MAAT,CAAgB,SAAhB,EAA2BT,OAA3B;AACAI,EAAAA,QAAQ,CAACK,MAAT,CAAgB,SAAhB,EAA2Bd,OAA3B;AAEA,QAAMe,OAAO,GAAG,MAAMtB,KAAK,CACxBuB,IADmB,CACd,8CADc,EACkCP,QADlC,EAEnBQ,IAFmB,CAEbC,QAAD,IAAc;AAClB,UAAMC,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAX,CAArB;AACAhB,IAAAA,OAAO,CAACC,GAAR,CAAYW,YAAY,CAACK,GAAzB;AACAlB,IAAAA,QAAQ,CAACP,wBAAwB,CAACoB,YAAY,CAACK,GAAd,CAAzB,CAAR;AACA,UAAM7B,IAAI,GAAGuB,QAAQ,CAACvB,IAAtB,CAJkB,CAMlB;;AACA,WAAOA,IAAP;AACD,GAVmB,EAWnB8B,KAXmB,CAWZC,KAAD,IAAW;AAChBnB,IAAAA,OAAO,CAACC,GAAR,CAAYkB,KAAZ;AACD,GAbmB,CAAtB;AAcA,QAAM/B,IAAI,GAAGoB,OAAb;AACAR,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYb,IAAZ;AACA,SAAOA,IAAP;AACD,CAzCM;AA2CP,OAAO,MAAMgC,aAAa,GAAG,CAC3BC,SAD2B,EAE3B1B,KAF2B,EAG3BC,WAH2B,EAI3B0B,SAJ2B,EAK3BC,YAL2B,KAMxB,MAAOxB,QAAP,IAAoB;AACvB,QAAMyB,IAAI,GAAG;AACX7B,IAAAA,KAAK,EAAEA,KADI;AAEXC,IAAAA,WAAW,EAAEA,WAFF;AAGXC,IAAAA,kBAAkB,EAAEyB,SAHT;AAIX/B,IAAAA,QAAQ,EAAEgC;AAJC,GAAb;AAMAvB,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYuB,IAAZ;AAEA,QAAMhB,OAAO,GAAG,MAAMtB,KAAK,CACxBuC,GADmB,CACf,iDAAiDJ,SADlC,EAC6CG,IAD7C,EAEnBd,IAFmB,CAEbC,QAAD,IAAc;AAClB,UAAMC,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAX,CAArB;AACAhB,IAAAA,OAAO,CAACC,GAAR,CAAYW,YAAY,CAACK,GAAzB;AACAlB,IAAAA,QAAQ,CAACP,wBAAwB,CAACoB,YAAY,CAACK,GAAd,CAAzB,CAAR;AAEA,UAAM7B,IAAI,GAAGuB,QAAQ,CAACvB,IAAtB,CALkB,CAOlB;;AACA,WAAOA,IAAP;AACD,GAXmB,EAYnB8B,KAZmB,CAYZC,KAAD,IAAW;AAChBnB,IAAAA,OAAO,CAACC,GAAR,CAAYkB,KAAZ;AACD,GAdmB,CAAtB;AAeA,QAAM/B,IAAI,GAAGoB,OAAb;AACAR,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYb,IAAZ;AACA,SAAOA,IAAP;AACD,CAnCM;AAqCP,OAAO,MAAMsC,cAAc,GAAG1C,gBAAgB,CAC5C,wBAD4C,EAG5C,MAAOqC,SAAP,IAAqB;AACnB,QAAMb,OAAO,GAAG,MAAMtB,KAAK,CACxBG,GADmB,CACf,iDAAiDgC,SADlC,EAGnBX,IAHmB,CAGbC,QAAD,IAAc;AAClBX,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYU,QAAZ;AACAX,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYU,QAAQ,CAACvB,IAArB,EAJkB,CAKlB;;AACA,UAAMA,IAAI,GAAGuB,QAAQ,CAACvB,IAAtB,CANkB,CAQlB;;AACA,WAAOA,IAAP;AACD,GAbmB,CAAtB;AAeA,QAAMA,IAAI,GAAG,MAAMoB,OAAnB;AACA,SAAOpB,IAAP;AACD,CArB2C,CAAvC;AAwBP,OAAO,MAAMuC,eAAe,GAAG3C,gBAAgB,CAC7C,yBAD6C,EAG7C,MAAO4C,SAAP,IAAqB;AACnB;AACA5B,EAAAA,OAAO,CAACC,GAAR,CAAY2B,SAAZ;AACA,SAAOA,SAAP;AACD,CAP4C,CAAxC;AAUP,OAAO,MAAMC,aAAa,GAAG7C,gBAAgB,CAC3C,uBAD2C,EAG3C,MAAOqC,SAAP,IAAqB;AACnB,QAAMb,OAAO,GAAG,MAAMtB,KAAK,CACxB4C,MADmB,CACZ,iDAAiDT,SADrC,EAGnBX,IAHmB,CAGbC,QAAD,IAAc;AAClBX,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYU,QAAZ;AACAX,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYU,QAAQ,CAACvB,IAArB,EAJkB,CAKlB;;AACA,UAAMA,IAAI,GAAGuB,QAAQ,CAACvB,IAAtB,CANkB,CAQlB;;AACA,WAAOA,IAAP;AACD,GAbmB,CAAtB;AAeA,QAAMA,IAAI,GAAG,MAAMoB,OAAnB;AACA,SAAOpB,IAAP;AACD,CArB0C,CAAtC;AAwBP,OAAO,MAAM2C,eAAe,GAAG/C,gBAAgB,CAC7C,yBAD6C,EAG7C,MAAOgD,KAAP,IAAiB;AACf,SAAOA,KAAP;AACD,CAL4C,CAAxC;AAQP,OAAO,MAAMC,YAAY,GAAGhD,WAAW,CAAC;AACtCiD,EAAAA,IAAI,EAAE,SADgC;AAEtCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,OAAO,EAAE,EADG;AAEZC,IAAAA,MAAM,EAAE,IAFI;AAGZC,IAAAA,YAAY,EAAE,IAHF;AAIZC,IAAAA,WAAW,EAAE,EAJD;AAKZC,IAAAA,eAAe,EAAE,EALL;AAMZlB,IAAAA,SAAS,EAAE;AANC,GAFwB;AAUtCmB,EAAAA,aAAa,EAAE;AACb,KAACtD,eAAe,CAACuD,OAAjB,GAA2B,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC5CD,MAAAA,KAAK,CAACN,MAAN,GAAe,SAAf;AACD,KAHY;AAIb,KAAClD,eAAe,CAAC0D,SAAjB,GAA6B,CAACF,KAAD,EAAQ;AAAEG,MAAAA;AAAF,KAAR,KAAwB;AACnDH,MAAAA,KAAK,CAACP,OAAN,GAAgBU,OAAhB;AACAH,MAAAA,KAAK,CAACN,MAAN,GAAe,SAAf;AACD,KAPY;AAQb,KAAClD,eAAe,CAAC4D,QAAjB,GAA4B,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AAC7CD,MAAAA,KAAK,CAACN,MAAN,GAAe,QAAf;AACD,KAVY;AAWb,KAAC/C,yBAAyB,CAACuD,SAA3B,GAAuC,CAACF,KAAD,EAAQ;AAAEG,MAAAA;AAAF,KAAR,KAAwB;AAC7DH,MAAAA,KAAK,CAACN,MAAN,GAAe,SAAf;AACAM,MAAAA,KAAK,CAACH,eAAN,GAAwBM,OAAxB;AACD,KAdY;AAeb,KAACtD,wBAAwB,CAACqD,SAA1B,GAAsC,CAACF,KAAD,EAAQ;AAAEG,MAAAA;AAAF,KAAR,KAAwB;AAC5DH,MAAAA,KAAK,CAACN,MAAN,GAAe,SAAf;AACAM,MAAAA,KAAK,CAACP,OAAN,GAAgBU,OAAhB;AACD,KAlBY;AAmBb,KAACnB,eAAe,CAACkB,SAAjB,GAA6B,CAACF,KAAD,EAAQC,MAAR,KAAmB;AAC9C;AAEAD,MAAAA,KAAK,CAACrB,SAAN,CAAgB0B,IAAhB,CAAqBJ,MAAM,CAACE,OAA5B;AACD,KAvBY;AAyBb,KAACpB,cAAc,CAACmB,SAAhB,GAA4B,CAACF,KAAD,EAAQC,MAAR,KAAmB;AAC7CD,MAAAA,KAAK,CAACJ,WAAN,GAAoBK,MAAM,CAACE,OAA3B;AACAH,MAAAA,KAAK,CAACrB,SAAN,GAAkBsB,MAAM,CAACE,OAAP,CAAejD,kBAAjC;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAY0C,KAAK,CAACrB,SAAlB;AACD,KA7BY;AA8Bb,KAACO,aAAa,CAACgB,SAAf,GAA2B,CAACF,KAAD,EAAQC,MAAR,KAAmB;AAC5CD,MAAAA,KAAK,CAACP,OAAN,GAAgBO,KAAK,CAACP,OAAN,CAAca,MAAd,CAAsBC,CAAD,IAAO;AAC1C,eAAOA,CAAC,CAACjC,GAAF,KAAU2B,MAAM,CAACE,OAAP,CAAeK,MAAf,CAAsBlC,GAAvC;AACD,OAFe,CAAhB;AAGD,KAlCY;AAoCb,KAACc,eAAe,CAACc,SAAjB,GAA6B,CAACF,KAAD,EAAQC,MAAR,KAAmB;AAC9C;AACA,UAAIQ,GAAG,GAAGR,MAAM,CAACE,OAAjB;AACA,UAAIlB,SAAS,GAAGe,KAAK,CAACrB,SAAN,CAAgB+B,KAAhB,EAAhB;AACAzB,MAAAA,SAAS,GAAGA,SAAS,CAACqB,MAAV,CAAkBC,CAAD,IAAO;AAClC,eAAOA,CAAC,CAACI,GAAF,KAAUF,GAAjB;AACD,OAFW,CAAZ;AAGAT,MAAAA,KAAK,CAACrB,SAAN,GAAkBM,SAAlB;AACD,KA5CY;AA8Cb;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAR,IAAAA,aAAa,EAAE,CAACuB,KAAD,EAAQC,MAAR,KAAmB;AAChCD,MAAAA,KAAK,CAACL,YAAN,GAAqB,SAArB;AACA,UAAId,IAAI,GAAGoB,MAAM,CAACE,OAAP,CAAeK,MAA1B;;AAEA,WAAK,IAAII,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGb,KAAK,CAACP,OAAN,CAAcqB,MAAlC,EAA0CF,CAAC,GAAGC,CAA9C,EAAiDD,CAAC,EAAlD,EAAsD;AACpD,YAAIZ,KAAK,CAACP,OAAN,CAAcmB,CAAd,EAAiBtC,GAAjB,KAAyBO,IAAI,CAACP,GAAlC,EAAuC;AACrC0B,UAAAA,KAAK,CAACP,OAAN,CAAcmB,CAAd,EAAiB5D,KAAjB,GAAyB6B,IAAI,CAAC7B,KAA9B;AACAgD,UAAAA,KAAK,CAACP,OAAN,CAAcmB,CAAd,EAAiBhE,QAAjB,GAA4BiC,IAAI,CAACjC,QAAjC;AACAoD,UAAAA,KAAK,CAACP,OAAN,CAAcmB,CAAd,EAAiBG,YAAjB,GAAgClC,IAAI,CAACkC,YAArC;AACAf,UAAAA,KAAK,CAACP,OAAN,CAAcmB,CAAd,EAAiB3D,WAAjB,GAA+B4B,IAAI,CAAC5B,WAApC;AACA+C,UAAAA,KAAK,CAACP,OAAN,CAAcmB,CAAd,EAAiB1D,kBAAjB,GAAsC2B,IAAI,CAAC3B,kBAA3C;AAEA,gBAPqC,CAO9B;AACR;AACF;AACF,KA5HY;AA8HbH,IAAAA,UAAU,EAAE,CAACiD,KAAD,EAAQC,MAAR,KAAmB;AAC7BD,MAAAA,KAAK,CAACP,OAAN,CAAcY,IAAd,CAAmBJ,MAAM,CAACE,OAAP,CAAeK,MAAlC;AACD;AAhIY;AAVuB,CAAD,CAAhC;AA8IP,eAAelB,YAAY,CAAC0B,OAA5B","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\n\r\nexport const RetrieveCourses = createAsyncThunk(\r\n  \"Courses/RetrieveCourses\",\r\n  async () => {\r\n    const { data } = await axios.get(\r\n      \"https://closer-server.herokuapp.com/courses\"\r\n    );\r\n\r\n    return data;\r\n  }\r\n);\r\n\r\nexport const RetrieveCoursesByIdSeance = createAsyncThunk(\r\n  \"Courses/RetrieveCoursesByIdSeance\",\r\n  async (idSeance) => {\r\n    const { data } = await axios.get(\r\n      \"https://closer-server.herokuapp.com/courses/findByIdSeance/\" + idSeance\r\n    );\r\n\r\n    return data;\r\n  }\r\n);\r\n\r\nexport const RetrieveCoursesByIdClass = createAsyncThunk(\r\n  \"Courses/RetrieveCoursesByIdClass\",\r\n  async (idClass) => {\r\n    const { data } = await axios.get(\r\n      \"https://closer-server.herokuapp.com/courses/findByIdClass/\" + idClass\r\n    );\r\n\r\n    return data;\r\n  }\r\n);\r\n\r\nexport const AddCourses = (\r\n  idSeance,\r\n  titre,\r\n  description,\r\n  multiple_resources,\r\n  idOwner,\r\n  idClass\r\n) => async (dispatch) => {\r\n  console.log(multiple_resources);\r\n  var formData = new FormData();\r\n  for (const key of Object.keys(multiple_resources)) {\r\n    formData.append(\"multiple_resources\", multiple_resources[key]);\r\n  }\r\n  formData.append(\"titre\", titre);\r\n\r\n  formData.append(\"description\", description);\r\n  if (idSeance !== \"\") {\r\n    formData.append(\"idSeance\", idSeance);\r\n  }\r\n\r\n  formData.append(\"idOwner\", idOwner);\r\n  formData.append(\"idClass\", idClass);\r\n\r\n  const promise = await axios\r\n    .post(\"https://closer-server.herokuapp.com/courses/\", formData)\r\n    .then((response) => {\r\n      const CurrentClass = JSON.parse(localStorage.getItem(\"idClass\"));\r\n      console.log(CurrentClass._id);\r\n      dispatch(RetrieveCoursesByIdClass(CurrentClass._id));\r\n      const data = response.data;\r\n\r\n      // assign data\r\n      return data;\r\n    })\r\n    .catch((error) => {\r\n      console.log(error);\r\n    });\r\n  const data = promise;\r\n  console.log(\"this is data\");\r\n  console.log(data);\r\n  return data;\r\n};\r\n\r\nexport const UpdateCourses = (\r\n  coursesId,\r\n  titre,\r\n  description,\r\n  Resources,\r\n  selectedItem\r\n) => async (dispatch) => {\r\n  const cour = {\r\n    titre: titre,\r\n    description: description,\r\n    multiple_resources: Resources,\r\n    idSeance: selectedItem,\r\n  };\r\n  console.log(\"this is cour\");\r\n  console.log(cour);\r\n\r\n  const promise = await axios\r\n    .put(\"https://closer-server.herokuapp.com/courses/\" + coursesId, cour)\r\n    .then((response) => {\r\n      const CurrentClass = JSON.parse(localStorage.getItem(\"idClass\"));\r\n      console.log(CurrentClass._id);\r\n      dispatch(RetrieveCoursesByIdClass(CurrentClass._id));\r\n\r\n      const data = response.data;\r\n\r\n      // assign data\r\n      return data;\r\n    })\r\n    .catch((error) => {\r\n      console.log(error);\r\n    });\r\n  const data = promise;\r\n  console.log(\"this is data\");\r\n  console.log(data);\r\n  return data;\r\n};\r\n\r\nexport const GetCoursesById = createAsyncThunk(\r\n  \"Courses/GetCoursesById\",\r\n\r\n  async (coursesId) => {\r\n    const promise = await axios\r\n      .get(\"https://closer-server.herokuapp.com/courses/\" + coursesId)\r\n\r\n      .then((response) => {\r\n        console.log(\"this is response\");\r\n        console.log(response);\r\n        console.log(\"this is data\");\r\n        console.log(response.data);\r\n        //console.log(response);\r\n        const data = response.data;\r\n\r\n        // assign data\r\n        return data;\r\n      });\r\n\r\n    const data = await promise;\r\n    return data;\r\n  }\r\n);\r\n\r\nexport const UpdateResources = createAsyncThunk(\r\n  \"Courses/UpdateResources\",\r\n\r\n  async (resources) => {\r\n    //CoursesSlice.state.Resources.push(resources);\r\n    console.log(resources);\r\n    return resources;\r\n  }\r\n);\r\n\r\nexport const DeleteCourses = createAsyncThunk(\r\n  \"Courses/DeleteCourses\",\r\n\r\n  async (coursesId) => {\r\n    const promise = await axios\r\n      .delete(\"https://closer-server.herokuapp.com/courses/\" + coursesId)\r\n\r\n      .then((response) => {\r\n        console.log(\"this is response\");\r\n        console.log(response);\r\n        console.log(\"this is data\");\r\n        console.log(response.data);\r\n        //console.log(response);\r\n        const data = response.data;\r\n\r\n        // assign data\r\n        return data;\r\n      });\r\n\r\n    const data = await promise;\r\n    return data;\r\n  }\r\n);\r\n\r\nexport const DeleteResources = createAsyncThunk(\r\n  \"Courses/DeleteResources\",\r\n\r\n  async (index) => {\r\n    return index;\r\n  }\r\n);\r\n\r\nexport const CoursesSlice = createSlice({\r\n  name: \"Courses\",\r\n  initialState: {\r\n    courses: [],\r\n    status: null,\r\n    statusUpdate: null,\r\n    coursesById: [],\r\n    coursesBySeance: [],\r\n    Resources: [],\r\n  },\r\n  extraReducers: {\r\n    [RetrieveCourses.pending]: (state, action) => {\r\n      state.status = \"loading\";\r\n    },\r\n    [RetrieveCourses.fulfilled]: (state, { payload }) => {\r\n      state.courses = payload;\r\n      state.status = \"success\";\r\n    },\r\n    [RetrieveCourses.rejected]: (state, action) => {\r\n      state.status = \"failed\";\r\n    },\r\n    [RetrieveCoursesByIdSeance.fulfilled]: (state, { payload }) => {\r\n      state.status = \"success\";\r\n      state.coursesBySeance = payload;\r\n    },\r\n    [RetrieveCoursesByIdClass.fulfilled]: (state, { payload }) => {\r\n      state.status = \"success\";\r\n      state.courses = payload;\r\n    },\r\n    [UpdateResources.fulfilled]: (state, action) => {\r\n      //state.Resources.push(action.payload);\r\n\r\n      state.Resources.push(action.payload);\r\n    },\r\n\r\n    [GetCoursesById.fulfilled]: (state, action) => {\r\n      state.coursesById = action.payload;\r\n      state.Resources = action.payload.multiple_resources;\r\n      console.log(state.Resources);\r\n    },\r\n    [DeleteCourses.fulfilled]: (state, action) => {\r\n      state.courses = state.courses.filter((u) => {\r\n        return u._id !== action.payload.result._id;\r\n      });\r\n    },\r\n\r\n    [DeleteResources.fulfilled]: (state, action) => {\r\n      //state.Resources.splice(action.payload, 1);\r\n      let res = action.payload;\r\n      let resources = state.Resources.slice();\r\n      resources = resources.filter((u) => {\r\n        return u.url !== res;\r\n      });\r\n      state.Resources = resources;\r\n    },\r\n\r\n    // [DeleteResources.fulfilled]: (state, action) => {\r\n    //   let index = action.payload;\r\n\r\n    //   //state.Resources.splice(index,1)\r\n    // },\r\n    // [UpdateCourses.fulfilled]: (state, action) => {\r\n    //   state.statusUpdate = \"success\";\r\n    //   let cour = action.payload.result;\r\n    //   let courses = state.courses.slice();\r\n    //   for (let i = 0, n = courses.length; i < n; i++) {\r\n    //     if (courses[i]._id === cour._id) {\r\n    //       //courses[i].idCour = cour.idCour;\r\n    //       courses[i].titre = cour.titre;\r\n    //       courses[i].idSeance = cour.idSeance;\r\n    //       courses[i].dateCreation = cour.dateCreation;\r\n    //       courses[i].description = cour.description;\r\n    //       courses[i].multiple_resources = cour.multiple_resources;\r\n\r\n    //       break; // Stop this loop, we found it!\r\n    //     }\r\n    //   }\r\n    //   state.courses = courses;\r\n    // },\r\n    // [EditCourses.fulfilled]: (state, action) => {\r\n    //   // let cour = action.payload;\r\n    //   // for (let i = 0, n = state.courses.length; i < n; i++) {\r\n    //   //   if (state.courses[i]._id === cour._id) {\r\n    //   //     state.courses[i] = cour;\r\n    //   //     break; // Stop this loop, we found it!\r\n    //   //   }\r\n    //   // }\r\n\r\n    //   console.log(\"test\");\r\n    // }\r\n\r\n    // // //   const index = state.courses.findIndex(\r\n    // // //     (cour) => cour.id !== action.payload.result\r\n    // // //   ); //finding index of the item\r\n    // // //   const newArray = [...state.todos]; //making a new array\r\n    // // //   newArray[index].completed = true; //changing value in the new array\r\n    // // //   return {\r\n    // // //     ...state, //copying the orignal state\r\n    // // //     todos: newArray, //reassingning todos to new array\r\n    // // //   };\r\n    // // // },\r\n\r\n    // AddCourses: (state, action) => {\r\n    //   console.log(\"this is payload\");\r\n    //   console.log(action.payload);\r\n    //   state.courses.push(action.payload.result);\r\n    // },\r\n    // GetCoursesById: (state, action) => {\r\n    //   state.coursesById = action.payload;\r\n    // },\r\n    // DeleteCourses: (state, action) => {\r\n    //   let cour = action.payload;\r\n    //   let courses = state.courses.slice();\r\n    //   courses = courses.filter((u) => {\r\n    //     return u._id !== cour._id;\r\n    //   });\r\n    //   state.courses = courses;\r\n    // },\r\n\r\n    UpdateCourses: (state, action) => {\r\n      state.statusUpdate = \"success\";\r\n      let cour = action.payload.result;\r\n\r\n      for (let i = 0, n = state.courses.length; i < n; i++) {\r\n        if (state.courses[i]._id === cour._id) {\r\n          state.courses[i].titre = cour.titre;\r\n          state.courses[i].idSeance = cour.idSeance;\r\n          state.courses[i].dateCreation = cour.dateCreation;\r\n          state.courses[i].description = cour.description;\r\n          state.courses[i].multiple_resources = cour.multiple_resources;\r\n\r\n          break; // Stop this loop, we found it!\r\n        }\r\n      }\r\n    },\r\n\r\n    AddCourses: (state, action) => {\r\n      state.courses.push(action.payload.result);\r\n    },\r\n  },\r\n});\r\n\r\nexport default CoursesSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}