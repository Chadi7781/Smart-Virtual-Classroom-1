{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nexport const rendreTask = createAsyncThunk(\"Task/rendreTask\", async grade => {\n  const {\n    response\n  } = await axios.put(`https://closer-server.herokuapp.com/grade/rendreTask/${grade.id}`, grade);\n  return response;\n});\nexport const getDetailByTaskByStudent = createAsyncThunk(\"Grade/getDetailByTaskByStudent\", async id => {\n  const {\n    data\n  } = await axios.get(`https://closer-server.herokuapp.com/grade/DetailByTaskByStudent/${id}`);\n  return data;\n});\nexport const getListQuestionTasksById = createAsyncThunk(\"Grade/getListQuestionById\", async id => {\n  const {\n    data\n  } = await axios.get(`https://closer-server.herokuapp.com/grade/listQuestion/${id}`);\n  return data;\n});\nexport const assignGradeToStudent = createAsyncThunk(\"Task/UpdateTask\", async grade => {\n  const {\n    response\n  } = await axios.put(`https://closer-server.herokuapp.com/grade/`, grade);\n  return response;\n});\nexport const getTasksById = createAsyncThunk(\"Grade/getTasksById\", async id => {\n  const {\n    data\n  } = await axios.get(`https://closer-server.herokuapp.com/grade/${id}`);\n  return data;\n});\nexport const getGrades = createAsyncThunk(\"Grade/getgrade\", async () => {\n  const {\n    data\n  } = await axios.get(\"https://closer-server.herokuapp.com/grade\");\n  return data;\n});\nexport const postGrades = createAsyncThunk(\"Grade/posteGrade\", async grade => {\n  const {\n    response\n  } = await axios.post(\"https://closer-server.herokuapp.com/grade\", grade);\n  return response.data;\n});\nexport const gradeSlice = createSlice({\n  name: \"Grade\",\n  initialState: {\n    grades: [],\n    listQuestion: [],\n    status: null\n  },\n  extraReducers: {\n    [rendreTask.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [rendreTask.fulfilled]: (state, action) => {\n      state.grades = action.payload;\n    },\n    [rendreTask.rejected]: (state, action) => {\n      state.status = \"failed\";\n    },\n    [getGrades.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [getGrades.fulfilled]: (state, {\n      payload\n    }) => {\n      state.grades = payload;\n      state.status = \"success\";\n    },\n    [getGrades.rejected]: (state, action) => {\n      state.status = \"failed\";\n    },\n    [getTasksById.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [getTasksById.fulfilled]: (state, {\n      payload\n    }) => {\n      state.grades = payload;\n      state.status = \"success\";\n    },\n    [getTasksById.rejected]: (state, action) => {\n      state.status = \"failed\";\n    },\n    postGrades: (state, action) => {\n      state.grades.push(action.payload);\n    },\n    [assignGradeToStudent.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [assignGradeToStudent.fulfilled]: (state, {\n      payload\n    }) => {\n      state.grades = payload;\n    },\n    [assignGradeToStudent.rejected]: (state, action) => {\n      state.status = \"failed\";\n    },\n    [getListQuestionTasksById.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [getListQuestionTasksById.fulfilled]: (state, action) => {\n      //console.log(action.payload);\n      state.listQuestion = action.payload[0].task.listQuestion;\n    },\n    [getListQuestionTasksById.rejected]: (state, action) => {\n      state.status = \"failed\";\n    },\n    [getDetailByTaskByStudent.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [getDetailByTaskByStudent.fulfilled]: (state, {\n      payload\n    }) => {\n      state.grades = payload;\n    },\n    [getDetailByTaskByStudent.rejected]: (state, action) => {\n      state.status = \"failed\";\n    }\n  }\n});\nexport default gradeSlice.reducer;","map":{"version":3,"sources":["C:/Smart-Virtual-Classroom/client/src/redux/slices/Grade.js"],"names":["createAsyncThunk","createSlice","axios","rendreTask","grade","response","put","id","getDetailByTaskByStudent","data","get","getListQuestionTasksById","assignGradeToStudent","getTasksById","getGrades","postGrades","post","gradeSlice","name","initialState","grades","listQuestion","status","extraReducers","pending","state","action","fulfilled","payload","rejected","push","task","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\n\r\nexport const rendreTask = createAsyncThunk(\"Task/rendreTask\", async (grade) => {\r\n  const { response } = await axios.put(\r\n    `https://closer-server.herokuapp.com/grade/rendreTask/${grade.id}`,\r\n    grade\r\n  );\r\n\r\n  return response;\r\n});\r\nexport const getDetailByTaskByStudent = createAsyncThunk(\r\n  \"Grade/getDetailByTaskByStudent\",\r\n  async (id) => {\r\n    const { data } = await axios.get(\r\n      `https://closer-server.herokuapp.com/grade/DetailByTaskByStudent/${id}`\r\n    );\r\n\r\n    return data;\r\n  }\r\n);\r\nexport const getListQuestionTasksById = createAsyncThunk(\r\n  \"Grade/getListQuestionById\",\r\n  async (id) => {\r\n    const { data } = await axios.get(\r\n      `https://closer-server.herokuapp.com/grade/listQuestion/${id}`\r\n    );\r\n\r\n    return data;\r\n  }\r\n);\r\nexport const assignGradeToStudent = createAsyncThunk(\r\n  \"Task/UpdateTask\",\r\n  async (grade) => {\r\n    const { response } = await axios.put(\r\n      `https://closer-server.herokuapp.com/grade/`,\r\n      grade\r\n    );\r\n\r\n    return response;\r\n  }\r\n);\r\nexport const getTasksById = createAsyncThunk(\r\n  \"Grade/getTasksById\",\r\n  async (id) => {\r\n    const { data } = await axios.get(\r\n      `https://closer-server.herokuapp.com/grade/${id}`\r\n    );\r\n\r\n    return data;\r\n  }\r\n);\r\n\r\nexport const getGrades = createAsyncThunk(\"Grade/getgrade\", async () => {\r\n  const { data } = await axios.get(\"https://closer-server.herokuapp.com/grade\");\r\n\r\n  return data;\r\n});\r\n\r\nexport const postGrades = createAsyncThunk(\r\n  \"Grade/posteGrade\",\r\n  async (grade) => {\r\n    const { response } = await axios.post(\r\n      \"https://closer-server.herokuapp.com/grade\",\r\n      grade\r\n    );\r\n\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const gradeSlice = createSlice({\r\n  name: \"Grade\",\r\n  initialState: {\r\n    grades: [],\r\n    listQuestion: [],\r\n\r\n    status: null,\r\n  },\r\n  extraReducers: {\r\n    [rendreTask.pending]: (state, action) => {\r\n      state.status = \"loading\";\r\n    },\r\n    [rendreTask.fulfilled]: (state, action) => {\r\n      state.grades = action.payload;\r\n    },\r\n    [rendreTask.rejected]: (state, action) => {\r\n      state.status = \"failed\";\r\n    },\r\n    [getGrades.pending]: (state, action) => {\r\n      state.status = \"loading\";\r\n    },\r\n    [getGrades.fulfilled]: (state, { payload }) => {\r\n      state.grades = payload;\r\n      state.status = \"success\";\r\n    },\r\n    [getGrades.rejected]: (state, action) => {\r\n      state.status = \"failed\";\r\n    },\r\n    [getTasksById.pending]: (state, action) => {\r\n      state.status = \"loading\";\r\n    },\r\n    [getTasksById.fulfilled]: (state, { payload }) => {\r\n      state.grades = payload;\r\n      state.status = \"success\";\r\n    },\r\n    [getTasksById.rejected]: (state, action) => {\r\n      state.status = \"failed\";\r\n    },\r\n\r\n    postGrades: (state, action) => {\r\n      state.grades.push(action.payload);\r\n    },\r\n    [assignGradeToStudent.pending]: (state, action) => {\r\n      state.status = \"loading\";\r\n    },\r\n    [assignGradeToStudent.fulfilled]: (state, { payload }) => {\r\n      state.grades = payload;\r\n    },\r\n    [assignGradeToStudent.rejected]: (state, action) => {\r\n      state.status = \"failed\";\r\n    },\r\n    [getListQuestionTasksById.pending]: (state, action) => {\r\n      state.status = \"loading\";\r\n    },\r\n    [getListQuestionTasksById.fulfilled]: (state, action) => {\r\n      //console.log(action.payload);\r\n      state.listQuestion = action.payload[0].task.listQuestion;\r\n    },\r\n    [getListQuestionTasksById.rejected]: (state, action) => {\r\n      state.status = \"failed\";\r\n    },\r\n    [getDetailByTaskByStudent.pending]: (state, action) => {\r\n      state.status = \"loading\";\r\n    },\r\n    [getDetailByTaskByStudent.fulfilled]: (state, { payload }) => {\r\n      state.grades = payload;\r\n    },\r\n    [getDetailByTaskByStudent.rejected]: (state, action) => {\r\n      state.status = \"failed\";\r\n    },\r\n  },\r\n});\r\n\r\nexport default gradeSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}