{"ast":null,"code":"var _jsxFileName = \"C:\\\\Smart-Virtual-Classroom\\\\client\\\\src\\\\Components\\\\Task\\\\ModalTask.js\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport React, { useState } from \"react\";\nimport Dropzone from \"react-dropzone-uploader\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Button, Dropdown, Feed, Grid, Header, Icon, Image, List, Modal } from \"semantic-ui-react\";\nimport * as Yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport FileUploadEdit from \"../../utlis/FileUploadEdit\";\nimport { isAuth } from \"../../helpers/auth\";\nimport { DeleteResources, UpdateResources, uploadFile } from \"../../redux/slices/Task\";\nimport { UpdateProfilePicture } from \"../../redux/slices/User\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ModalTask({\n  task\n}) {\n  _s();\n\n  const Resources = useSelector(state => state.tasks.files);\n  const [open, setOpen] = React.useState(false);\n  const dispatch = useDispatch();\n  const [Images, setImages] = useState([]);\n  const [enableUpload, setEnableUpload] = useState(false);\n  const [up, setUp] = useState(0);\n\n  const updateImages = newImages => {\n    if (newImages === null) {\n      task.listReponse.forEach(element => {\n        setImages(element);\n      });\n    } else {\n      setImages(Images.concat(newImages));\n    }\n  };\n\n  const [taskEdit, setTaskEdit] = useState(task);\n  const formik = useFormik({\n    initialValues: {\n      _id: task._id,\n      grade: task.grade,\n      taskStatus: task.taskStatus,\n      student: task.student,\n      task: task.task,\n      listReponse: []\n    },\n    onSubmit: async values => {\n      try {\n        console.log(\"cc\");\n        console.log(Images);\n\n        if (Images.length !== 0) {\n          values.listReponse = Images;\n          alert(\"images : here : \" + values.listReponse);\n        } else {\n          values.listReponse = task.listReponse;\n        }\n\n        setEnableUpload(true);\n        console.log(values);\n        const res = await dispatch(updateTask(values)).then(() => {\n          dispatch(getTaskByTeacher({\n            \"idUser\": task.creator,\n            \"idClass\": task.cour\n          }));\n        });\n      } catch (error) {\n        alert(error);\n      }\n    }\n  });\n\n  const closeModel = () => {\n    setOpen(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Modal, {\n      onClose: () => setOpen(false),\n      onOpen: () => setOpen(true),\n      open: open,\n      trigger: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ui two buttons\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          icon: \"cloud upload\",\n          children: [/*#__PURE__*/_jsxDEV(Icon, {\n            name: \"cloud upload\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, this), \"upload File\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this),\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        children: \"Select a Photo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Content, {\n        children: /*#__PURE__*/_jsxDEV(Modal.Description, {\n          children: /*#__PURE__*/_jsxDEV(FileUploadEdit //  refreshFunction={updateImages}\n          // listfile={qes.Filee}  \n          , {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Actions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          color: \"black\",\n          onClick: () => setOpen(false),\n          children: \"Discard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          content: \"Yep, Save\",\n          labelPosition: \"right\",\n          icon: \"checkmark\",\n          onClick: closeModel,\n          color: \"red\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 14\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 1\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ModalTask, \"oZNDJsrOfw2kVzivZvnVI1Kg5eU=\", false, function () {\n  return [useSelector, useDispatch, useFormik];\n});\n\n_c = ModalTask;\n\nvar _c;\n\n$RefreshReg$(_c, \"ModalTask\");","map":{"version":3,"sources":["C:/Smart-Virtual-Classroom/client/src/Components/Task/ModalTask.js"],"names":["axios","React","useState","Dropzone","useDispatch","useSelector","Button","Dropdown","Feed","Grid","Header","Icon","Image","List","Modal","Yup","useFormik","FileUploadEdit","isAuth","DeleteResources","UpdateResources","uploadFile","UpdateProfilePicture","ModalTask","task","Resources","state","tasks","files","open","setOpen","dispatch","Images","setImages","enableUpload","setEnableUpload","up","setUp","updateImages","newImages","listReponse","forEach","element","concat","taskEdit","setTaskEdit","formik","initialValues","_id","grade","taskStatus","student","onSubmit","values","console","log","length","alert","res","updateTask","then","getTaskByTeacher","creator","cour","error","closeModel"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport React, { useState } from \"react\";\nimport Dropzone from \"react-dropzone-uploader\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  Button,\n  Dropdown,\n  Feed,\n  Grid,\n  Header,\n  Icon,\n  Image,\n  List,\n  Modal,\n} from \"semantic-ui-react\";\nimport * as Yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport FileUploadEdit from \"../../utlis/FileUploadEdit\";\nimport { isAuth } from \"../../helpers/auth\";\nimport { DeleteResources, UpdateResources, uploadFile } from \"../../redux/slices/Task\";\nimport { UpdateProfilePicture } from \"../../redux/slices/User\";\n\nexport default function ModalTask({task}) {\n  const Resources = useSelector((state) => state.tasks.files);\n\n  const [open, setOpen] = React.useState(false);\n\n  const dispatch = useDispatch();\n\n  const [Images, setImages] = useState([]);\n  const [enableUpload, setEnableUpload] = useState(false);\n\n  const [up, setUp] = useState(0);\n\n  const updateImages = (newImages) => {\n    if (newImages === null) {\n      task.listReponse.forEach((element) => {\n        setImages(element);\n      });\n    } else {\n      setImages(Images.concat(newImages));\n    }\n  };\n    const [taskEdit , setTaskEdit] = useState(task);\n    \n\n\n    const formik = useFormik({\n      initialValues: {\n        _id : task._id,\n        grade: task.grade,\n        taskStatus: task.taskStatus,\n      student : task.student,\n        task: task.task,\n        listReponse: [],\n      \n\n      },\n  \n  \n      onSubmit: async (values) => {\n       \n        try {\n          console.log(\"cc\");\n          console.log(Images);\n          if(Images.length !==0 )\n         { values.listReponse = Images;\n          alert(\"images : here : \"+values.listReponse);\n        }\n        else{\n          values.listReponse = task.listReponse;\n        }\n        setEnableUpload(true)\n        console.log(values);\n        const res = await dispatch(updateTask(values)).then(()=>{\n          dispatch(getTaskByTeacher({\"idUser\":task.creator,\"idClass\":task.cour}))\n      });\n        } catch (error) {\n          alert(error);\n        }\n      },\n    });\n  const closeModel = () => {\n  \n   \n   \n    setOpen(false);\n  };\n\n\n\n  return (\n    <div>\n     \n\n    \n<Modal\n        onClose={() => setOpen(false)}\n        onOpen={() => setOpen(true)}\n        open={open}\n        trigger={\n          <div className='ui two buttons'>\n          <Button \n          icon=\"cloud upload\"\n          >\n            <Icon name=\"cloud upload\"></Icon>\n              upload File\n            </Button>\n            </div>\n         \n        }\n      >\n        <Modal.Header>Select a Photo</Modal.Header>\n        <Modal.Content>\n          <Modal.Description>\n            \n          <FileUploadEdit\n          //  refreshFunction={updateImages}\n           // listfile={qes.Filee}  \n          />\n\n          </Modal.Description>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button color=\"black\" onClick={() => setOpen(false)}>\n            Discard\n          </Button>\n          <Button\n            content=\"Yep, Save\"\n            labelPosition=\"right\"\n            icon=\"checkmark\"\n            onClick={closeModel}\n            color=\"red\"\n          />\n             <br></br>\n        \n        </Modal.Actions>\n     \n      </Modal>\n   \n      \n\n\n    </div>\n  );\n}\n\n\n"]},"metadata":{},"sourceType":"module"}