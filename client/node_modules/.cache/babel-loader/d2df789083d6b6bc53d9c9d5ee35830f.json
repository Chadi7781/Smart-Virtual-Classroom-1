{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { questionsApi } from \"../../api/api\";\nlet initialState = {\n  questions: [],\n  selectedQuestions: {},\n  errors: \"\"\n};\nconst questionSlice = createSlice({\n  name: \"questions\",\n  initialState,\n  reducers: {\n    getProducts(state, action) {\n      state.questions = action.payload;\n    },\n\n    setErrors(state, action) {\n      state.errors = action.payload;\n    },\n\n    addQuestion: (state, action) => {\n      const payload = action.payload;\n      state.questions.push(payload);\n    },\n\n    selectQuestion(state, action) {\n      state.selectedQuestions = action.payload;\n    },\n\n    unselectQuestion(state) {\n      state.selectedQuestions = null;\n    },\n\n    updateQuestion: (state, action) => {\n      alert(\"hello from slices \");\n      const payload = action.payload;\n      alert(JSON.stringify(payload));\n      const index = state.questions.findIndex(item => item._id === payload._id);\n\n      if (index !== -1) {\n        state.questions[index] = payload;\n      }\n    }\n  }\n});\nexport const fetchQuestions = id => async dispatch => {\n  const res = questionsApi.getQuestions(id);\n  res.then(data => {\n    dispatch(getProducts(data));\n  });\n};\nexport const fetchQuestionsByTags = (id, tag) => async dispatch => {\n  const res = questionsApi.getQuestionsByTags(id, tag);\n  res.then(data => {\n    dispatch(getProducts(data));\n  });\n};\nexport const fetchSelectedQuestion = data => async dispatch => {\n  dispatch(selectQuestion(data));\n};\nexport const selectQuestions = state => {\n  return [state.questions.questions, state.questions.errors];\n};\nexport const selectOne = state => {\n  return [state.questions.selectedQuestions, state.questions.errors];\n};\nexport const selectOneQuestion = (id, state) => {\n  console.log(\"state: \" + state);\n  console.log(\"id: \" + id);\n  return [state.questions.find(item => item._id === id), state.questions.errors];\n};\nexport const {\n  getProducts,\n  updateQuestion,\n  setErrors,\n  addQuestion,\n  selectQuestion,\n  unselectQuestion\n} = questionSlice.actions;\nexport default questionSlice.reducer;","map":{"version":3,"sources":["C:/Smart-Virtual-Classroom/client/src/redux/slices/questionslice.js"],"names":["createSlice","questionsApi","initialState","questions","selectedQuestions","errors","questionSlice","name","reducers","getProducts","state","action","payload","setErrors","addQuestion","push","selectQuestion","unselectQuestion","updateQuestion","alert","JSON","stringify","index","findIndex","item","_id","fetchQuestions","id","dispatch","res","getQuestions","then","data","fetchQuestionsByTags","tag","getQuestionsByTags","fetchSelectedQuestion","selectQuestions","selectOne","selectOneQuestion","console","log","find","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { questionsApi } from \"../../api/api\";\r\n\r\nlet initialState = {\r\n  questions: [],\r\n  selectedQuestions: {},\r\n  errors: \"\",\r\n};\r\n\r\nconst questionSlice = createSlice({\r\n  name: \"questions\",\r\n  initialState,\r\n  reducers: {\r\n    getProducts(state, action) {\r\n      state.questions = action.payload;\r\n    },\r\n    setErrors(state, action) {\r\n      state.errors = action.payload;\r\n    },\r\n    addQuestion: (state, action) => {\r\n      const payload = action.payload;\r\n      state.questions.push(payload);\r\n    },\r\n\r\n    selectQuestion(state, action) {\r\n      state.selectedQuestions = action.payload;\r\n    },\r\n    unselectQuestion(state) {\r\n      state.selectedQuestions = null;\r\n    },\r\n\r\n    updateQuestion: (state, action) => {\r\n      alert(\"hello from slices \");\r\n\r\n      const payload = action.payload;\r\n      alert(JSON.stringify(payload));\r\n      const index = state.questions.findIndex(\r\n        (item) => item._id === payload._id\r\n      );\r\n      if (index !== -1) {\r\n        state.questions[index] = payload;\r\n      }\r\n    },\r\n  },\r\n});\r\nexport const fetchQuestions = (id) => async (dispatch) => {\r\n  const res = questionsApi.getQuestions(id);\r\n\r\n  res.then((data) => {\r\n    dispatch(getProducts(data));\r\n  });\r\n};\r\n\r\nexport const fetchQuestionsByTags = (id,tag) => async (dispatch) => {\r\n  const res = questionsApi.getQuestionsByTags(id,tag);\r\n\r\n  res.then((data) => {\r\n    dispatch(getProducts(data));\r\n  });\r\n};\r\nexport const fetchSelectedQuestion = (data) => async (dispatch) => {\r\n  dispatch(selectQuestion(data));\r\n};\r\nexport const selectQuestions = (state) => {\r\n  return [state.questions.questions, state.questions.errors];\r\n};\r\nexport const selectOne = (state) => {\r\n  return [state.questions.selectedQuestions, state.questions.errors];\r\n};\r\nexport const selectOneQuestion = (id, state) => {\r\n  console.log(\"state: \" + state);\r\n  console.log(\"id: \" + id);\r\n\r\n  return [\r\n    state.questions.find((item) => item._id === id),\r\n    state.questions.errors,\r\n  ];\r\n};\r\nexport const {\r\n  getProducts,\r\n  updateQuestion,\r\n  setErrors,\r\n  addQuestion,\r\n  selectQuestion,\r\n  unselectQuestion,\r\n} = questionSlice.actions;\r\nexport default questionSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}