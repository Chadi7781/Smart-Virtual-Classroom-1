{"ast":null,"code":"/*eslint no-unused-vars: 0*/\nimport FabricCanvasTool from './fabrictool';\n\nconst fabric = require('fabric').fabric;\n\nclass Rectangle extends FabricCanvasTool {\n  configureCanvas(props) {\n    let canvas = this._canvas;\n    canvas.isDrawingMode = canvas.selection = false;\n    canvas.forEachObject(o => o.selectable = o.evented = false);\n    this._width = props.lineWidth;\n    this._color = props.lineColor;\n    this._fill = props.fillColor;\n  }\n\n  doMouseDown(o) {\n    let canvas = this._canvas;\n    this.isDown = true;\n    let pointer = canvas.getPointer(o.e);\n    this.startX = pointer.x;\n    this.startY = pointer.y;\n    this.rect = new fabric.Rect({\n      left: this.startX,\n      top: this.startY,\n      originX: 'left',\n      originY: 'top',\n      width: pointer.x - this.startX,\n      height: pointer.y - this.startY,\n      stroke: this._color,\n      strokeWidth: this._width,\n      fill: this._fill,\n      transparentCorners: false,\n      selectable: false,\n      evented: false,\n      strokeUniform: true,\n      noScaleCache: false,\n      angle: 0\n    });\n    canvas.add(this.rect);\n  }\n\n  doMouseMove(o) {\n    if (!this.isDown) return;\n    let canvas = this._canvas;\n    let pointer = canvas.getPointer(o.e);\n\n    if (this.startX > pointer.x) {\n      this.rect.set({\n        left: Math.abs(pointer.x)\n      });\n    }\n\n    if (this.startY > pointer.y) {\n      this.rect.set({\n        top: Math.abs(pointer.y)\n      });\n    }\n\n    this.rect.set({\n      width: Math.abs(this.startX - pointer.x)\n    });\n    this.rect.set({\n      height: Math.abs(this.startY - pointer.y)\n    });\n    this.rect.setCoords();\n    canvas.renderAll();\n  }\n\n  doMouseUp(o) {\n    this.isDown = false;\n  }\n\n}\n\nexport default Rectangle;","map":{"version":3,"sources":["C:/Smart-Virtual-Classroom/client/src/Components/board/rectangle.js"],"names":["FabricCanvasTool","fabric","require","Rectangle","configureCanvas","props","canvas","_canvas","isDrawingMode","selection","forEachObject","o","selectable","evented","_width","lineWidth","_color","lineColor","_fill","fillColor","doMouseDown","isDown","pointer","getPointer","e","startX","x","startY","y","rect","Rect","left","top","originX","originY","width","height","stroke","strokeWidth","fill","transparentCorners","strokeUniform","noScaleCache","angle","add","doMouseMove","set","Math","abs","setCoords","renderAll","doMouseUp"],"mappings":"AAAA;AAEA,OAAOA,gBAAP,MAA6B,cAA7B;;AAEA,MAAMC,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAP,CAAkBD,MAAjC;;AAEA,MAAME,SAAN,SAAwBH,gBAAxB,CAAyC;AAEvCI,EAAAA,eAAe,CAACC,KAAD,EAAQ;AACrB,QAAIC,MAAM,GAAG,KAAKC,OAAlB;AACAD,IAAAA,MAAM,CAACE,aAAP,GAAuBF,MAAM,CAACG,SAAP,GAAmB,KAA1C;AACAH,IAAAA,MAAM,CAACI,aAAP,CAAsBC,CAAD,IAAOA,CAAC,CAACC,UAAF,GAAeD,CAAC,CAACE,OAAF,GAAY,KAAvD;AACA,SAAKC,MAAL,GAAcT,KAAK,CAACU,SAApB;AACA,SAAKC,MAAL,GAAcX,KAAK,CAACY,SAApB;AACA,SAAKC,KAAL,GAAab,KAAK,CAACc,SAAnB;AACD;;AAEDC,EAAAA,WAAW,CAACT,CAAD,EAAI;AACb,QAAIL,MAAM,GAAG,KAAKC,OAAlB;AACA,SAAKc,MAAL,GAAc,IAAd;AACA,QAAIC,OAAO,GAAGhB,MAAM,CAACiB,UAAP,CAAkBZ,CAAC,CAACa,CAApB,CAAd;AACA,SAAKC,MAAL,GAAcH,OAAO,CAACI,CAAtB;AACA,SAAKC,MAAL,GAAcL,OAAO,CAACM,CAAtB;AACA,SAAKC,IAAL,GAAY,IAAI5B,MAAM,CAAC6B,IAAX,CAAgB;AAC1BC,MAAAA,IAAI,EAAE,KAAKN,MADe;AAE1BO,MAAAA,GAAG,EAAE,KAAKL,MAFgB;AAG1BM,MAAAA,OAAO,EAAE,MAHiB;AAI1BC,MAAAA,OAAO,EAAE,KAJiB;AAK1BC,MAAAA,KAAK,EAAEb,OAAO,CAACI,CAAR,GAAY,KAAKD,MALE;AAM1BW,MAAAA,MAAM,EAAEd,OAAO,CAACM,CAAR,GAAY,KAAKD,MANC;AAO1BU,MAAAA,MAAM,EAAE,KAAKrB,MAPa;AAQ1BsB,MAAAA,WAAW,EAAE,KAAKxB,MARQ;AAS1ByB,MAAAA,IAAI,EAAE,KAAKrB,KATe;AAU1BsB,MAAAA,kBAAkB,EAAE,KAVM;AAW1B5B,MAAAA,UAAU,EAAE,KAXc;AAY1BC,MAAAA,OAAO,EAAE,KAZiB;AAa1B4B,MAAAA,aAAa,EAAE,IAbW;AAc1BC,MAAAA,YAAY,EAAG,KAdW;AAe1BC,MAAAA,KAAK,EAAE;AAfmB,KAAhB,CAAZ;AAiBArC,IAAAA,MAAM,CAACsC,GAAP,CAAW,KAAKf,IAAhB;AACD;;AAEDgB,EAAAA,WAAW,CAAClC,CAAD,EAAI;AACb,QAAI,CAAC,KAAKU,MAAV,EAAkB;AAClB,QAAIf,MAAM,GAAG,KAAKC,OAAlB;AACA,QAAIe,OAAO,GAAGhB,MAAM,CAACiB,UAAP,CAAkBZ,CAAC,CAACa,CAApB,CAAd;;AACA,QAAI,KAAKC,MAAL,GAAcH,OAAO,CAACI,CAA1B,EAA6B;AAC3B,WAAKG,IAAL,CAAUiB,GAAV,CAAc;AAAEf,QAAAA,IAAI,EAAEgB,IAAI,CAACC,GAAL,CAAS1B,OAAO,CAACI,CAAjB;AAAR,OAAd;AACD;;AACD,QAAI,KAAKC,MAAL,GAAcL,OAAO,CAACM,CAA1B,EAA6B;AAC3B,WAAKC,IAAL,CAAUiB,GAAV,CAAc;AAAEd,QAAAA,GAAG,EAAEe,IAAI,CAACC,GAAL,CAAS1B,OAAO,CAACM,CAAjB;AAAP,OAAd;AACD;;AACD,SAAKC,IAAL,CAAUiB,GAAV,CAAc;AAAEX,MAAAA,KAAK,EAAEY,IAAI,CAACC,GAAL,CAAS,KAAKvB,MAAL,GAAcH,OAAO,CAACI,CAA/B;AAAT,KAAd;AACA,SAAKG,IAAL,CAAUiB,GAAV,CAAc;AAAEV,MAAAA,MAAM,EAAEW,IAAI,CAACC,GAAL,CAAS,KAAKrB,MAAL,GAAcL,OAAO,CAACM,CAA/B;AAAV,KAAd;AACA,SAAKC,IAAL,CAAUoB,SAAV;AACA3C,IAAAA,MAAM,CAAC4C,SAAP;AACD;;AAEDC,EAAAA,SAAS,CAACxC,CAAD,EAAI;AACX,SAAKU,MAAL,GAAc,KAAd;AACD;;AAvDsC;;AA0DzC,eAAelB,SAAf","sourcesContent":["/*eslint no-unused-vars: 0*/\n\nimport FabricCanvasTool from './fabrictool'\n\nconst fabric = require('fabric').fabric;\n\nclass Rectangle extends FabricCanvasTool {\n\n  configureCanvas(props) {\n    let canvas = this._canvas;\n    canvas.isDrawingMode = canvas.selection = false;\n    canvas.forEachObject((o) => o.selectable = o.evented = false);\n    this._width = props.lineWidth;\n    this._color = props.lineColor;\n    this._fill = props.fillColor;\n  }\n\n  doMouseDown(o) {\n    let canvas = this._canvas;\n    this.isDown = true;\n    let pointer = canvas.getPointer(o.e);\n    this.startX = pointer.x;\n    this.startY = pointer.y;\n    this.rect = new fabric.Rect({\n      left: this.startX,\n      top: this.startY,\n      originX: 'left',\n      originY: 'top',\n      width: pointer.x - this.startX,\n      height: pointer.y - this.startY,\n      stroke: this._color,\n      strokeWidth: this._width,\n      fill: this._fill,\n      transparentCorners: false,\n      selectable: false,\n      evented: false,\n      strokeUniform: true,\n      noScaleCache : false,\n      angle: 0\n    });\n    canvas.add(this.rect);\n  }\n\n  doMouseMove(o) {\n    if (!this.isDown) return;\n    let canvas = this._canvas;\n    let pointer = canvas.getPointer(o.e);\n    if (this.startX > pointer.x) {\n      this.rect.set({ left: Math.abs(pointer.x) });\n    }\n    if (this.startY > pointer.y) {\n      this.rect.set({ top: Math.abs(pointer.y) });\n    }\n    this.rect.set({ width: Math.abs(this.startX - pointer.x) });\n    this.rect.set({ height: Math.abs(this.startY - pointer.y) });\n    this.rect.setCoords();\n    canvas.renderAll();\n  }\n\n  doMouseUp(o) {\n    this.isDown = false;\n  }\n}\n\nexport default Rectangle;"]},"metadata":{},"sourceType":"module"}